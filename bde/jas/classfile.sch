;; ==========================================================
;; Class accessors
;; Bigloo (3.8d)
;; Inria -- Sophia Antipolis     Mon Oct 15 07:48:55 CEST 2012 
;; (bigloo.new -classgen Jas/classfile.scm)
;; ==========================================================

;; The directives
(directives

;; JasType
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-JasType::JasType code1202::bstring vect1203::obj)
    (inline JasType?::bool ::obj)
    (JasType-nil::JasType)
    (inline JasType-vect::obj ::JasType)
    (inline JasType-vect-set! ::JasType ::obj)
    (inline JasType-code::bstring ::JasType)
    (inline JasType-code-set! ::JasType ::bstring))))

;; basic
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-basic::basic code1199::bstring vect1200::obj)
    (inline basic?::bool ::obj)
    (basic-nil::basic)
    (inline basic-vect::obj ::basic)
    (inline basic-vect-set! ::basic ::obj)
    (inline basic-code::bstring ::basic)
    (inline basic-code-set! ::basic ::bstring))))

;; vect
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-vect::vect code1195::bstring vect1196::obj type1197::JasType)
    (inline vect?::bool ::obj)
    (vect-nil::vect)
    (inline vect-type::JasType ::vect)
    (inline vect-type-set! ::vect ::JasType)
    (inline vect-vect::obj ::vect)
    (inline vect-vect-set! ::vect ::obj)
    (inline vect-code::bstring ::vect)
    (inline vect-code-set! ::vect ::bstring))))

;; JasFun
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-JasFun::JasFun code1190::bstring vect1191::obj tret1192::JasType targs1193::obj)
    (inline JasFun?::bool ::obj)
    (JasFun-nil::JasFun)
    (inline JasFun-targs::obj ::JasFun)
    (inline JasFun-targs-set! ::JasFun ::obj)
    (inline JasFun-tret::JasType ::JasFun)
    (inline JasFun-tret-set! ::JasFun ::JasType)
    (inline JasFun-vect::obj ::JasFun)
    (inline JasFun-vect-set! ::JasFun ::obj)
    (inline JasFun-code::bstring ::JasFun)
    (inline JasFun-code-set! ::JasFun ::bstring))))

;; classe
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-classe::classe code1184::bstring vect1185::obj flags1186::obj name1187::obj pool1188::obj)
    (inline classe?::bool ::obj)
    (classe-nil::classe)
    (inline classe-pool::obj ::classe)
    (inline classe-pool-set! ::classe ::obj)
    (inline classe-name::obj ::classe)
    (inline classe-name-set! ::classe ::obj)
    (inline classe-flags::obj ::classe)
    (inline classe-flags-set! ::classe ::obj)
    (inline classe-vect::obj ::classe)
    (inline classe-vect-set! ::classe ::obj)
    (inline classe-code::bstring ::classe)
    (inline classe-code-set! ::classe ::bstring))))

;; field-or-method
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-field-or-method::field-or-method flags1174::obj name1175::bstring owner1176::obj usertype1177::obj type1178::obj pname1179::obj descriptor1180::obj pool1181::obj attributes1182::obj)
    (inline field-or-method?::bool ::obj)
    (field-or-method-nil::field-or-method)
    (inline field-or-method-attributes::obj ::field-or-method)
    (inline field-or-method-attributes-set! ::field-or-method ::obj)
    (inline field-or-method-pool::obj ::field-or-method)
    (inline field-or-method-pool-set! ::field-or-method ::obj)
    (inline field-or-method-descriptor::obj ::field-or-method)
    (inline field-or-method-descriptor-set! ::field-or-method ::obj)
    (inline field-or-method-pname::obj ::field-or-method)
    (inline field-or-method-pname-set! ::field-or-method ::obj)
    (inline field-or-method-type::obj ::field-or-method)
    (inline field-or-method-type-set! ::field-or-method ::obj)
    (inline field-or-method-usertype::obj ::field-or-method)
    (inline field-or-method-usertype-set! ::field-or-method ::obj)
    (inline field-or-method-owner::obj ::field-or-method)
    (inline field-or-method-owner-set! ::field-or-method ::obj)
    (inline field-or-method-name::bstring ::field-or-method)
    (inline field-or-method-name-set! ::field-or-method ::bstring)
    (inline field-or-method-flags::obj ::field-or-method)
    (inline field-or-method-flags-set! ::field-or-method ::obj))))

;; field
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-field::field flags1164::obj name1165::bstring owner1166::obj usertype1167::obj type1168::obj pname1169::obj descriptor1170::obj pool1171::obj attributes1172::obj)
    (inline field?::bool ::obj)
    (field-nil::field)
    (inline field-attributes::obj ::field)
    (inline field-attributes-set! ::field ::obj)
    (inline field-pool::obj ::field)
    (inline field-pool-set! ::field ::obj)
    (inline field-descriptor::obj ::field)
    (inline field-descriptor-set! ::field ::obj)
    (inline field-pname::obj ::field)
    (inline field-pname-set! ::field ::obj)
    (inline field-type::obj ::field)
    (inline field-type-set! ::field ::obj)
    (inline field-usertype::obj ::field)
    (inline field-usertype-set! ::field ::obj)
    (inline field-owner::obj ::field)
    (inline field-owner-set! ::field ::obj)
    (inline field-name::bstring ::field)
    (inline field-name-set! ::field ::bstring)
    (inline field-flags::obj ::field)
    (inline field-flags-set! ::field ::obj))))

;; method
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-method::method flags1154::obj name1155::bstring owner1156::obj usertype1157::obj type1158::obj pname1159::obj descriptor1160::obj pool1161::obj attributes1162::obj)
    (inline method?::bool ::obj)
    (method-nil::method)
    (inline method-attributes::obj ::method)
    (inline method-attributes-set! ::method ::obj)
    (inline method-pool::obj ::method)
    (inline method-pool-set! ::method ::obj)
    (inline method-descriptor::obj ::method)
    (inline method-descriptor-set! ::method ::obj)
    (inline method-pname::obj ::method)
    (inline method-pname-set! ::method ::obj)
    (inline method-type::obj ::method)
    (inline method-type-set! ::method ::obj)
    (inline method-usertype::obj ::method)
    (inline method-usertype-set! ::method ::obj)
    (inline method-owner::obj ::method)
    (inline method-owner-set! ::method ::obj)
    (inline method-name::bstring ::method)
    (inline method-name-set! ::method ::bstring)
    (inline method-flags::obj ::method)
    (inline method-flags-set! ::method ::obj))))

;; attribute
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-attribute::attribute type1149::obj name1150::obj size1151::obj info1152::obj)
    (inline attribute?::bool ::obj)
    (attribute-nil::attribute)
    (inline attribute-info::obj ::attribute)
    (inline attribute-info-set! ::attribute ::obj)
    (inline attribute-size::obj ::attribute)
    (inline attribute-size-set! ::attribute ::obj)
    (inline attribute-name::obj ::attribute)
    (inline attribute-name-set! ::attribute ::obj)
    (inline attribute-type::obj ::attribute)
    (inline attribute-type-set! ::attribute ::obj))))

;; classfile
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-classfile::classfile current-method1136::obj globals1137::obj pool1138::obj pool-size1139::obj pooled-names1140::obj flags1141::obj me1142::obj super1143::obj interfaces1144::obj fields1145::obj methods1146::obj attributes1147::obj)
    (inline classfile?::bool ::obj)
    (classfile-nil::classfile)
    (inline classfile-attributes::obj ::classfile)
    (inline classfile-attributes-set! ::classfile ::obj)
    (inline classfile-methods::obj ::classfile)
    (inline classfile-methods-set! ::classfile ::obj)
    (inline classfile-fields::obj ::classfile)
    (inline classfile-fields-set! ::classfile ::obj)
    (inline classfile-interfaces::obj ::classfile)
    (inline classfile-interfaces-set! ::classfile ::obj)
    (inline classfile-super::obj ::classfile)
    (inline classfile-super-set! ::classfile ::obj)
    (inline classfile-me::obj ::classfile)
    (inline classfile-me-set! ::classfile ::obj)
    (inline classfile-flags::obj ::classfile)
    (inline classfile-flags-set! ::classfile ::obj)
    (inline classfile-pooled-names::obj ::classfile)
    (inline classfile-pooled-names-set! ::classfile ::obj)
    (inline classfile-pool-size::obj ::classfile)
    (inline classfile-pool-size-set! ::classfile ::obj)
    (inline classfile-pool::obj ::classfile)
    (inline classfile-pool-set! ::classfile ::obj)
    (inline classfile-globals::obj ::classfile)
    (inline classfile-globals-set! ::classfile ::obj)
    (inline classfile-current-method::obj ::classfile)
    (inline classfile-current-method-set! ::classfile ::obj)))))

;; The definitions
(cond-expand (bigloo-class-sans
;; JasType
(define-inline (make-JasType::JasType code1202::bstring vect1203::obj) (instantiate::JasType (code code1202) (vect vect1203)))
(define-inline (JasType?::bool obj::obj) ((@ isa? __object) obj (@ JasType jas_classfile)))
(define (JasType-nil::JasType) (class-nil (@ JasType jas_classfile)))
(define-inline (JasType-vect::obj o::JasType) (with-access::JasType o (vect) vect))
(define-inline (JasType-vect-set! o::JasType v::obj) (with-access::JasType o (vect) (set! vect v)))
(define-inline (JasType-code::bstring o::JasType) (with-access::JasType o (code) code))
(define-inline (JasType-code-set! o::JasType v::bstring) (with-access::JasType o (code) (set! code v)))

;; basic
(define-inline (make-basic::basic code1199::bstring vect1200::obj) (instantiate::basic (code code1199) (vect vect1200)))
(define-inline (basic?::bool obj::obj) ((@ isa? __object) obj (@ basic jas_classfile)))
(define (basic-nil::basic) (class-nil (@ basic jas_classfile)))
(define-inline (basic-vect::obj o::basic) (with-access::basic o (vect) vect))
(define-inline (basic-vect-set! o::basic v::obj) (with-access::basic o (vect) (set! vect v)))
(define-inline (basic-code::bstring o::basic) (with-access::basic o (code) code))
(define-inline (basic-code-set! o::basic v::bstring) (with-access::basic o (code) (set! code v)))

;; vect
(define-inline (make-vect::vect code1195::bstring vect1196::obj type1197::JasType) (instantiate::vect (code code1195) (vect vect1196) (type type1197)))
(define-inline (vect?::bool obj::obj) ((@ isa? __object) obj (@ vect jas_classfile)))
(define (vect-nil::vect) (class-nil (@ vect jas_classfile)))
(define-inline (vect-type::JasType o::vect) (with-access::vect o (type) type))
(define-inline (vect-type-set! o::vect v::JasType) (with-access::vect o (type) (set! type v)))
(define-inline (vect-vect::obj o::vect) (with-access::vect o (vect) vect))
(define-inline (vect-vect-set! o::vect v::obj) (with-access::vect o (vect) (set! vect v)))
(define-inline (vect-code::bstring o::vect) (with-access::vect o (code) code))
(define-inline (vect-code-set! o::vect v::bstring) (with-access::vect o (code) (set! code v)))

;; JasFun
(define-inline (make-JasFun::JasFun code1190::bstring vect1191::obj tret1192::JasType targs1193::obj) (instantiate::JasFun (code code1190) (vect vect1191) (tret tret1192) (targs targs1193)))
(define-inline (JasFun?::bool obj::obj) ((@ isa? __object) obj (@ JasFun jas_classfile)))
(define (JasFun-nil::JasFun) (class-nil (@ JasFun jas_classfile)))
(define-inline (JasFun-targs::obj o::JasFun) (with-access::JasFun o (targs) targs))
(define-inline (JasFun-targs-set! o::JasFun v::obj) (with-access::JasFun o (targs) (set! targs v)))
(define-inline (JasFun-tret::JasType o::JasFun) (with-access::JasFun o (tret) tret))
(define-inline (JasFun-tret-set! o::JasFun v::JasType) (with-access::JasFun o (tret) (set! tret v)))
(define-inline (JasFun-vect::obj o::JasFun) (with-access::JasFun o (vect) vect))
(define-inline (JasFun-vect-set! o::JasFun v::obj) (with-access::JasFun o (vect) (set! vect v)))
(define-inline (JasFun-code::bstring o::JasFun) (with-access::JasFun o (code) code))
(define-inline (JasFun-code-set! o::JasFun v::bstring) (with-access::JasFun o (code) (set! code v)))

;; classe
(define-inline (make-classe::classe code1184::bstring vect1185::obj flags1186::obj name1187::obj pool1188::obj) (instantiate::classe (code code1184) (vect vect1185) (flags flags1186) (name name1187) (pool pool1188)))
(define-inline (classe?::bool obj::obj) ((@ isa? __object) obj (@ classe jas_classfile)))
(define (classe-nil::classe) (class-nil (@ classe jas_classfile)))
(define-inline (classe-pool::obj o::classe) (with-access::classe o (pool) pool))
(define-inline (classe-pool-set! o::classe v::obj) (with-access::classe o (pool) (set! pool v)))
(define-inline (classe-name::obj o::classe) (with-access::classe o (name) name))
(define-inline (classe-name-set! o::classe v::obj) (with-access::classe o (name) (set! name v)))
(define-inline (classe-flags::obj o::classe) (with-access::classe o (flags) flags))
(define-inline (classe-flags-set! o::classe v::obj) (with-access::classe o (flags) (set! flags v)))
(define-inline (classe-vect::obj o::classe) (with-access::classe o (vect) vect))
(define-inline (classe-vect-set! o::classe v::obj) (with-access::classe o (vect) (set! vect v)))
(define-inline (classe-code::bstring o::classe) (with-access::classe o (code) code))
(define-inline (classe-code-set! o::classe v::bstring) (with-access::classe o (code) (set! code v)))

;; field-or-method
(define-inline (make-field-or-method::field-or-method flags1174::obj name1175::bstring owner1176::obj usertype1177::obj type1178::obj pname1179::obj descriptor1180::obj pool1181::obj attributes1182::obj) (instantiate::field-or-method (flags flags1174) (name name1175) (owner owner1176) (usertype usertype1177) (type type1178) (pname pname1179) (descriptor descriptor1180) (pool pool1181) (attributes attributes1182)))
(define-inline (field-or-method?::bool obj::obj) ((@ isa? __object) obj (@ field-or-method jas_classfile)))
(define (field-or-method-nil::field-or-method) (class-nil (@ field-or-method jas_classfile)))
(define-inline (field-or-method-attributes::obj o::field-or-method) (with-access::field-or-method o (attributes) attributes))
(define-inline (field-or-method-attributes-set! o::field-or-method v::obj) (with-access::field-or-method o (attributes) (set! attributes v)))
(define-inline (field-or-method-pool::obj o::field-or-method) (with-access::field-or-method o (pool) pool))
(define-inline (field-or-method-pool-set! o::field-or-method v::obj) (with-access::field-or-method o (pool) (set! pool v)))
(define-inline (field-or-method-descriptor::obj o::field-or-method) (with-access::field-or-method o (descriptor) descriptor))
(define-inline (field-or-method-descriptor-set! o::field-or-method v::obj) (with-access::field-or-method o (descriptor) (set! descriptor v)))
(define-inline (field-or-method-pname::obj o::field-or-method) (with-access::field-or-method o (pname) pname))
(define-inline (field-or-method-pname-set! o::field-or-method v::obj) (with-access::field-or-method o (pname) (set! pname v)))
(define-inline (field-or-method-type::obj o::field-or-method) (with-access::field-or-method o (type) type))
(define-inline (field-or-method-type-set! o::field-or-method v::obj) (with-access::field-or-method o (type) (set! type v)))
(define-inline (field-or-method-usertype::obj o::field-or-method) (with-access::field-or-method o (usertype) usertype))
(define-inline (field-or-method-usertype-set! o::field-or-method v::obj) (with-access::field-or-method o (usertype) (set! usertype v)))
(define-inline (field-or-method-owner::obj o::field-or-method) (with-access::field-or-method o (owner) owner))
(define-inline (field-or-method-owner-set! o::field-or-method v::obj) (with-access::field-or-method o (owner) (set! owner v)))
(define-inline (field-or-method-name::bstring o::field-or-method) (with-access::field-or-method o (name) name))
(define-inline (field-or-method-name-set! o::field-or-method v::bstring) (with-access::field-or-method o (name) (set! name v)))
(define-inline (field-or-method-flags::obj o::field-or-method) (with-access::field-or-method o (flags) flags))
(define-inline (field-or-method-flags-set! o::field-or-method v::obj) (with-access::field-or-method o (flags) (set! flags v)))

;; field
(define-inline (make-field::field flags1164::obj name1165::bstring owner1166::obj usertype1167::obj type1168::obj pname1169::obj descriptor1170::obj pool1171::obj attributes1172::obj) (instantiate::field (flags flags1164) (name name1165) (owner owner1166) (usertype usertype1167) (type type1168) (pname pname1169) (descriptor descriptor1170) (pool pool1171) (attributes attributes1172)))
(define-inline (field?::bool obj::obj) ((@ isa? __object) obj (@ field jas_classfile)))
(define (field-nil::field) (class-nil (@ field jas_classfile)))
(define-inline (field-attributes::obj o::field) (with-access::field o (attributes) attributes))
(define-inline (field-attributes-set! o::field v::obj) (with-access::field o (attributes) (set! attributes v)))
(define-inline (field-pool::obj o::field) (with-access::field o (pool) pool))
(define-inline (field-pool-set! o::field v::obj) (with-access::field o (pool) (set! pool v)))
(define-inline (field-descriptor::obj o::field) (with-access::field o (descriptor) descriptor))
(define-inline (field-descriptor-set! o::field v::obj) (with-access::field o (descriptor) (set! descriptor v)))
(define-inline (field-pname::obj o::field) (with-access::field o (pname) pname))
(define-inline (field-pname-set! o::field v::obj) (with-access::field o (pname) (set! pname v)))
(define-inline (field-type::obj o::field) (with-access::field o (type) type))
(define-inline (field-type-set! o::field v::obj) (with-access::field o (type) (set! type v)))
(define-inline (field-usertype::obj o::field) (with-access::field o (usertype) usertype))
(define-inline (field-usertype-set! o::field v::obj) (with-access::field o (usertype) (set! usertype v)))
(define-inline (field-owner::obj o::field) (with-access::field o (owner) owner))
(define-inline (field-owner-set! o::field v::obj) (with-access::field o (owner) (set! owner v)))
(define-inline (field-name::bstring o::field) (with-access::field o (name) name))
(define-inline (field-name-set! o::field v::bstring) (with-access::field o (name) (set! name v)))
(define-inline (field-flags::obj o::field) (with-access::field o (flags) flags))
(define-inline (field-flags-set! o::field v::obj) (with-access::field o (flags) (set! flags v)))

;; method
(define-inline (make-method::method flags1154::obj name1155::bstring owner1156::obj usertype1157::obj type1158::obj pname1159::obj descriptor1160::obj pool1161::obj attributes1162::obj) (instantiate::method (flags flags1154) (name name1155) (owner owner1156) (usertype usertype1157) (type type1158) (pname pname1159) (descriptor descriptor1160) (pool pool1161) (attributes attributes1162)))
(define-inline (method?::bool obj::obj) ((@ isa? __object) obj (@ method jas_classfile)))
(define (method-nil::method) (class-nil (@ method jas_classfile)))
(define-inline (method-attributes::obj o::method) (with-access::method o (attributes) attributes))
(define-inline (method-attributes-set! o::method v::obj) (with-access::method o (attributes) (set! attributes v)))
(define-inline (method-pool::obj o::method) (with-access::method o (pool) pool))
(define-inline (method-pool-set! o::method v::obj) (with-access::method o (pool) (set! pool v)))
(define-inline (method-descriptor::obj o::method) (with-access::method o (descriptor) descriptor))
(define-inline (method-descriptor-set! o::method v::obj) (with-access::method o (descriptor) (set! descriptor v)))
(define-inline (method-pname::obj o::method) (with-access::method o (pname) pname))
(define-inline (method-pname-set! o::method v::obj) (with-access::method o (pname) (set! pname v)))
(define-inline (method-type::obj o::method) (with-access::method o (type) type))
(define-inline (method-type-set! o::method v::obj) (with-access::method o (type) (set! type v)))
(define-inline (method-usertype::obj o::method) (with-access::method o (usertype) usertype))
(define-inline (method-usertype-set! o::method v::obj) (with-access::method o (usertype) (set! usertype v)))
(define-inline (method-owner::obj o::method) (with-access::method o (owner) owner))
(define-inline (method-owner-set! o::method v::obj) (with-access::method o (owner) (set! owner v)))
(define-inline (method-name::bstring o::method) (with-access::method o (name) name))
(define-inline (method-name-set! o::method v::bstring) (with-access::method o (name) (set! name v)))
(define-inline (method-flags::obj o::method) (with-access::method o (flags) flags))
(define-inline (method-flags-set! o::method v::obj) (with-access::method o (flags) (set! flags v)))

;; attribute
(define-inline (make-attribute::attribute type1149::obj name1150::obj size1151::obj info1152::obj) (instantiate::attribute (type type1149) (name name1150) (size size1151) (info info1152)))
(define-inline (attribute?::bool obj::obj) ((@ isa? __object) obj (@ attribute jas_classfile)))
(define (attribute-nil::attribute) (class-nil (@ attribute jas_classfile)))
(define-inline (attribute-info::obj o::attribute) (with-access::attribute o (info) info))
(define-inline (attribute-info-set! o::attribute v::obj) (with-access::attribute o (info) (set! info v)))
(define-inline (attribute-size::obj o::attribute) (with-access::attribute o (size) size))
(define-inline (attribute-size-set! o::attribute v::obj) (with-access::attribute o (size) (set! size v)))
(define-inline (attribute-name::obj o::attribute) (with-access::attribute o (name) name))
(define-inline (attribute-name-set! o::attribute v::obj) (with-access::attribute o (name) (set! name v)))
(define-inline (attribute-type::obj o::attribute) (with-access::attribute o (type) type))
(define-inline (attribute-type-set! o::attribute v::obj) (with-access::attribute o (type) (set! type v)))

;; classfile
(define-inline (make-classfile::classfile current-method1136::obj globals1137::obj pool1138::obj pool-size1139::obj pooled-names1140::obj flags1141::obj me1142::obj super1143::obj interfaces1144::obj fields1145::obj methods1146::obj attributes1147::obj) (instantiate::classfile (current-method current-method1136) (globals globals1137) (pool pool1138) (pool-size pool-size1139) (pooled-names pooled-names1140) (flags flags1141) (me me1142) (super super1143) (interfaces interfaces1144) (fields fields1145) (methods methods1146) (attributes attributes1147)))
(define-inline (classfile?::bool obj::obj) ((@ isa? __object) obj (@ classfile jas_classfile)))
(define (classfile-nil::classfile) (class-nil (@ classfile jas_classfile)))
(define-inline (classfile-attributes::obj o::classfile) (with-access::classfile o (attributes) attributes))
(define-inline (classfile-attributes-set! o::classfile v::obj) (with-access::classfile o (attributes) (set! attributes v)))
(define-inline (classfile-methods::obj o::classfile) (with-access::classfile o (methods) methods))
(define-inline (classfile-methods-set! o::classfile v::obj) (with-access::classfile o (methods) (set! methods v)))
(define-inline (classfile-fields::obj o::classfile) (with-access::classfile o (fields) fields))
(define-inline (classfile-fields-set! o::classfile v::obj) (with-access::classfile o (fields) (set! fields v)))
(define-inline (classfile-interfaces::obj o::classfile) (with-access::classfile o (interfaces) interfaces))
(define-inline (classfile-interfaces-set! o::classfile v::obj) (with-access::classfile o (interfaces) (set! interfaces v)))
(define-inline (classfile-super::obj o::classfile) (with-access::classfile o (super) super))
(define-inline (classfile-super-set! o::classfile v::obj) (with-access::classfile o (super) (set! super v)))
(define-inline (classfile-me::obj o::classfile) (with-access::classfile o (me) me))
(define-inline (classfile-me-set! o::classfile v::obj) (with-access::classfile o (me) (set! me v)))
(define-inline (classfile-flags::obj o::classfile) (with-access::classfile o (flags) flags))
(define-inline (classfile-flags-set! o::classfile v::obj) (with-access::classfile o (flags) (set! flags v)))
(define-inline (classfile-pooled-names::obj o::classfile) (with-access::classfile o (pooled-names) pooled-names))
(define-inline (classfile-pooled-names-set! o::classfile v::obj) (with-access::classfile o (pooled-names) (set! pooled-names v)))
(define-inline (classfile-pool-size::obj o::classfile) (with-access::classfile o (pool-size) pool-size))
(define-inline (classfile-pool-size-set! o::classfile v::obj) (with-access::classfile o (pool-size) (set! pool-size v)))
(define-inline (classfile-pool::obj o::classfile) (with-access::classfile o (pool) pool))
(define-inline (classfile-pool-set! o::classfile v::obj) (with-access::classfile o (pool) (set! pool v)))
(define-inline (classfile-globals::obj o::classfile) (with-access::classfile o (globals) globals))
(define-inline (classfile-globals-set! o::classfile v::obj) (with-access::classfile o (globals) (set! globals v)))
(define-inline (classfile-current-method::obj o::classfile) (with-access::classfile o (current-method) current-method))
(define-inline (classfile-current-method-set! o::classfile v::obj) (with-access::classfile o (current-method) (set! current-method v)))
))
