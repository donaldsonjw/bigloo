;; ==========================================================
;; Class accessors
;; Bigloo (3.7b)
;; Inria -- Sophia Antipolis     Mon Nov 14 16:42:36 CET 2011 
;; (bigloo.new BackEnd/backend.scm -classgen)
;; ==========================================================

;; The directives
(directives

;; backend
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline backend?::bool ::obj)
    (backend-nil::backend)
    (inline backend-typed-funcall::bool ::backend)
    (inline backend-typed-funcall-set! ::backend ::bool)
    (inline backend-type-check::bool ::backend)
    (inline backend-type-check-set! ::backend ::bool)
    (inline backend-bound-check::bool ::backend)
    (inline backend-bound-check-set! ::backend ::bool)
    (inline backend-pregisters::pair-nil ::backend)
    (inline backend-pregisters-set! ::backend ::pair-nil)
    (inline backend-registers::pair-nil ::backend)
    (inline backend-registers-set! ::backend ::pair-nil)
    (inline backend-require-tailc::bool ::backend)
    (inline backend-require-tailc-set! ::backend ::bool)
    (inline backend-tvector-descr-support::bool ::backend)
    (inline backend-tvector-descr-support-set! ::backend ::bool)
    (inline backend-pragma-support::bool ::backend)
    (inline backend-pragma-support-set! ::backend ::bool)
    (inline backend-debug-support::pair-nil ::backend)
    (inline backend-debug-support-set! ::backend ::pair-nil)
    (inline backend-foreign-clause-support::pair-nil ::backend)
    (inline backend-foreign-clause-support-set! ::backend ::pair-nil)
    (inline backend-trace-support::bool ::backend)
    (inline backend-trace-support-set! ::backend ::bool)
    (inline backend-typed-eq::bool ::backend)
    (inline backend-typed-eq-set! ::backend ::bool)
    (inline backend-foreign-closure::bool ::backend)
    (inline backend-foreign-closure-set! ::backend ::bool)
    (inline backend-remove-empty-let::bool ::backend)
    (inline backend-remove-empty-let-set! ::backend ::bool)
    (inline backend-effect+::bool ::backend)
    (inline backend-effect+-set! ::backend ::bool)
    (inline backend-qualified-types::bool ::backend)
    (inline backend-qualified-types-set! ::backend ::bool)
    (inline backend-callcc::bool ::backend)
    (inline backend-callcc-set! ::backend ::bool)
    (inline backend-heap-compatible::symbol ::backend)
    (inline backend-heap-compatible-set! ::backend ::symbol)
    (inline backend-heap-suffix::bstring ::backend)
    (inline backend-heap-suffix-set! ::backend ::bstring)
    (inline backend-typed::bool ::backend)
    (inline backend-typed-set! ::backend ::bool)
    (inline backend-types::obj ::backend)
    (inline backend-types-set! ::backend ::obj)
    (inline backend-functions::obj ::backend)
    (inline backend-functions-set! ::backend ::obj)
    (inline backend-variables::obj ::backend)
    (inline backend-variables-set! ::backend ::obj)
    (inline backend-extern-types::obj ::backend)
    (inline backend-extern-types-set! ::backend ::obj)
    (inline backend-extern-functions::obj ::backend)
    (inline backend-extern-functions-set! ::backend ::obj)
    (inline backend-extern-variables::obj ::backend)
    (inline backend-extern-variables-set! ::backend ::obj)
    (inline backend-name::bstring ::backend)
    (inline backend-name-set! ::backend ::bstring)
    (inline backend-srfi0::symbol ::backend)
    (inline backend-srfi0-set! ::backend ::symbol)
    (inline backend-language::symbol ::backend)
    (inline backend-language-set! ::backend ::symbol)))))

;; The definitions
(cond-expand (bigloo-class-sans
;; backend
(define-inline (backend?::bool obj::obj) ((@ isa? __object) obj (@ backend backend_backend)))
(define (backend-nil::backend) (class-nil (@ backend backend_backend)))
(define-inline (backend-typed-funcall::bool o::backend) (with-access::backend o (typed-funcall) typed-funcall))
(define-inline (backend-typed-funcall-set! o::backend v::bool) (with-access::backend o (typed-funcall) (set! typed-funcall v)))
(define-inline (backend-type-check::bool o::backend) (with-access::backend o (type-check) type-check))
(define-inline (backend-type-check-set! o::backend v::bool) (with-access::backend o (type-check) (set! type-check v)))
(define-inline (backend-bound-check::bool o::backend) (with-access::backend o (bound-check) bound-check))
(define-inline (backend-bound-check-set! o::backend v::bool) (with-access::backend o (bound-check) (set! bound-check v)))
(define-inline (backend-pregisters::pair-nil o::backend) (with-access::backend o (pregisters) pregisters))
(define-inline (backend-pregisters-set! o::backend v::pair-nil) (with-access::backend o (pregisters) (set! pregisters v)))
(define-inline (backend-registers::pair-nil o::backend) (with-access::backend o (registers) registers))
(define-inline (backend-registers-set! o::backend v::pair-nil) (with-access::backend o (registers) (set! registers v)))
(define-inline (backend-require-tailc::bool o::backend) (with-access::backend o (require-tailc) require-tailc))
(define-inline (backend-require-tailc-set! o::backend v::bool) (with-access::backend o (require-tailc) (set! require-tailc v)))
(define-inline (backend-tvector-descr-support::bool o::backend) (with-access::backend o (tvector-descr-support) tvector-descr-support))
(define-inline (backend-tvector-descr-support-set! o::backend v::bool) (with-access::backend o (tvector-descr-support) (set! tvector-descr-support v)))
(define-inline (backend-pragma-support::bool o::backend) (with-access::backend o (pragma-support) pragma-support))
(define-inline (backend-pragma-support-set! o::backend v::bool) (with-access::backend o (pragma-support) (set! pragma-support v)))
(define-inline (backend-debug-support::pair-nil o::backend) (with-access::backend o (debug-support) debug-support))
(define-inline (backend-debug-support-set! o::backend v::pair-nil) (with-access::backend o (debug-support) (set! debug-support v)))
(define-inline (backend-foreign-clause-support::pair-nil o::backend) (with-access::backend o (foreign-clause-support) foreign-clause-support))
(define-inline (backend-foreign-clause-support-set! o::backend v::pair-nil) (with-access::backend o (foreign-clause-support) (set! foreign-clause-support v)))
(define-inline (backend-trace-support::bool o::backend) (with-access::backend o (trace-support) trace-support))
(define-inline (backend-trace-support-set! o::backend v::bool) (with-access::backend o (trace-support) (set! trace-support v)))
(define-inline (backend-typed-eq::bool o::backend) (with-access::backend o (typed-eq) typed-eq))
(define-inline (backend-typed-eq-set! o::backend v::bool) (with-access::backend o (typed-eq) (set! typed-eq v)))
(define-inline (backend-foreign-closure::bool o::backend) (with-access::backend o (foreign-closure) foreign-closure))
(define-inline (backend-foreign-closure-set! o::backend v::bool) (with-access::backend o (foreign-closure) (set! foreign-closure v)))
(define-inline (backend-remove-empty-let::bool o::backend) (with-access::backend o (remove-empty-let) remove-empty-let))
(define-inline (backend-remove-empty-let-set! o::backend v::bool) (with-access::backend o (remove-empty-let) (set! remove-empty-let v)))
(define-inline (backend-effect+::bool o::backend) (with-access::backend o (effect+) effect+))
(define-inline (backend-effect+-set! o::backend v::bool) (with-access::backend o (effect+) (set! effect+ v)))
(define-inline (backend-qualified-types::bool o::backend) (with-access::backend o (qualified-types) qualified-types))
(define-inline (backend-qualified-types-set! o::backend v::bool) (with-access::backend o (qualified-types) (set! qualified-types v)))
(define-inline (backend-callcc::bool o::backend) (with-access::backend o (callcc) callcc))
(define-inline (backend-callcc-set! o::backend v::bool) (with-access::backend o (callcc) (set! callcc v)))
(define-inline (backend-heap-compatible::symbol o::backend) (with-access::backend o (heap-compatible) heap-compatible))
(define-inline (backend-heap-compatible-set! o::backend v::symbol) (with-access::backend o (heap-compatible) (set! heap-compatible v)))
(define-inline (backend-heap-suffix::bstring o::backend) (with-access::backend o (heap-suffix) heap-suffix))
(define-inline (backend-heap-suffix-set! o::backend v::bstring) (with-access::backend o (heap-suffix) (set! heap-suffix v)))
(define-inline (backend-typed::bool o::backend) (with-access::backend o (typed) typed))
(define-inline (backend-typed-set! o::backend v::bool) (with-access::backend o (typed) (set! typed v)))
(define-inline (backend-types::obj o::backend) (with-access::backend o (types) types))
(define-inline (backend-types-set! o::backend v::obj) (with-access::backend o (types) (set! types v)))
(define-inline (backend-functions::obj o::backend) (with-access::backend o (functions) functions))
(define-inline (backend-functions-set! o::backend v::obj) (with-access::backend o (functions) (set! functions v)))
(define-inline (backend-variables::obj o::backend) (with-access::backend o (variables) variables))
(define-inline (backend-variables-set! o::backend v::obj) (with-access::backend o (variables) (set! variables v)))
(define-inline (backend-extern-types::obj o::backend) (with-access::backend o (extern-types) extern-types))
(define-inline (backend-extern-types-set! o::backend v::obj) (with-access::backend o (extern-types) (set! extern-types v)))
(define-inline (backend-extern-functions::obj o::backend) (with-access::backend o (extern-functions) extern-functions))
(define-inline (backend-extern-functions-set! o::backend v::obj) (with-access::backend o (extern-functions) (set! extern-functions v)))
(define-inline (backend-extern-variables::obj o::backend) (with-access::backend o (extern-variables) extern-variables))
(define-inline (backend-extern-variables-set! o::backend v::obj) (with-access::backend o (extern-variables) (set! extern-variables v)))
(define-inline (backend-name::bstring o::backend) (with-access::backend o (name) name))
(define-inline (backend-name-set! o::backend v::bstring) (with-access::backend o (name) (set! name v)))
(define-inline (backend-srfi0::symbol o::backend) (with-access::backend o (srfi0) srfi0))
(define-inline (backend-srfi0-set! o::backend v::symbol) (with-access::backend o (srfi0) (set! srfi0 v)))
(define-inline (backend-language::symbol o::backend) (with-access::backend o (language) language))
(define-inline (backend-language-set! o::backend v::symbol) (with-access::backend o (language) (set! language v)))
))
