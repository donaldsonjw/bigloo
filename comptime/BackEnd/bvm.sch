;; ==========================================================
;; Class accessors
;; Bigloo (3.7b)
;; Inria -- Sophia Antipolis     Mon Nov 14 18:35:27 CET 2011 
;; (bigloo.new -classgen BackEnd/bvm.scm)
;; ==========================================================

;; The directives
(directives

;; bvm
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline bvm?::bool ::obj)
    (bvm-nil::bvm)
    (inline bvm-typed-funcall::bool ::bvm)
    (inline bvm-typed-funcall-set! ::bvm ::bool)
    (inline bvm-type-check::bool ::bvm)
    (inline bvm-type-check-set! ::bvm ::bool)
    (inline bvm-bound-check::bool ::bvm)
    (inline bvm-bound-check-set! ::bvm ::bool)
    (inline bvm-pregisters::pair-nil ::bvm)
    (inline bvm-pregisters-set! ::bvm ::pair-nil)
    (inline bvm-registers::pair-nil ::bvm)
    (inline bvm-registers-set! ::bvm ::pair-nil)
    (inline bvm-require-tailc::bool ::bvm)
    (inline bvm-require-tailc-set! ::bvm ::bool)
    (inline bvm-tvector-descr-support::bool ::bvm)
    (inline bvm-tvector-descr-support-set! ::bvm ::bool)
    (inline bvm-pragma-support::bool ::bvm)
    (inline bvm-pragma-support-set! ::bvm ::bool)
    (inline bvm-debug-support::pair-nil ::bvm)
    (inline bvm-debug-support-set! ::bvm ::pair-nil)
    (inline bvm-foreign-clause-support::pair-nil ::bvm)
    (inline bvm-foreign-clause-support-set! ::bvm ::pair-nil)
    (inline bvm-trace-support::bool ::bvm)
    (inline bvm-trace-support-set! ::bvm ::bool)
    (inline bvm-typed-eq::bool ::bvm)
    (inline bvm-typed-eq-set! ::bvm ::bool)
    (inline bvm-foreign-closure::bool ::bvm)
    (inline bvm-foreign-closure-set! ::bvm ::bool)
    (inline bvm-remove-empty-let::bool ::bvm)
    (inline bvm-remove-empty-let-set! ::bvm ::bool)
    (inline bvm-effect+::bool ::bvm)
    (inline bvm-effect+-set! ::bvm ::bool)
    (inline bvm-qualified-types::bool ::bvm)
    (inline bvm-qualified-types-set! ::bvm ::bool)
    (inline bvm-callcc::bool ::bvm)
    (inline bvm-callcc-set! ::bvm ::bool)
    (inline bvm-heap-compatible::symbol ::bvm)
    (inline bvm-heap-compatible-set! ::bvm ::symbol)
    (inline bvm-heap-suffix::bstring ::bvm)
    (inline bvm-heap-suffix-set! ::bvm ::bstring)
    (inline bvm-typed::bool ::bvm)
    (inline bvm-typed-set! ::bvm ::bool)
    (inline bvm-types::obj ::bvm)
    (inline bvm-types-set! ::bvm ::obj)
    (inline bvm-functions::obj ::bvm)
    (inline bvm-functions-set! ::bvm ::obj)
    (inline bvm-variables::obj ::bvm)
    (inline bvm-variables-set! ::bvm ::obj)
    (inline bvm-extern-types::obj ::bvm)
    (inline bvm-extern-types-set! ::bvm ::obj)
    (inline bvm-extern-functions::obj ::bvm)
    (inline bvm-extern-functions-set! ::bvm ::obj)
    (inline bvm-extern-variables::obj ::bvm)
    (inline bvm-extern-variables-set! ::bvm ::obj)
    (inline bvm-name::bstring ::bvm)
    (inline bvm-name-set! ::bvm ::bstring)
    (inline bvm-srfi0::symbol ::bvm)
    (inline bvm-srfi0-set! ::bvm ::symbol)
    (inline bvm-language::symbol ::bvm)
    (inline bvm-language-set! ::bvm ::symbol)))))

;; The definitions
(cond-expand (bigloo-class-sans
;; bvm
(define-inline (bvm?::bool obj::obj) ((@ isa? __object) obj (@ bvm backend_bvm)))
(define (bvm-nil::bvm) (class-nil (@ bvm backend_bvm)))
(define-inline (bvm-typed-funcall::bool o::bvm) (with-access::bvm o (typed-funcall) typed-funcall))
(define-inline (bvm-typed-funcall-set! o::bvm v::bool) (with-access::bvm o (typed-funcall) (set! typed-funcall v)))
(define-inline (bvm-type-check::bool o::bvm) (with-access::bvm o (type-check) type-check))
(define-inline (bvm-type-check-set! o::bvm v::bool) (with-access::bvm o (type-check) (set! type-check v)))
(define-inline (bvm-bound-check::bool o::bvm) (with-access::bvm o (bound-check) bound-check))
(define-inline (bvm-bound-check-set! o::bvm v::bool) (with-access::bvm o (bound-check) (set! bound-check v)))
(define-inline (bvm-pregisters::pair-nil o::bvm) (with-access::bvm o (pregisters) pregisters))
(define-inline (bvm-pregisters-set! o::bvm v::pair-nil) (with-access::bvm o (pregisters) (set! pregisters v)))
(define-inline (bvm-registers::pair-nil o::bvm) (with-access::bvm o (registers) registers))
(define-inline (bvm-registers-set! o::bvm v::pair-nil) (with-access::bvm o (registers) (set! registers v)))
(define-inline (bvm-require-tailc::bool o::bvm) (with-access::bvm o (require-tailc) require-tailc))
(define-inline (bvm-require-tailc-set! o::bvm v::bool) (with-access::bvm o (require-tailc) (set! require-tailc v)))
(define-inline (bvm-tvector-descr-support::bool o::bvm) (with-access::bvm o (tvector-descr-support) tvector-descr-support))
(define-inline (bvm-tvector-descr-support-set! o::bvm v::bool) (with-access::bvm o (tvector-descr-support) (set! tvector-descr-support v)))
(define-inline (bvm-pragma-support::bool o::bvm) (with-access::bvm o (pragma-support) pragma-support))
(define-inline (bvm-pragma-support-set! o::bvm v::bool) (with-access::bvm o (pragma-support) (set! pragma-support v)))
(define-inline (bvm-debug-support::pair-nil o::bvm) (with-access::bvm o (debug-support) debug-support))
(define-inline (bvm-debug-support-set! o::bvm v::pair-nil) (with-access::bvm o (debug-support) (set! debug-support v)))
(define-inline (bvm-foreign-clause-support::pair-nil o::bvm) (with-access::bvm o (foreign-clause-support) foreign-clause-support))
(define-inline (bvm-foreign-clause-support-set! o::bvm v::pair-nil) (with-access::bvm o (foreign-clause-support) (set! foreign-clause-support v)))
(define-inline (bvm-trace-support::bool o::bvm) (with-access::bvm o (trace-support) trace-support))
(define-inline (bvm-trace-support-set! o::bvm v::bool) (with-access::bvm o (trace-support) (set! trace-support v)))
(define-inline (bvm-typed-eq::bool o::bvm) (with-access::bvm o (typed-eq) typed-eq))
(define-inline (bvm-typed-eq-set! o::bvm v::bool) (with-access::bvm o (typed-eq) (set! typed-eq v)))
(define-inline (bvm-foreign-closure::bool o::bvm) (with-access::bvm o (foreign-closure) foreign-closure))
(define-inline (bvm-foreign-closure-set! o::bvm v::bool) (with-access::bvm o (foreign-closure) (set! foreign-closure v)))
(define-inline (bvm-remove-empty-let::bool o::bvm) (with-access::bvm o (remove-empty-let) remove-empty-let))
(define-inline (bvm-remove-empty-let-set! o::bvm v::bool) (with-access::bvm o (remove-empty-let) (set! remove-empty-let v)))
(define-inline (bvm-effect+::bool o::bvm) (with-access::bvm o (effect+) effect+))
(define-inline (bvm-effect+-set! o::bvm v::bool) (with-access::bvm o (effect+) (set! effect+ v)))
(define-inline (bvm-qualified-types::bool o::bvm) (with-access::bvm o (qualified-types) qualified-types))
(define-inline (bvm-qualified-types-set! o::bvm v::bool) (with-access::bvm o (qualified-types) (set! qualified-types v)))
(define-inline (bvm-callcc::bool o::bvm) (with-access::bvm o (callcc) callcc))
(define-inline (bvm-callcc-set! o::bvm v::bool) (with-access::bvm o (callcc) (set! callcc v)))
(define-inline (bvm-heap-compatible::symbol o::bvm) (with-access::bvm o (heap-compatible) heap-compatible))
(define-inline (bvm-heap-compatible-set! o::bvm v::symbol) (with-access::bvm o (heap-compatible) (set! heap-compatible v)))
(define-inline (bvm-heap-suffix::bstring o::bvm) (with-access::bvm o (heap-suffix) heap-suffix))
(define-inline (bvm-heap-suffix-set! o::bvm v::bstring) (with-access::bvm o (heap-suffix) (set! heap-suffix v)))
(define-inline (bvm-typed::bool o::bvm) (with-access::bvm o (typed) typed))
(define-inline (bvm-typed-set! o::bvm v::bool) (with-access::bvm o (typed) (set! typed v)))
(define-inline (bvm-types::obj o::bvm) (with-access::bvm o (types) types))
(define-inline (bvm-types-set! o::bvm v::obj) (with-access::bvm o (types) (set! types v)))
(define-inline (bvm-functions::obj o::bvm) (with-access::bvm o (functions) functions))
(define-inline (bvm-functions-set! o::bvm v::obj) (with-access::bvm o (functions) (set! functions v)))
(define-inline (bvm-variables::obj o::bvm) (with-access::bvm o (variables) variables))
(define-inline (bvm-variables-set! o::bvm v::obj) (with-access::bvm o (variables) (set! variables v)))
(define-inline (bvm-extern-types::obj o::bvm) (with-access::bvm o (extern-types) extern-types))
(define-inline (bvm-extern-types-set! o::bvm v::obj) (with-access::bvm o (extern-types) (set! extern-types v)))
(define-inline (bvm-extern-functions::obj o::bvm) (with-access::bvm o (extern-functions) extern-functions))
(define-inline (bvm-extern-functions-set! o::bvm v::obj) (with-access::bvm o (extern-functions) (set! extern-functions v)))
(define-inline (bvm-extern-variables::obj o::bvm) (with-access::bvm o (extern-variables) extern-variables))
(define-inline (bvm-extern-variables-set! o::bvm v::obj) (with-access::bvm o (extern-variables) (set! extern-variables v)))
(define-inline (bvm-name::bstring o::bvm) (with-access::bvm o (name) name))
(define-inline (bvm-name-set! o::bvm v::bstring) (with-access::bvm o (name) (set! name v)))
(define-inline (bvm-srfi0::symbol o::bvm) (with-access::bvm o (srfi0) srfi0))
(define-inline (bvm-srfi0-set! o::bvm v::symbol) (with-access::bvm o (srfi0) (set! srfi0 v)))
(define-inline (bvm-language::symbol o::bvm) (with-access::bvm o (language) language))
(define-inline (bvm-language-set! o::bvm v::symbol) (with-access::bvm o (language) (set! language v)))
))
