;; ==========================================================
;; Class accessors
;; Bigloo (3.7b)
;; Inria -- Sophia Antipolis     Mon Nov 14 18:35:27 CET 2011 
;; (bigloo.new -classgen BackEnd/jvm_class.scm)
;; ==========================================================

;; The directives
(directives

;; jvm
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-jvm::jvm language1142::symbol srfi01143::symbol name1144::bstring extern-variables1145::obj extern-functions1146::obj extern-types1147::obj variables1148::obj functions1149::obj types1150::obj typed1151::bool heap-suffix1152::bstring heap-compatible1153::symbol callcc1154::bool qualified-types1155::bool effect+1156::bool remove-empty-let1157::bool foreign-closure1158::bool typed-eq1159::bool trace-support1160::bool foreign-clause-suppo1161::pair-nil debug-support1162::pair-nil pragma-support1163::bool tvector-descr-suppor1164::bool require-tailc1165::bool registers1166::pair-nil pregisters1167::pair-nil bound-check1168::bool type-check1169::bool typed-funcall1170::bool qname1171::obj classes1172::obj current-class1173::obj declarations1174::obj fields1175::obj methods1176::obj current-method1177::obj code1178::obj light-funcalls1179::obj inline1180::obj)
    (inline jvm?::bool ::obj)
    (jvm-nil::jvm)
    (inline jvm-inline::obj ::jvm)
    (inline jvm-inline-set! ::jvm ::obj)
    (inline jvm-light-funcalls::obj ::jvm)
    (inline jvm-light-funcalls-set! ::jvm ::obj)
    (inline jvm-code::obj ::jvm)
    (inline jvm-code-set! ::jvm ::obj)
    (inline jvm-current-method::obj ::jvm)
    (inline jvm-current-method-set! ::jvm ::obj)
    (inline jvm-methods::obj ::jvm)
    (inline jvm-methods-set! ::jvm ::obj)
    (inline jvm-fields::obj ::jvm)
    (inline jvm-fields-set! ::jvm ::obj)
    (inline jvm-declarations::obj ::jvm)
    (inline jvm-declarations-set! ::jvm ::obj)
    (inline jvm-current-class::obj ::jvm)
    (inline jvm-current-class-set! ::jvm ::obj)
    (inline jvm-classes::obj ::jvm)
    (inline jvm-classes-set! ::jvm ::obj)
    (inline jvm-qname::obj ::jvm)
    (inline jvm-qname-set! ::jvm ::obj)
    (inline jvm-typed-funcall::bool ::jvm)
    (inline jvm-typed-funcall-set! ::jvm ::bool)
    (inline jvm-type-check::bool ::jvm)
    (inline jvm-type-check-set! ::jvm ::bool)
    (inline jvm-bound-check::bool ::jvm)
    (inline jvm-bound-check-set! ::jvm ::bool)
    (inline jvm-pregisters::pair-nil ::jvm)
    (inline jvm-pregisters-set! ::jvm ::pair-nil)
    (inline jvm-registers::pair-nil ::jvm)
    (inline jvm-registers-set! ::jvm ::pair-nil)
    (inline jvm-require-tailc::bool ::jvm)
    (inline jvm-require-tailc-set! ::jvm ::bool)
    (inline jvm-tvector-descr-support::bool ::jvm)
    (inline jvm-tvector-descr-support-set! ::jvm ::bool)
    (inline jvm-pragma-support::bool ::jvm)
    (inline jvm-pragma-support-set! ::jvm ::bool)
    (inline jvm-debug-support::pair-nil ::jvm)
    (inline jvm-debug-support-set! ::jvm ::pair-nil)
    (inline jvm-foreign-clause-support::pair-nil ::jvm)
    (inline jvm-foreign-clause-support-set! ::jvm ::pair-nil)
    (inline jvm-trace-support::bool ::jvm)
    (inline jvm-trace-support-set! ::jvm ::bool)
    (inline jvm-typed-eq::bool ::jvm)
    (inline jvm-typed-eq-set! ::jvm ::bool)
    (inline jvm-foreign-closure::bool ::jvm)
    (inline jvm-foreign-closure-set! ::jvm ::bool)
    (inline jvm-remove-empty-let::bool ::jvm)
    (inline jvm-remove-empty-let-set! ::jvm ::bool)
    (inline jvm-effect+::bool ::jvm)
    (inline jvm-effect+-set! ::jvm ::bool)
    (inline jvm-qualified-types::bool ::jvm)
    (inline jvm-qualified-types-set! ::jvm ::bool)
    (inline jvm-callcc::bool ::jvm)
    (inline jvm-callcc-set! ::jvm ::bool)
    (inline jvm-heap-compatible::symbol ::jvm)
    (inline jvm-heap-compatible-set! ::jvm ::symbol)
    (inline jvm-heap-suffix::bstring ::jvm)
    (inline jvm-heap-suffix-set! ::jvm ::bstring)
    (inline jvm-typed::bool ::jvm)
    (inline jvm-typed-set! ::jvm ::bool)
    (inline jvm-types::obj ::jvm)
    (inline jvm-types-set! ::jvm ::obj)
    (inline jvm-functions::obj ::jvm)
    (inline jvm-functions-set! ::jvm ::obj)
    (inline jvm-variables::obj ::jvm)
    (inline jvm-variables-set! ::jvm ::obj)
    (inline jvm-extern-types::obj ::jvm)
    (inline jvm-extern-types-set! ::jvm ::obj)
    (inline jvm-extern-functions::obj ::jvm)
    (inline jvm-extern-functions-set! ::jvm ::obj)
    (inline jvm-extern-variables::obj ::jvm)
    (inline jvm-extern-variables-set! ::jvm ::obj)
    (inline jvm-name::bstring ::jvm)
    (inline jvm-name-set! ::jvm ::bstring)
    (inline jvm-srfi0::symbol ::jvm)
    (inline jvm-srfi0-set! ::jvm ::symbol)
    (inline jvm-language::symbol ::jvm)
    (inline jvm-language-set! ::jvm ::symbol)))))

;; The definitions
(cond-expand (bigloo-class-sans
;; jvm
(define-inline (make-jvm::jvm language1142::symbol srfi01143::symbol name1144::bstring extern-variables1145::obj extern-functions1146::obj extern-types1147::obj variables1148::obj functions1149::obj types1150::obj typed1151::bool heap-suffix1152::bstring heap-compatible1153::symbol callcc1154::bool qualified-types1155::bool effect+1156::bool remove-empty-let1157::bool foreign-closure1158::bool typed-eq1159::bool trace-support1160::bool foreign-clause-suppo1161::pair-nil debug-support1162::pair-nil pragma-support1163::bool tvector-descr-suppor1164::bool require-tailc1165::bool registers1166::pair-nil pregisters1167::pair-nil bound-check1168::bool type-check1169::bool typed-funcall1170::bool qname1171::obj classes1172::obj current-class1173::obj declarations1174::obj fields1175::obj methods1176::obj current-method1177::obj code1178::obj light-funcalls1179::obj inline1180::obj) (instantiate::jvm (language language1142) (srfi0 srfi01143) (name name1144) (extern-variables extern-variables1145) (extern-functions extern-functions1146) (extern-types extern-types1147) (variables variables1148) (functions functions1149) (types types1150) (typed typed1151) (heap-suffix heap-suffix1152) (heap-compatible heap-compatible1153) (callcc callcc1154) (qualified-types qualified-types1155) (effect+ effect+1156) (remove-empty-let remove-empty-let1157) (foreign-closure foreign-closure1158) (typed-eq typed-eq1159) (trace-support trace-support1160) (foreign-clause-support foreign-clause-suppo1161) (debug-support debug-support1162) (pragma-support pragma-support1163) (tvector-descr-support tvector-descr-suppor1164) (require-tailc require-tailc1165) (registers registers1166) (pregisters pregisters1167) (bound-check bound-check1168) (type-check type-check1169) (typed-funcall typed-funcall1170) (qname qname1171) (classes classes1172) (current-class current-class1173) (declarations declarations1174) (fields fields1175) (methods methods1176) (current-method current-method1177) (code code1178) (light-funcalls light-funcalls1179) (inline inline1180)))
(define-inline (jvm?::bool obj::obj) ((@ isa? __object) obj (@ jvm backend_jvm_class)))
(define (jvm-nil::jvm) (class-nil (@ jvm backend_jvm_class)))
(define-inline (jvm-inline::obj o::jvm) (with-access::jvm o (inline) inline))
(define-inline (jvm-inline-set! o::jvm v::obj) (with-access::jvm o (inline) (set! inline v)))
(define-inline (jvm-light-funcalls::obj o::jvm) (with-access::jvm o (light-funcalls) light-funcalls))
(define-inline (jvm-light-funcalls-set! o::jvm v::obj) (with-access::jvm o (light-funcalls) (set! light-funcalls v)))
(define-inline (jvm-code::obj o::jvm) (with-access::jvm o (code) code))
(define-inline (jvm-code-set! o::jvm v::obj) (with-access::jvm o (code) (set! code v)))
(define-inline (jvm-current-method::obj o::jvm) (with-access::jvm o (current-method) current-method))
(define-inline (jvm-current-method-set! o::jvm v::obj) (with-access::jvm o (current-method) (set! current-method v)))
(define-inline (jvm-methods::obj o::jvm) (with-access::jvm o (methods) methods))
(define-inline (jvm-methods-set! o::jvm v::obj) (with-access::jvm o (methods) (set! methods v)))
(define-inline (jvm-fields::obj o::jvm) (with-access::jvm o (fields) fields))
(define-inline (jvm-fields-set! o::jvm v::obj) (with-access::jvm o (fields) (set! fields v)))
(define-inline (jvm-declarations::obj o::jvm) (with-access::jvm o (declarations) declarations))
(define-inline (jvm-declarations-set! o::jvm v::obj) (with-access::jvm o (declarations) (set! declarations v)))
(define-inline (jvm-current-class::obj o::jvm) (with-access::jvm o (current-class) current-class))
(define-inline (jvm-current-class-set! o::jvm v::obj) (with-access::jvm o (current-class) (set! current-class v)))
(define-inline (jvm-classes::obj o::jvm) (with-access::jvm o (classes) classes))
(define-inline (jvm-classes-set! o::jvm v::obj) (with-access::jvm o (classes) (set! classes v)))
(define-inline (jvm-qname::obj o::jvm) (with-access::jvm o (qname) qname))
(define-inline (jvm-qname-set! o::jvm v::obj) (with-access::jvm o (qname) (set! qname v)))
(define-inline (jvm-typed-funcall::bool o::jvm) (with-access::jvm o (typed-funcall) typed-funcall))
(define-inline (jvm-typed-funcall-set! o::jvm v::bool) (with-access::jvm o (typed-funcall) (set! typed-funcall v)))
(define-inline (jvm-type-check::bool o::jvm) (with-access::jvm o (type-check) type-check))
(define-inline (jvm-type-check-set! o::jvm v::bool) (with-access::jvm o (type-check) (set! type-check v)))
(define-inline (jvm-bound-check::bool o::jvm) (with-access::jvm o (bound-check) bound-check))
(define-inline (jvm-bound-check-set! o::jvm v::bool) (with-access::jvm o (bound-check) (set! bound-check v)))
(define-inline (jvm-pregisters::pair-nil o::jvm) (with-access::jvm o (pregisters) pregisters))
(define-inline (jvm-pregisters-set! o::jvm v::pair-nil) (with-access::jvm o (pregisters) (set! pregisters v)))
(define-inline (jvm-registers::pair-nil o::jvm) (with-access::jvm o (registers) registers))
(define-inline (jvm-registers-set! o::jvm v::pair-nil) (with-access::jvm o (registers) (set! registers v)))
(define-inline (jvm-require-tailc::bool o::jvm) (with-access::jvm o (require-tailc) require-tailc))
(define-inline (jvm-require-tailc-set! o::jvm v::bool) (with-access::jvm o (require-tailc) (set! require-tailc v)))
(define-inline (jvm-tvector-descr-support::bool o::jvm) (with-access::jvm o (tvector-descr-support) tvector-descr-support))
(define-inline (jvm-tvector-descr-support-set! o::jvm v::bool) (with-access::jvm o (tvector-descr-support) (set! tvector-descr-support v)))
(define-inline (jvm-pragma-support::bool o::jvm) (with-access::jvm o (pragma-support) pragma-support))
(define-inline (jvm-pragma-support-set! o::jvm v::bool) (with-access::jvm o (pragma-support) (set! pragma-support v)))
(define-inline (jvm-debug-support::pair-nil o::jvm) (with-access::jvm o (debug-support) debug-support))
(define-inline (jvm-debug-support-set! o::jvm v::pair-nil) (with-access::jvm o (debug-support) (set! debug-support v)))
(define-inline (jvm-foreign-clause-support::pair-nil o::jvm) (with-access::jvm o (foreign-clause-support) foreign-clause-support))
(define-inline (jvm-foreign-clause-support-set! o::jvm v::pair-nil) (with-access::jvm o (foreign-clause-support) (set! foreign-clause-support v)))
(define-inline (jvm-trace-support::bool o::jvm) (with-access::jvm o (trace-support) trace-support))
(define-inline (jvm-trace-support-set! o::jvm v::bool) (with-access::jvm o (trace-support) (set! trace-support v)))
(define-inline (jvm-typed-eq::bool o::jvm) (with-access::jvm o (typed-eq) typed-eq))
(define-inline (jvm-typed-eq-set! o::jvm v::bool) (with-access::jvm o (typed-eq) (set! typed-eq v)))
(define-inline (jvm-foreign-closure::bool o::jvm) (with-access::jvm o (foreign-closure) foreign-closure))
(define-inline (jvm-foreign-closure-set! o::jvm v::bool) (with-access::jvm o (foreign-closure) (set! foreign-closure v)))
(define-inline (jvm-remove-empty-let::bool o::jvm) (with-access::jvm o (remove-empty-let) remove-empty-let))
(define-inline (jvm-remove-empty-let-set! o::jvm v::bool) (with-access::jvm o (remove-empty-let) (set! remove-empty-let v)))
(define-inline (jvm-effect+::bool o::jvm) (with-access::jvm o (effect+) effect+))
(define-inline (jvm-effect+-set! o::jvm v::bool) (with-access::jvm o (effect+) (set! effect+ v)))
(define-inline (jvm-qualified-types::bool o::jvm) (with-access::jvm o (qualified-types) qualified-types))
(define-inline (jvm-qualified-types-set! o::jvm v::bool) (with-access::jvm o (qualified-types) (set! qualified-types v)))
(define-inline (jvm-callcc::bool o::jvm) (with-access::jvm o (callcc) callcc))
(define-inline (jvm-callcc-set! o::jvm v::bool) (with-access::jvm o (callcc) (set! callcc v)))
(define-inline (jvm-heap-compatible::symbol o::jvm) (with-access::jvm o (heap-compatible) heap-compatible))
(define-inline (jvm-heap-compatible-set! o::jvm v::symbol) (with-access::jvm o (heap-compatible) (set! heap-compatible v)))
(define-inline (jvm-heap-suffix::bstring o::jvm) (with-access::jvm o (heap-suffix) heap-suffix))
(define-inline (jvm-heap-suffix-set! o::jvm v::bstring) (with-access::jvm o (heap-suffix) (set! heap-suffix v)))
(define-inline (jvm-typed::bool o::jvm) (with-access::jvm o (typed) typed))
(define-inline (jvm-typed-set! o::jvm v::bool) (with-access::jvm o (typed) (set! typed v)))
(define-inline (jvm-types::obj o::jvm) (with-access::jvm o (types) types))
(define-inline (jvm-types-set! o::jvm v::obj) (with-access::jvm o (types) (set! types v)))
(define-inline (jvm-functions::obj o::jvm) (with-access::jvm o (functions) functions))
(define-inline (jvm-functions-set! o::jvm v::obj) (with-access::jvm o (functions) (set! functions v)))
(define-inline (jvm-variables::obj o::jvm) (with-access::jvm o (variables) variables))
(define-inline (jvm-variables-set! o::jvm v::obj) (with-access::jvm o (variables) (set! variables v)))
(define-inline (jvm-extern-types::obj o::jvm) (with-access::jvm o (extern-types) extern-types))
(define-inline (jvm-extern-types-set! o::jvm v::obj) (with-access::jvm o (extern-types) (set! extern-types v)))
(define-inline (jvm-extern-functions::obj o::jvm) (with-access::jvm o (extern-functions) extern-functions))
(define-inline (jvm-extern-functions-set! o::jvm v::obj) (with-access::jvm o (extern-functions) (set! extern-functions v)))
(define-inline (jvm-extern-variables::obj o::jvm) (with-access::jvm o (extern-variables) extern-variables))
(define-inline (jvm-extern-variables-set! o::jvm v::obj) (with-access::jvm o (extern-variables) (set! extern-variables v)))
(define-inline (jvm-name::bstring o::jvm) (with-access::jvm o (name) name))
(define-inline (jvm-name-set! o::jvm v::bstring) (with-access::jvm o (name) (set! name v)))
(define-inline (jvm-srfi0::symbol o::jvm) (with-access::jvm o (srfi0) srfi0))
(define-inline (jvm-srfi0-set! o::jvm v::symbol) (with-access::jvm o (srfi0) (set! srfi0 v)))
(define-inline (jvm-language::symbol o::jvm) (with-access::jvm o (language) language))
(define-inline (jvm-language-set! o::jvm v::symbol) (with-access::jvm o (language) (set! language v)))
))
