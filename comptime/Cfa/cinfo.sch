;; ==========================================================
;; Class accessors
;; Bigloo (4.1a)
;; Inria -- Sophia Antipolis     Sun Nov 24 08:08:37 CET 2013 
;; (bigloo -classgen Cfa/cinfo.scm)
;; ==========================================================

;; The directives
(directives

;; approx
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-approx::approx type1735::type type-locked?1736::bool allocs1737::obj top?1738::bool lost-stamp1739::long dup1740::obj)
    (inline approx?::bool ::obj)
    (approx-nil::approx)
    (inline approx-dup::obj ::approx)
    (inline approx-dup-set! ::approx ::obj)
    (inline approx-lost-stamp::long ::approx)
    (inline approx-lost-stamp-set! ::approx ::long)
    (inline approx-top?::bool ::approx)
    (inline approx-top?-set! ::approx ::bool)
    (inline approx-allocs::obj ::approx)
    (inline approx-type-locked?::bool ::approx)
    (inline approx-type::type ::approx)
    (inline approx-type-set! ::approx ::type))))

;; cfun/Cinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-cfun/Cinfo::cfun/Cinfo arity1720::long side-effect1721::obj predicate-of1722::obj stack-allocator1723::obj top?1725::bool the-closure1726::obj effect1727::obj failsafe1728::obj args-type1729::obj macro?1730::bool infix?1731::bool method1732::pair-nil approx1733::approx)
    (inline cfun/Cinfo?::bool ::obj)
    (cfun/Cinfo-nil::cfun/Cinfo)
    (inline cfun/Cinfo-approx::approx ::cfun/Cinfo)
    (inline cfun/Cinfo-method::pair-nil ::cfun/Cinfo)
    (inline cfun/Cinfo-method-set! ::cfun/Cinfo ::pair-nil)
    (inline cfun/Cinfo-infix?::bool ::cfun/Cinfo)
    (inline cfun/Cinfo-infix?-set! ::cfun/Cinfo ::bool)
    (inline cfun/Cinfo-macro?::bool ::cfun/Cinfo)
    (inline cfun/Cinfo-args-type::obj ::cfun/Cinfo)
    (inline cfun/Cinfo-failsafe::obj ::cfun/Cinfo)
    (inline cfun/Cinfo-failsafe-set! ::cfun/Cinfo ::obj)
    (inline cfun/Cinfo-effect::obj ::cfun/Cinfo)
    (inline cfun/Cinfo-effect-set! ::cfun/Cinfo ::obj)
    (inline cfun/Cinfo-the-closure::obj ::cfun/Cinfo)
    (inline cfun/Cinfo-the-closure-set! ::cfun/Cinfo ::obj)
    (inline cfun/Cinfo-top?::bool ::cfun/Cinfo)
    (inline cfun/Cinfo-top?-set! ::cfun/Cinfo ::bool)
    (inline cfun/Cinfo-stack-allocator::obj ::cfun/Cinfo)
    (inline cfun/Cinfo-stack-allocator-set! ::cfun/Cinfo ::obj)
    (inline cfun/Cinfo-predicate-of::obj ::cfun/Cinfo)
    (inline cfun/Cinfo-predicate-of-set! ::cfun/Cinfo ::obj)
    (inline cfun/Cinfo-side-effect::obj ::cfun/Cinfo)
    (inline cfun/Cinfo-side-effect-set! ::cfun/Cinfo ::obj)
    (inline cfun/Cinfo-arity::long ::cfun/Cinfo))))

;; extern-sfun/Cinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-extern-sfun/Cinfo::extern-sfun/Cinfo arity1698::long side-effect1699::obj predicate-of1700::obj stack-allocator1701::obj top?1702::bool the-closure1703::obj effect1704::obj failsafe1705::obj property1706::obj args1707::obj args-name1708::obj body1709::obj class1710::obj dsssl-keywords1711::obj loc1712::obj optionals1713::obj keys1714::obj the-closure-global1715::obj strength1716::symbol polymorphic?1717::bool approx1718::approx)
    (inline extern-sfun/Cinfo?::bool ::obj)
    (extern-sfun/Cinfo-nil::extern-sfun/Cinfo)
    (inline extern-sfun/Cinfo-approx::approx ::extern-sfun/Cinfo)
    (inline extern-sfun/Cinfo-polymorphic?::bool ::extern-sfun/Cinfo)
    (inline extern-sfun/Cinfo-polymorphic?-set! ::extern-sfun/Cinfo ::bool)
    (inline extern-sfun/Cinfo-strength::symbol ::extern-sfun/Cinfo)
    (inline extern-sfun/Cinfo-strength-set! ::extern-sfun/Cinfo ::symbol)
    (inline extern-sfun/Cinfo-the-closure-global::obj ::extern-sfun/Cinfo)
    (inline extern-sfun/Cinfo-the-closure-global-set! ::extern-sfun/Cinfo ::obj)
    (inline extern-sfun/Cinfo-keys::obj ::extern-sfun/Cinfo)
    (inline extern-sfun/Cinfo-optionals::obj ::extern-sfun/Cinfo)
    (inline extern-sfun/Cinfo-loc::obj ::extern-sfun/Cinfo)
    (inline extern-sfun/Cinfo-loc-set! ::extern-sfun/Cinfo ::obj)
    (inline extern-sfun/Cinfo-dsssl-keywords::obj ::extern-sfun/Cinfo)
    (inline extern-sfun/Cinfo-dsssl-keywords-set! ::extern-sfun/Cinfo ::obj)
    (inline extern-sfun/Cinfo-class::obj ::extern-sfun/Cinfo)
    (inline extern-sfun/Cinfo-class-set! ::extern-sfun/Cinfo ::obj)
    (inline extern-sfun/Cinfo-body::obj ::extern-sfun/Cinfo)
    (inline extern-sfun/Cinfo-body-set! ::extern-sfun/Cinfo ::obj)
    (inline extern-sfun/Cinfo-args-name::obj ::extern-sfun/Cinfo)
    (inline extern-sfun/Cinfo-args::obj ::extern-sfun/Cinfo)
    (inline extern-sfun/Cinfo-args-set! ::extern-sfun/Cinfo ::obj)
    (inline extern-sfun/Cinfo-property::obj ::extern-sfun/Cinfo)
    (inline extern-sfun/Cinfo-property-set! ::extern-sfun/Cinfo ::obj)
    (inline extern-sfun/Cinfo-failsafe::obj ::extern-sfun/Cinfo)
    (inline extern-sfun/Cinfo-failsafe-set! ::extern-sfun/Cinfo ::obj)
    (inline extern-sfun/Cinfo-effect::obj ::extern-sfun/Cinfo)
    (inline extern-sfun/Cinfo-effect-set! ::extern-sfun/Cinfo ::obj)
    (inline extern-sfun/Cinfo-the-closure::obj ::extern-sfun/Cinfo)
    (inline extern-sfun/Cinfo-the-closure-set! ::extern-sfun/Cinfo ::obj)
    (inline extern-sfun/Cinfo-top?::bool ::extern-sfun/Cinfo)
    (inline extern-sfun/Cinfo-top?-set! ::extern-sfun/Cinfo ::bool)
    (inline extern-sfun/Cinfo-stack-allocator::obj ::extern-sfun/Cinfo)
    (inline extern-sfun/Cinfo-stack-allocator-set! ::extern-sfun/Cinfo ::obj)
    (inline extern-sfun/Cinfo-predicate-of::obj ::extern-sfun/Cinfo)
    (inline extern-sfun/Cinfo-predicate-of-set! ::extern-sfun/Cinfo ::obj)
    (inline extern-sfun/Cinfo-side-effect::obj ::extern-sfun/Cinfo)
    (inline extern-sfun/Cinfo-side-effect-set! ::extern-sfun/Cinfo ::obj)
    (inline extern-sfun/Cinfo-arity::long ::extern-sfun/Cinfo))))

;; intern-sfun/Cinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-intern-sfun/Cinfo::intern-sfun/Cinfo arity1675::long side-effect1676::obj predicate-of1677::obj stack-allocator1678::obj top?1679::bool the-closure1680::obj effect1681::obj failsafe1682::obj property1683::obj args1684::obj args-name1685::obj body1686::obj class1687::obj dsssl-keywords1688::obj loc1689::obj optionals1690::obj keys1691::obj the-closure-global1692::obj strength1693::symbol polymorphic?1694::bool approx1695::approx stamp1696::long)
    (inline intern-sfun/Cinfo?::bool ::obj)
    (intern-sfun/Cinfo-nil::intern-sfun/Cinfo)
    (inline intern-sfun/Cinfo-stamp::long ::intern-sfun/Cinfo)
    (inline intern-sfun/Cinfo-stamp-set! ::intern-sfun/Cinfo ::long)
    (inline intern-sfun/Cinfo-approx::approx ::intern-sfun/Cinfo)
    (inline intern-sfun/Cinfo-polymorphic?::bool ::intern-sfun/Cinfo)
    (inline intern-sfun/Cinfo-polymorphic?-set! ::intern-sfun/Cinfo ::bool)
    (inline intern-sfun/Cinfo-strength::symbol ::intern-sfun/Cinfo)
    (inline intern-sfun/Cinfo-strength-set! ::intern-sfun/Cinfo ::symbol)
    (inline intern-sfun/Cinfo-the-closure-global::obj ::intern-sfun/Cinfo)
    (inline intern-sfun/Cinfo-the-closure-global-set! ::intern-sfun/Cinfo ::obj)
    (inline intern-sfun/Cinfo-keys::obj ::intern-sfun/Cinfo)
    (inline intern-sfun/Cinfo-optionals::obj ::intern-sfun/Cinfo)
    (inline intern-sfun/Cinfo-loc::obj ::intern-sfun/Cinfo)
    (inline intern-sfun/Cinfo-loc-set! ::intern-sfun/Cinfo ::obj)
    (inline intern-sfun/Cinfo-dsssl-keywords::obj ::intern-sfun/Cinfo)
    (inline intern-sfun/Cinfo-dsssl-keywords-set! ::intern-sfun/Cinfo ::obj)
    (inline intern-sfun/Cinfo-class::obj ::intern-sfun/Cinfo)
    (inline intern-sfun/Cinfo-class-set! ::intern-sfun/Cinfo ::obj)
    (inline intern-sfun/Cinfo-body::obj ::intern-sfun/Cinfo)
    (inline intern-sfun/Cinfo-body-set! ::intern-sfun/Cinfo ::obj)
    (inline intern-sfun/Cinfo-args-name::obj ::intern-sfun/Cinfo)
    (inline intern-sfun/Cinfo-args::obj ::intern-sfun/Cinfo)
    (inline intern-sfun/Cinfo-args-set! ::intern-sfun/Cinfo ::obj)
    (inline intern-sfun/Cinfo-property::obj ::intern-sfun/Cinfo)
    (inline intern-sfun/Cinfo-property-set! ::intern-sfun/Cinfo ::obj)
    (inline intern-sfun/Cinfo-failsafe::obj ::intern-sfun/Cinfo)
    (inline intern-sfun/Cinfo-failsafe-set! ::intern-sfun/Cinfo ::obj)
    (inline intern-sfun/Cinfo-effect::obj ::intern-sfun/Cinfo)
    (inline intern-sfun/Cinfo-effect-set! ::intern-sfun/Cinfo ::obj)
    (inline intern-sfun/Cinfo-the-closure::obj ::intern-sfun/Cinfo)
    (inline intern-sfun/Cinfo-the-closure-set! ::intern-sfun/Cinfo ::obj)
    (inline intern-sfun/Cinfo-top?::bool ::intern-sfun/Cinfo)
    (inline intern-sfun/Cinfo-top?-set! ::intern-sfun/Cinfo ::bool)
    (inline intern-sfun/Cinfo-stack-allocator::obj ::intern-sfun/Cinfo)
    (inline intern-sfun/Cinfo-stack-allocator-set! ::intern-sfun/Cinfo ::obj)
    (inline intern-sfun/Cinfo-predicate-of::obj ::intern-sfun/Cinfo)
    (inline intern-sfun/Cinfo-predicate-of-set! ::intern-sfun/Cinfo ::obj)
    (inline intern-sfun/Cinfo-side-effect::obj ::intern-sfun/Cinfo)
    (inline intern-sfun/Cinfo-side-effect-set! ::intern-sfun/Cinfo ::obj)
    (inline intern-sfun/Cinfo-arity::long ::intern-sfun/Cinfo))))

;; scnst/Cinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-scnst/Cinfo::scnst/Cinfo node1670::obj class1671::obj loc1672::obj approx1673::approx)
    (inline scnst/Cinfo?::bool ::obj)
    (scnst/Cinfo-nil::scnst/Cinfo)
    (inline scnst/Cinfo-approx::approx ::scnst/Cinfo)
    (inline scnst/Cinfo-loc::obj ::scnst/Cinfo)
    (inline scnst/Cinfo-loc-set! ::scnst/Cinfo ::obj)
    (inline scnst/Cinfo-class::obj ::scnst/Cinfo)
    (inline scnst/Cinfo-class-set! ::scnst/Cinfo ::obj)
    (inline scnst/Cinfo-node::obj ::scnst/Cinfo))))

;; pre-clo-env
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-pre-clo-env::pre-clo-env loc1668::obj)
    (inline pre-clo-env?::bool ::obj)
    (pre-clo-env-nil::pre-clo-env)
    (inline pre-clo-env-loc::obj ::pre-clo-env)
    (inline pre-clo-env-loc-set! ::pre-clo-env ::obj))))

;; svar/Cinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-svar/Cinfo::svar/Cinfo loc1663::obj approx1664::approx clo-env?1665::bool stamp1666::long)
    (inline svar/Cinfo?::bool ::obj)
    (svar/Cinfo-nil::svar/Cinfo)
    (inline svar/Cinfo-stamp::long ::svar/Cinfo)
    (inline svar/Cinfo-stamp-set! ::svar/Cinfo ::long)
    (inline svar/Cinfo-clo-env?::bool ::svar/Cinfo)
    (inline svar/Cinfo-clo-env?-set! ::svar/Cinfo ::bool)
    (inline svar/Cinfo-approx::approx ::svar/Cinfo)
    (inline svar/Cinfo-loc::obj ::svar/Cinfo)
    (inline svar/Cinfo-loc-set! ::svar/Cinfo ::obj))))

;; cvar/Cinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-cvar/Cinfo::cvar/Cinfo macro?1660::bool approx1661::approx)
    (inline cvar/Cinfo?::bool ::obj)
    (cvar/Cinfo-nil::cvar/Cinfo)
    (inline cvar/Cinfo-approx::approx ::cvar/Cinfo)
    (inline cvar/Cinfo-macro?::bool ::cvar/Cinfo))))

;; sexit/Cinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-sexit/Cinfo::sexit/Cinfo handler1656::obj detached?1657::bool approx1658::approx)
    (inline sexit/Cinfo?::bool ::obj)
    (sexit/Cinfo-nil::sexit/Cinfo)
    (inline sexit/Cinfo-approx::approx ::sexit/Cinfo)
    (inline sexit/Cinfo-detached?::bool ::sexit/Cinfo)
    (inline sexit/Cinfo-detached?-set! ::sexit/Cinfo ::bool)
    (inline sexit/Cinfo-handler::obj ::sexit/Cinfo)
    (inline sexit/Cinfo-handler-set! ::sexit/Cinfo ::obj))))

;; reshaped-local
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-reshaped-local::reshaped-local id1642::symbol name1643::obj type1645::type value1646::value access1647::obj fast-alpha1648::obj removable1649::obj occurrence1650::long occurrencew1651::long user?1652::bool key1653::long binding-value1654::obj)
    (inline reshaped-local?::bool ::obj)
    (reshaped-local-nil::reshaped-local)
    (inline reshaped-local-binding-value::obj ::reshaped-local)
    (inline reshaped-local-key::long ::reshaped-local)
    (inline reshaped-local-user?::bool ::reshaped-local)
    (inline reshaped-local-user?-set! ::reshaped-local ::bool)
    (inline reshaped-local-occurrencew::long ::reshaped-local)
    (inline reshaped-local-occurrencew-set! ::reshaped-local ::long)
    (inline reshaped-local-occurrence::long ::reshaped-local)
    (inline reshaped-local-occurrence-set! ::reshaped-local ::long)
    (inline reshaped-local-removable::obj ::reshaped-local)
    (inline reshaped-local-removable-set! ::reshaped-local ::obj)
    (inline reshaped-local-fast-alpha::obj ::reshaped-local)
    (inline reshaped-local-fast-alpha-set! ::reshaped-local ::obj)
    (inline reshaped-local-access::obj ::reshaped-local)
    (inline reshaped-local-access-set! ::reshaped-local ::obj)
    (inline reshaped-local-value::value ::reshaped-local)
    (inline reshaped-local-value-set! ::reshaped-local ::value)
    (inline reshaped-local-type::type ::reshaped-local)
    (inline reshaped-local-type-set! ::reshaped-local ::type)
    (inline reshaped-local-name::obj ::reshaped-local)
    (inline reshaped-local-name-set! ::reshaped-local ::obj)
    (inline reshaped-local-id::symbol ::reshaped-local))))

;; reshaped-global
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-reshaped-global::reshaped-global id1621::symbol name1622::obj type1623::type value1624::value access1625::obj fast-alpha1626::obj removable1627::obj occurrence1628::long occurrencew1629::long user?1630::bool module1631::symbol import1632::obj evaluable?1633::bool eval?1634::bool library1635::obj pragma1636::obj src1637::obj jvm-type-name1638::bstring init1639::obj alias1640::obj)
    (inline reshaped-global?::bool ::obj)
    (reshaped-global-nil::reshaped-global)
    (inline reshaped-global-alias::obj ::reshaped-global)
    (inline reshaped-global-alias-set! ::reshaped-global ::obj)
    (inline reshaped-global-init::obj ::reshaped-global)
    (inline reshaped-global-init-set! ::reshaped-global ::obj)
    (inline reshaped-global-jvm-type-name::bstring ::reshaped-global)
    (inline reshaped-global-jvm-type-name-set! ::reshaped-global ::bstring)
    (inline reshaped-global-src::obj ::reshaped-global)
    (inline reshaped-global-src-set! ::reshaped-global ::obj)
    (inline reshaped-global-pragma::obj ::reshaped-global)
    (inline reshaped-global-pragma-set! ::reshaped-global ::obj)
    (inline reshaped-global-library::obj ::reshaped-global)
    (inline reshaped-global-library-set! ::reshaped-global ::obj)
    (inline reshaped-global-eval?::bool ::reshaped-global)
    (inline reshaped-global-eval?-set! ::reshaped-global ::bool)
    (inline reshaped-global-evaluable?::bool ::reshaped-global)
    (inline reshaped-global-evaluable?-set! ::reshaped-global ::bool)
    (inline reshaped-global-import::obj ::reshaped-global)
    (inline reshaped-global-import-set! ::reshaped-global ::obj)
    (inline reshaped-global-module::symbol ::reshaped-global)
    (inline reshaped-global-module-set! ::reshaped-global ::symbol)
    (inline reshaped-global-user?::bool ::reshaped-global)
    (inline reshaped-global-user?-set! ::reshaped-global ::bool)
    (inline reshaped-global-occurrencew::long ::reshaped-global)
    (inline reshaped-global-occurrencew-set! ::reshaped-global ::long)
    (inline reshaped-global-occurrence::long ::reshaped-global)
    (inline reshaped-global-occurrence-set! ::reshaped-global ::long)
    (inline reshaped-global-removable::obj ::reshaped-global)
    (inline reshaped-global-removable-set! ::reshaped-global ::obj)
    (inline reshaped-global-fast-alpha::obj ::reshaped-global)
    (inline reshaped-global-fast-alpha-set! ::reshaped-global ::obj)
    (inline reshaped-global-access::obj ::reshaped-global)
    (inline reshaped-global-access-set! ::reshaped-global ::obj)
    (inline reshaped-global-value::value ::reshaped-global)
    (inline reshaped-global-value-set! ::reshaped-global ::value)
    (inline reshaped-global-type::type ::reshaped-global)
    (inline reshaped-global-type-set! ::reshaped-global ::type)
    (inline reshaped-global-name::obj ::reshaped-global)
    (inline reshaped-global-name-set! ::reshaped-global ::obj)
    (inline reshaped-global-id::symbol ::reshaped-global))))

;; atom/Cinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-atom/Cinfo::atom/Cinfo loc1616::obj type1617::type value1618::obj approx1619::approx)
    (inline atom/Cinfo?::bool ::obj)
    (atom/Cinfo-nil::atom/Cinfo)
    (inline atom/Cinfo-approx::approx ::atom/Cinfo)
    (inline atom/Cinfo-value::obj ::atom/Cinfo)
    (inline atom/Cinfo-value-set! ::atom/Cinfo ::obj)
    (inline atom/Cinfo-type::type ::atom/Cinfo)
    (inline atom/Cinfo-type-set! ::atom/Cinfo ::type)
    (inline atom/Cinfo-loc::obj ::atom/Cinfo))))

;; kwote/node
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-kwote/node::kwote/node loc1611::obj type1612::type value1613::obj node1614::node)
    (inline kwote/node?::bool ::obj)
    (kwote/node-nil::kwote/node)
    (inline kwote/node-node::node ::kwote/node)
    (inline kwote/node-value::obj ::kwote/node)
    (inline kwote/node-type::type ::kwote/node)
    (inline kwote/node-type-set! ::kwote/node ::type)
    (inline kwote/node-loc::obj ::kwote/node))))

;; kwote/Cinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-kwote/Cinfo::kwote/Cinfo loc1605::obj type1606::type value1607::obj approx1608::approx)
    (inline kwote/Cinfo?::bool ::obj)
    (kwote/Cinfo-nil::kwote/Cinfo)
    (inline kwote/Cinfo-approx::approx ::kwote/Cinfo)
    (inline kwote/Cinfo-value::obj ::kwote/Cinfo)
    (inline kwote/Cinfo-type::type ::kwote/Cinfo)
    (inline kwote/Cinfo-type-set! ::kwote/Cinfo ::type)
    (inline kwote/Cinfo-loc::obj ::kwote/Cinfo))))

;; app-ly/Cinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-app-ly/Cinfo::app-ly/Cinfo loc1599::obj type1600::type fun1601::node arg1602::node approx1603::approx)
    (inline app-ly/Cinfo?::bool ::obj)
    (app-ly/Cinfo-nil::app-ly/Cinfo)
    (inline app-ly/Cinfo-approx::approx ::app-ly/Cinfo)
    (inline app-ly/Cinfo-arg::node ::app-ly/Cinfo)
    (inline app-ly/Cinfo-arg-set! ::app-ly/Cinfo ::node)
    (inline app-ly/Cinfo-fun::node ::app-ly/Cinfo)
    (inline app-ly/Cinfo-fun-set! ::app-ly/Cinfo ::node)
    (inline app-ly/Cinfo-type::type ::app-ly/Cinfo)
    (inline app-ly/Cinfo-type-set! ::app-ly/Cinfo ::type)
    (inline app-ly/Cinfo-loc::obj ::app-ly/Cinfo))))

;; funcall/Cinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-funcall/Cinfo::funcall/Cinfo loc1587::obj type1588::type fun1589::node args1590::obj strength1591::symbol functions1592::obj approx1593::approx va-approx1594::approx arity-error-noticed?1595::bool type-error-noticed?1596::bool)
    (inline funcall/Cinfo?::bool ::obj)
    (funcall/Cinfo-nil::funcall/Cinfo)
    (inline funcall/Cinfo-type-error-noticed?::bool ::funcall/Cinfo)
    (inline funcall/Cinfo-type-error-noticed?-set! ::funcall/Cinfo ::bool)
    (inline funcall/Cinfo-arity-error-noticed?::bool ::funcall/Cinfo)
    (inline funcall/Cinfo-arity-error-noticed?-set! ::funcall/Cinfo ::bool)
    (inline funcall/Cinfo-va-approx::approx ::funcall/Cinfo)
    (inline funcall/Cinfo-approx::approx ::funcall/Cinfo)
    (inline funcall/Cinfo-functions::obj ::funcall/Cinfo)
    (inline funcall/Cinfo-functions-set! ::funcall/Cinfo ::obj)
    (inline funcall/Cinfo-strength::symbol ::funcall/Cinfo)
    (inline funcall/Cinfo-strength-set! ::funcall/Cinfo ::symbol)
    (inline funcall/Cinfo-args::obj ::funcall/Cinfo)
    (inline funcall/Cinfo-args-set! ::funcall/Cinfo ::obj)
    (inline funcall/Cinfo-fun::node ::funcall/Cinfo)
    (inline funcall/Cinfo-fun-set! ::funcall/Cinfo ::node)
    (inline funcall/Cinfo-type::type ::funcall/Cinfo)
    (inline funcall/Cinfo-type-set! ::funcall/Cinfo ::type)
    (inline funcall/Cinfo-loc::obj ::funcall/Cinfo))))

;; setq/Cinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-setq/Cinfo::setq/Cinfo loc1581::obj type1582::type var1583::var value1584::node approx1585::approx)
    (inline setq/Cinfo?::bool ::obj)
    (setq/Cinfo-nil::setq/Cinfo)
    (inline setq/Cinfo-approx::approx ::setq/Cinfo)
    (inline setq/Cinfo-value::node ::setq/Cinfo)
    (inline setq/Cinfo-value-set! ::setq/Cinfo ::node)
    (inline setq/Cinfo-var::var ::setq/Cinfo)
    (inline setq/Cinfo-var-set! ::setq/Cinfo ::var)
    (inline setq/Cinfo-type::type ::setq/Cinfo)
    (inline setq/Cinfo-type-set! ::setq/Cinfo ::type)
    (inline setq/Cinfo-loc::obj ::setq/Cinfo))))

;; conditional/Cinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-conditional/Cinfo::conditional/Cinfo loc1572::obj type1573::type side-effect1574::obj key1575::obj test1576::node true1577::node false1578::node approx1579::approx)
    (inline conditional/Cinfo?::bool ::obj)
    (conditional/Cinfo-nil::conditional/Cinfo)
    (inline conditional/Cinfo-approx::approx ::conditional/Cinfo)
    (inline conditional/Cinfo-false::node ::conditional/Cinfo)
    (inline conditional/Cinfo-false-set! ::conditional/Cinfo ::node)
    (inline conditional/Cinfo-true::node ::conditional/Cinfo)
    (inline conditional/Cinfo-true-set! ::conditional/Cinfo ::node)
    (inline conditional/Cinfo-test::node ::conditional/Cinfo)
    (inline conditional/Cinfo-test-set! ::conditional/Cinfo ::node)
    (inline conditional/Cinfo-key::obj ::conditional/Cinfo)
    (inline conditional/Cinfo-key-set! ::conditional/Cinfo ::obj)
    (inline conditional/Cinfo-side-effect::obj ::conditional/Cinfo)
    (inline conditional/Cinfo-side-effect-set! ::conditional/Cinfo ::obj)
    (inline conditional/Cinfo-type::type ::conditional/Cinfo)
    (inline conditional/Cinfo-type-set! ::conditional/Cinfo ::type)
    (inline conditional/Cinfo-loc::obj ::conditional/Cinfo))))

;; fail/Cinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-fail/Cinfo::fail/Cinfo loc1565::obj type1566::type proc1567::node msg1568::node obj1569::node approx1570::approx)
    (inline fail/Cinfo?::bool ::obj)
    (fail/Cinfo-nil::fail/Cinfo)
    (inline fail/Cinfo-approx::approx ::fail/Cinfo)
    (inline fail/Cinfo-obj::node ::fail/Cinfo)
    (inline fail/Cinfo-obj-set! ::fail/Cinfo ::node)
    (inline fail/Cinfo-msg::node ::fail/Cinfo)
    (inline fail/Cinfo-msg-set! ::fail/Cinfo ::node)
    (inline fail/Cinfo-proc::node ::fail/Cinfo)
    (inline fail/Cinfo-proc-set! ::fail/Cinfo ::node)
    (inline fail/Cinfo-type::type ::fail/Cinfo)
    (inline fail/Cinfo-type-set! ::fail/Cinfo ::type)
    (inline fail/Cinfo-loc::obj ::fail/Cinfo))))

;; select/Cinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-select/Cinfo::select/Cinfo loc1556::obj type1557::type side-effect1558::obj key1559::obj test1560::node clauses1561::obj item-type1562::type approx1563::approx)
    (inline select/Cinfo?::bool ::obj)
    (select/Cinfo-nil::select/Cinfo)
    (inline select/Cinfo-approx::approx ::select/Cinfo)
    (inline select/Cinfo-item-type::type ::select/Cinfo)
    (inline select/Cinfo-clauses::obj ::select/Cinfo)
    (inline select/Cinfo-test::node ::select/Cinfo)
    (inline select/Cinfo-test-set! ::select/Cinfo ::node)
    (inline select/Cinfo-key::obj ::select/Cinfo)
    (inline select/Cinfo-key-set! ::select/Cinfo ::obj)
    (inline select/Cinfo-side-effect::obj ::select/Cinfo)
    (inline select/Cinfo-side-effect-set! ::select/Cinfo ::obj)
    (inline select/Cinfo-type::type ::select/Cinfo)
    (inline select/Cinfo-type-set! ::select/Cinfo ::type)
    (inline select/Cinfo-loc::obj ::select/Cinfo))))

;; set-ex-it/Cinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-set-ex-it/Cinfo::set-ex-it/Cinfo loc1550::obj type1551::type var1552::var body1553::node approx1554::approx)
    (inline set-ex-it/Cinfo?::bool ::obj)
    (set-ex-it/Cinfo-nil::set-ex-it/Cinfo)
    (inline set-ex-it/Cinfo-approx::approx ::set-ex-it/Cinfo)
    (inline set-ex-it/Cinfo-body::node ::set-ex-it/Cinfo)
    (inline set-ex-it/Cinfo-body-set! ::set-ex-it/Cinfo ::node)
    (inline set-ex-it/Cinfo-var::var ::set-ex-it/Cinfo)
    (inline set-ex-it/Cinfo-var-set! ::set-ex-it/Cinfo ::var)
    (inline set-ex-it/Cinfo-type::type ::set-ex-it/Cinfo)
    (inline set-ex-it/Cinfo-type-set! ::set-ex-it/Cinfo ::type)
    (inline set-ex-it/Cinfo-loc::obj ::set-ex-it/Cinfo))))

;; jump-ex-it/Cinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-jump-ex-it/Cinfo::jump-ex-it/Cinfo loc1544::obj type1545::type exit1546::node value1547::node approx1548::approx)
    (inline jump-ex-it/Cinfo?::bool ::obj)
    (jump-ex-it/Cinfo-nil::jump-ex-it/Cinfo)
    (inline jump-ex-it/Cinfo-approx::approx ::jump-ex-it/Cinfo)
    (inline jump-ex-it/Cinfo-value::node ::jump-ex-it/Cinfo)
    (inline jump-ex-it/Cinfo-value-set! ::jump-ex-it/Cinfo ::node)
    (inline jump-ex-it/Cinfo-exit::node ::jump-ex-it/Cinfo)
    (inline jump-ex-it/Cinfo-exit-set! ::jump-ex-it/Cinfo ::node)
    (inline jump-ex-it/Cinfo-type::type ::jump-ex-it/Cinfo)
    (inline jump-ex-it/Cinfo-type-set! ::jump-ex-it/Cinfo ::type)
    (inline jump-ex-it/Cinfo-loc::obj ::jump-ex-it/Cinfo))))

;; pre-make-box
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-pre-make-box::pre-make-box loc1537::obj type1538::type side-effect1539::obj key1540::obj value1541::node vtype1542::type)
    (inline pre-make-box?::bool ::obj)
    (pre-make-box-nil::pre-make-box)
    (inline pre-make-box-vtype::type ::pre-make-box)
    (inline pre-make-box-vtype-set! ::pre-make-box ::type)
    (inline pre-make-box-value::node ::pre-make-box)
    (inline pre-make-box-value-set! ::pre-make-box ::node)
    (inline pre-make-box-key::obj ::pre-make-box)
    (inline pre-make-box-key-set! ::pre-make-box ::obj)
    (inline pre-make-box-side-effect::obj ::pre-make-box)
    (inline pre-make-box-side-effect-set! ::pre-make-box ::obj)
    (inline pre-make-box-type::type ::pre-make-box)
    (inline pre-make-box-type-set! ::pre-make-box ::type)
    (inline pre-make-box-loc::obj ::pre-make-box))))

;; make-box/Cinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-make-box/Cinfo::make-box/Cinfo loc1528::obj type1529::type side-effect1530::obj key1531::obj value1532::node vtype1533::type approx1535::approx)
    (inline make-box/Cinfo?::bool ::obj)
    (make-box/Cinfo-nil::make-box/Cinfo)
    (inline make-box/Cinfo-approx::approx ::make-box/Cinfo)
    (inline make-box/Cinfo-vtype::type ::make-box/Cinfo)
    (inline make-box/Cinfo-vtype-set! ::make-box/Cinfo ::type)
    (inline make-box/Cinfo-value::node ::make-box/Cinfo)
    (inline make-box/Cinfo-value-set! ::make-box/Cinfo ::node)
    (inline make-box/Cinfo-key::obj ::make-box/Cinfo)
    (inline make-box/Cinfo-key-set! ::make-box/Cinfo ::obj)
    (inline make-box/Cinfo-side-effect::obj ::make-box/Cinfo)
    (inline make-box/Cinfo-side-effect-set! ::make-box/Cinfo ::obj)
    (inline make-box/Cinfo-type::type ::make-box/Cinfo)
    (inline make-box/Cinfo-type-set! ::make-box/Cinfo ::type)
    (inline make-box/Cinfo-loc::obj ::make-box/Cinfo))))

;; make-box/O-Cinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-make-box/O-Cinfo::make-box/O-Cinfo loc1519::obj type1520::type side-effect1521::obj key1522::obj value1523::node vtype1524::type approx1525::approx value-approx1526::approx)
    (inline make-box/O-Cinfo?::bool ::obj)
    (make-box/O-Cinfo-nil::make-box/O-Cinfo)
    (inline make-box/O-Cinfo-value-approx::approx ::make-box/O-Cinfo)
    (inline make-box/O-Cinfo-approx::approx ::make-box/O-Cinfo)
    (inline make-box/O-Cinfo-approx-set! ::make-box/O-Cinfo ::approx)
    (inline make-box/O-Cinfo-vtype::type ::make-box/O-Cinfo)
    (inline make-box/O-Cinfo-vtype-set! ::make-box/O-Cinfo ::type)
    (inline make-box/O-Cinfo-value::node ::make-box/O-Cinfo)
    (inline make-box/O-Cinfo-value-set! ::make-box/O-Cinfo ::node)
    (inline make-box/O-Cinfo-key::obj ::make-box/O-Cinfo)
    (inline make-box/O-Cinfo-key-set! ::make-box/O-Cinfo ::obj)
    (inline make-box/O-Cinfo-side-effect::obj ::make-box/O-Cinfo)
    (inline make-box/O-Cinfo-side-effect-set! ::make-box/O-Cinfo ::obj)
    (inline make-box/O-Cinfo-type::type ::make-box/O-Cinfo)
    (inline make-box/O-Cinfo-type-set! ::make-box/O-Cinfo ::type)
    (inline make-box/O-Cinfo-loc::obj ::make-box/O-Cinfo))))

;; box-set!/Cinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-box-set!/Cinfo::box-set!/Cinfo loc1511::obj type1512::type var1513::var value1514::node vtype1516::type approx1517::approx)
    (inline box-set!/Cinfo?::bool ::obj)
    (box-set!/Cinfo-nil::box-set!/Cinfo)
    (inline box-set!/Cinfo-approx::approx ::box-set!/Cinfo)
    (inline box-set!/Cinfo-vtype::type ::box-set!/Cinfo)
    (inline box-set!/Cinfo-vtype-set! ::box-set!/Cinfo ::type)
    (inline box-set!/Cinfo-value::node ::box-set!/Cinfo)
    (inline box-set!/Cinfo-value-set! ::box-set!/Cinfo ::node)
    (inline box-set!/Cinfo-var::var ::box-set!/Cinfo)
    (inline box-set!/Cinfo-var-set! ::box-set!/Cinfo ::var)
    (inline box-set!/Cinfo-type::type ::box-set!/Cinfo)
    (inline box-set!/Cinfo-type-set! ::box-set!/Cinfo ::type)
    (inline box-set!/Cinfo-loc::obj ::box-set!/Cinfo))))

;; box-ref/Cinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-box-ref/Cinfo::box-ref/Cinfo loc1503::obj type1504::type side-effect1505::obj key1506::obj var1507::var vtype1508::type approx1509::approx)
    (inline box-ref/Cinfo?::bool ::obj)
    (box-ref/Cinfo-nil::box-ref/Cinfo)
    (inline box-ref/Cinfo-approx::approx ::box-ref/Cinfo)
    (inline box-ref/Cinfo-vtype::type ::box-ref/Cinfo)
    (inline box-ref/Cinfo-vtype-set! ::box-ref/Cinfo ::type)
    (inline box-ref/Cinfo-var::var ::box-ref/Cinfo)
    (inline box-ref/Cinfo-var-set! ::box-ref/Cinfo ::var)
    (inline box-ref/Cinfo-key::obj ::box-ref/Cinfo)
    (inline box-ref/Cinfo-key-set! ::box-ref/Cinfo ::obj)
    (inline box-ref/Cinfo-side-effect::obj ::box-ref/Cinfo)
    (inline box-ref/Cinfo-side-effect-set! ::box-ref/Cinfo ::obj)
    (inline box-ref/Cinfo-type::type ::box-ref/Cinfo)
    (inline box-ref/Cinfo-type-set! ::box-ref/Cinfo ::type)
    (inline box-ref/Cinfo-loc::obj ::box-ref/Cinfo))))

;; box-set!/O-Cinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-box-set!/O-Cinfo::box-set!/O-Cinfo loc1496::obj type1497::type var1498::var value1499::node vtype1500::type approx1501::approx)
    (inline box-set!/O-Cinfo?::bool ::obj)
    (box-set!/O-Cinfo-nil::box-set!/O-Cinfo)
    (inline box-set!/O-Cinfo-approx::approx ::box-set!/O-Cinfo)
    (inline box-set!/O-Cinfo-vtype::type ::box-set!/O-Cinfo)
    (inline box-set!/O-Cinfo-vtype-set! ::box-set!/O-Cinfo ::type)
    (inline box-set!/O-Cinfo-value::node ::box-set!/O-Cinfo)
    (inline box-set!/O-Cinfo-value-set! ::box-set!/O-Cinfo ::node)
    (inline box-set!/O-Cinfo-var::var ::box-set!/O-Cinfo)
    (inline box-set!/O-Cinfo-var-set! ::box-set!/O-Cinfo ::var)
    (inline box-set!/O-Cinfo-type::type ::box-set!/O-Cinfo)
    (inline box-set!/O-Cinfo-type-set! ::box-set!/O-Cinfo ::type)
    (inline box-set!/O-Cinfo-loc::obj ::box-set!/O-Cinfo))))

;; box-ref/O-Cinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-box-ref/O-Cinfo::box-ref/O-Cinfo loc1486::obj type1487::type side-effect1488::obj key1489::obj var1491::var vtype1493::type approx1494::approx)
    (inline box-ref/O-Cinfo?::bool ::obj)
    (box-ref/O-Cinfo-nil::box-ref/O-Cinfo)
    (inline box-ref/O-Cinfo-approx::approx ::box-ref/O-Cinfo)
    (inline box-ref/O-Cinfo-vtype::type ::box-ref/O-Cinfo)
    (inline box-ref/O-Cinfo-vtype-set! ::box-ref/O-Cinfo ::type)
    (inline box-ref/O-Cinfo-var::var ::box-ref/O-Cinfo)
    (inline box-ref/O-Cinfo-var-set! ::box-ref/O-Cinfo ::var)
    (inline box-ref/O-Cinfo-key::obj ::box-ref/O-Cinfo)
    (inline box-ref/O-Cinfo-key-set! ::box-ref/O-Cinfo ::obj)
    (inline box-ref/O-Cinfo-side-effect::obj ::box-ref/O-Cinfo)
    (inline box-ref/O-Cinfo-side-effect-set! ::box-ref/O-Cinfo ::obj)
    (inline box-ref/O-Cinfo-type::type ::box-ref/O-Cinfo)
    (inline box-ref/O-Cinfo-type-set! ::box-ref/O-Cinfo ::type)
    (inline box-ref/O-Cinfo-loc::obj ::box-ref/O-Cinfo)))))

;; The definitions
(cond-expand (bigloo-class-sans
;; approx
(define-inline (make-approx::approx type1735::type type-locked?1736::bool allocs1737::obj top?1738::bool lost-stamp1739::long dup1740::obj) (instantiate::approx (type type1735) (type-locked? type-locked?1736) (allocs allocs1737) (top? top?1738) (lost-stamp lost-stamp1739) (dup dup1740)))
(define-inline (approx?::bool obj::obj) ((@ isa? __object) obj (@ approx cfa_info)))
(define (approx-nil::approx) (class-nil (@ approx cfa_info)))
(define-inline (approx-dup::obj o::approx) (with-access::approx o (dup) dup))
(define-inline (approx-dup-set! o::approx v::obj) (with-access::approx o (dup) (set! dup v)))
(define-inline (approx-lost-stamp::long o::approx) (with-access::approx o (lost-stamp) lost-stamp))
(define-inline (approx-lost-stamp-set! o::approx v::long) (with-access::approx o (lost-stamp) (set! lost-stamp v)))
(define-inline (approx-top?::bool o::approx) (with-access::approx o (top?) top?))
(define-inline (approx-top?-set! o::approx v::bool) (with-access::approx o (top?) (set! top? v)))
(define-inline (approx-allocs::obj o::approx) (with-access::approx o (allocs) allocs))
(define-inline (approx-allocs-set! o::approx v::obj) (with-access::approx o (allocs) (set! allocs v)))
(define-inline (approx-type-locked?::bool o::approx) (with-access::approx o (type-locked?) type-locked?))
(define-inline (approx-type-locked?-set! o::approx v::bool) (with-access::approx o (type-locked?) (set! type-locked? v)))
(define-inline (approx-type::type o::approx) (with-access::approx o (type) type))
(define-inline (approx-type-set! o::approx v::type) (with-access::approx o (type) (set! type v)))

;; cfun/Cinfo
(define-inline (make-cfun/Cinfo::cfun/Cinfo arity1720::long side-effect1721::obj predicate-of1722::obj stack-allocator1723::obj top?1725::bool the-closure1726::obj effect1727::obj failsafe1728::obj args-type1729::obj macro?1730::bool infix?1731::bool method1732::pair-nil approx1733::approx) (instantiate::cfun/Cinfo (arity arity1720) (side-effect side-effect1721) (predicate-of predicate-of1722) (stack-allocator stack-allocator1723) (top? top?1725) (the-closure the-closure1726) (effect effect1727) (failsafe failsafe1728) (args-type args-type1729) (macro? macro?1730) (infix? infix?1731) (method method1732) (approx approx1733)))
(define-inline (cfun/Cinfo?::bool obj::obj) ((@ isa? __object) obj (@ cfun/Cinfo cfa_info)))
(define (cfun/Cinfo-nil::cfun/Cinfo) (class-nil (@ cfun/Cinfo cfa_info)))
(define-inline (cfun/Cinfo-approx::approx o::cfun/Cinfo) (with-access::cfun/Cinfo o (approx) approx))
(define-inline (cfun/Cinfo-approx-set! o::cfun/Cinfo v::approx) (with-access::cfun/Cinfo o (approx) (set! approx v)))
(define-inline (cfun/Cinfo-method::pair-nil o::cfun/Cinfo) (with-access::cfun/Cinfo o (method) method))
(define-inline (cfun/Cinfo-method-set! o::cfun/Cinfo v::pair-nil) (with-access::cfun/Cinfo o (method) (set! method v)))
(define-inline (cfun/Cinfo-infix?::bool o::cfun/Cinfo) (with-access::cfun/Cinfo o (infix?) infix?))
(define-inline (cfun/Cinfo-infix?-set! o::cfun/Cinfo v::bool) (with-access::cfun/Cinfo o (infix?) (set! infix? v)))
(define-inline (cfun/Cinfo-macro?::bool o::cfun/Cinfo) (with-access::cfun/Cinfo o (macro?) macro?))
(define-inline (cfun/Cinfo-macro?-set! o::cfun/Cinfo v::bool) (with-access::cfun/Cinfo o (macro?) (set! macro? v)))
(define-inline (cfun/Cinfo-args-type::obj o::cfun/Cinfo) (with-access::cfun/Cinfo o (args-type) args-type))
(define-inline (cfun/Cinfo-args-type-set! o::cfun/Cinfo v::obj) (with-access::cfun/Cinfo o (args-type) (set! args-type v)))
(define-inline (cfun/Cinfo-failsafe::obj o::cfun/Cinfo) (with-access::cfun/Cinfo o (failsafe) failsafe))
(define-inline (cfun/Cinfo-failsafe-set! o::cfun/Cinfo v::obj) (with-access::cfun/Cinfo o (failsafe) (set! failsafe v)))
(define-inline (cfun/Cinfo-effect::obj o::cfun/Cinfo) (with-access::cfun/Cinfo o (effect) effect))
(define-inline (cfun/Cinfo-effect-set! o::cfun/Cinfo v::obj) (with-access::cfun/Cinfo o (effect) (set! effect v)))
(define-inline (cfun/Cinfo-the-closure::obj o::cfun/Cinfo) (with-access::cfun/Cinfo o (the-closure) the-closure))
(define-inline (cfun/Cinfo-the-closure-set! o::cfun/Cinfo v::obj) (with-access::cfun/Cinfo o (the-closure) (set! the-closure v)))
(define-inline (cfun/Cinfo-top?::bool o::cfun/Cinfo) (with-access::cfun/Cinfo o (top?) top?))
(define-inline (cfun/Cinfo-top?-set! o::cfun/Cinfo v::bool) (with-access::cfun/Cinfo o (top?) (set! top? v)))
(define-inline (cfun/Cinfo-stack-allocator::obj o::cfun/Cinfo) (with-access::cfun/Cinfo o (stack-allocator) stack-allocator))
(define-inline (cfun/Cinfo-stack-allocator-set! o::cfun/Cinfo v::obj) (with-access::cfun/Cinfo o (stack-allocator) (set! stack-allocator v)))
(define-inline (cfun/Cinfo-predicate-of::obj o::cfun/Cinfo) (with-access::cfun/Cinfo o (predicate-of) predicate-of))
(define-inline (cfun/Cinfo-predicate-of-set! o::cfun/Cinfo v::obj) (with-access::cfun/Cinfo o (predicate-of) (set! predicate-of v)))
(define-inline (cfun/Cinfo-side-effect::obj o::cfun/Cinfo) (with-access::cfun/Cinfo o (side-effect) side-effect))
(define-inline (cfun/Cinfo-side-effect-set! o::cfun/Cinfo v::obj) (with-access::cfun/Cinfo o (side-effect) (set! side-effect v)))
(define-inline (cfun/Cinfo-arity::long o::cfun/Cinfo) (with-access::cfun/Cinfo o (arity) arity))
(define-inline (cfun/Cinfo-arity-set! o::cfun/Cinfo v::long) (with-access::cfun/Cinfo o (arity) (set! arity v)))

;; extern-sfun/Cinfo
(define-inline (make-extern-sfun/Cinfo::extern-sfun/Cinfo arity1698::long side-effect1699::obj predicate-of1700::obj stack-allocator1701::obj top?1702::bool the-closure1703::obj effect1704::obj failsafe1705::obj property1706::obj args1707::obj args-name1708::obj body1709::obj class1710::obj dsssl-keywords1711::obj loc1712::obj optionals1713::obj keys1714::obj the-closure-global1715::obj strength1716::symbol polymorphic?1717::bool approx1718::approx) (instantiate::extern-sfun/Cinfo (arity arity1698) (side-effect side-effect1699) (predicate-of predicate-of1700) (stack-allocator stack-allocator1701) (top? top?1702) (the-closure the-closure1703) (effect effect1704) (failsafe failsafe1705) (property property1706) (args args1707) (args-name args-name1708) (body body1709) (class class1710) (dsssl-keywords dsssl-keywords1711) (loc loc1712) (optionals optionals1713) (keys keys1714) (the-closure-global the-closure-global1715) (strength strength1716) (polymorphic? polymorphic?1717) (approx approx1718)))
(define-inline (extern-sfun/Cinfo?::bool obj::obj) ((@ isa? __object) obj (@ extern-sfun/Cinfo cfa_info)))
(define (extern-sfun/Cinfo-nil::extern-sfun/Cinfo) (class-nil (@ extern-sfun/Cinfo cfa_info)))
(define-inline (extern-sfun/Cinfo-approx::approx o::extern-sfun/Cinfo) (with-access::extern-sfun/Cinfo o (approx) approx))
(define-inline (extern-sfun/Cinfo-approx-set! o::extern-sfun/Cinfo v::approx) (with-access::extern-sfun/Cinfo o (approx) (set! approx v)))
(define-inline (extern-sfun/Cinfo-polymorphic?::bool o::extern-sfun/Cinfo) (with-access::extern-sfun/Cinfo o (polymorphic?) polymorphic?))
(define-inline (extern-sfun/Cinfo-polymorphic?-set! o::extern-sfun/Cinfo v::bool) (with-access::extern-sfun/Cinfo o (polymorphic?) (set! polymorphic? v)))
(define-inline (extern-sfun/Cinfo-strength::symbol o::extern-sfun/Cinfo) (with-access::extern-sfun/Cinfo o (strength) strength))
(define-inline (extern-sfun/Cinfo-strength-set! o::extern-sfun/Cinfo v::symbol) (with-access::extern-sfun/Cinfo o (strength) (set! strength v)))
(define-inline (extern-sfun/Cinfo-the-closure-global::obj o::extern-sfun/Cinfo) (with-access::extern-sfun/Cinfo o (the-closure-global) the-closure-global))
(define-inline (extern-sfun/Cinfo-the-closure-global-set! o::extern-sfun/Cinfo v::obj) (with-access::extern-sfun/Cinfo o (the-closure-global) (set! the-closure-global v)))
(define-inline (extern-sfun/Cinfo-keys::obj o::extern-sfun/Cinfo) (with-access::extern-sfun/Cinfo o (keys) keys))
(define-inline (extern-sfun/Cinfo-keys-set! o::extern-sfun/Cinfo v::obj) (with-access::extern-sfun/Cinfo o (keys) (set! keys v)))
(define-inline (extern-sfun/Cinfo-optionals::obj o::extern-sfun/Cinfo) (with-access::extern-sfun/Cinfo o (optionals) optionals))
(define-inline (extern-sfun/Cinfo-optionals-set! o::extern-sfun/Cinfo v::obj) (with-access::extern-sfun/Cinfo o (optionals) (set! optionals v)))
(define-inline (extern-sfun/Cinfo-loc::obj o::extern-sfun/Cinfo) (with-access::extern-sfun/Cinfo o (loc) loc))
(define-inline (extern-sfun/Cinfo-loc-set! o::extern-sfun/Cinfo v::obj) (with-access::extern-sfun/Cinfo o (loc) (set! loc v)))
(define-inline (extern-sfun/Cinfo-dsssl-keywords::obj o::extern-sfun/Cinfo) (with-access::extern-sfun/Cinfo o (dsssl-keywords) dsssl-keywords))
(define-inline (extern-sfun/Cinfo-dsssl-keywords-set! o::extern-sfun/Cinfo v::obj) (with-access::extern-sfun/Cinfo o (dsssl-keywords) (set! dsssl-keywords v)))
(define-inline (extern-sfun/Cinfo-class::obj o::extern-sfun/Cinfo) (with-access::extern-sfun/Cinfo o (class) class))
(define-inline (extern-sfun/Cinfo-class-set! o::extern-sfun/Cinfo v::obj) (with-access::extern-sfun/Cinfo o (class) (set! class v)))
(define-inline (extern-sfun/Cinfo-body::obj o::extern-sfun/Cinfo) (with-access::extern-sfun/Cinfo o (body) body))
(define-inline (extern-sfun/Cinfo-body-set! o::extern-sfun/Cinfo v::obj) (with-access::extern-sfun/Cinfo o (body) (set! body v)))
(define-inline (extern-sfun/Cinfo-args-name::obj o::extern-sfun/Cinfo) (with-access::extern-sfun/Cinfo o (args-name) args-name))
(define-inline (extern-sfun/Cinfo-args-name-set! o::extern-sfun/Cinfo v::obj) (with-access::extern-sfun/Cinfo o (args-name) (set! args-name v)))
(define-inline (extern-sfun/Cinfo-args::obj o::extern-sfun/Cinfo) (with-access::extern-sfun/Cinfo o (args) args))
(define-inline (extern-sfun/Cinfo-args-set! o::extern-sfun/Cinfo v::obj) (with-access::extern-sfun/Cinfo o (args) (set! args v)))
(define-inline (extern-sfun/Cinfo-property::obj o::extern-sfun/Cinfo) (with-access::extern-sfun/Cinfo o (property) property))
(define-inline (extern-sfun/Cinfo-property-set! o::extern-sfun/Cinfo v::obj) (with-access::extern-sfun/Cinfo o (property) (set! property v)))
(define-inline (extern-sfun/Cinfo-failsafe::obj o::extern-sfun/Cinfo) (with-access::extern-sfun/Cinfo o (failsafe) failsafe))
(define-inline (extern-sfun/Cinfo-failsafe-set! o::extern-sfun/Cinfo v::obj) (with-access::extern-sfun/Cinfo o (failsafe) (set! failsafe v)))
(define-inline (extern-sfun/Cinfo-effect::obj o::extern-sfun/Cinfo) (with-access::extern-sfun/Cinfo o (effect) effect))
(define-inline (extern-sfun/Cinfo-effect-set! o::extern-sfun/Cinfo v::obj) (with-access::extern-sfun/Cinfo o (effect) (set! effect v)))
(define-inline (extern-sfun/Cinfo-the-closure::obj o::extern-sfun/Cinfo) (with-access::extern-sfun/Cinfo o (the-closure) the-closure))
(define-inline (extern-sfun/Cinfo-the-closure-set! o::extern-sfun/Cinfo v::obj) (with-access::extern-sfun/Cinfo o (the-closure) (set! the-closure v)))
(define-inline (extern-sfun/Cinfo-top?::bool o::extern-sfun/Cinfo) (with-access::extern-sfun/Cinfo o (top?) top?))
(define-inline (extern-sfun/Cinfo-top?-set! o::extern-sfun/Cinfo v::bool) (with-access::extern-sfun/Cinfo o (top?) (set! top? v)))
(define-inline (extern-sfun/Cinfo-stack-allocator::obj o::extern-sfun/Cinfo) (with-access::extern-sfun/Cinfo o (stack-allocator) stack-allocator))
(define-inline (extern-sfun/Cinfo-stack-allocator-set! o::extern-sfun/Cinfo v::obj) (with-access::extern-sfun/Cinfo o (stack-allocator) (set! stack-allocator v)))
(define-inline (extern-sfun/Cinfo-predicate-of::obj o::extern-sfun/Cinfo) (with-access::extern-sfun/Cinfo o (predicate-of) predicate-of))
(define-inline (extern-sfun/Cinfo-predicate-of-set! o::extern-sfun/Cinfo v::obj) (with-access::extern-sfun/Cinfo o (predicate-of) (set! predicate-of v)))
(define-inline (extern-sfun/Cinfo-side-effect::obj o::extern-sfun/Cinfo) (with-access::extern-sfun/Cinfo o (side-effect) side-effect))
(define-inline (extern-sfun/Cinfo-side-effect-set! o::extern-sfun/Cinfo v::obj) (with-access::extern-sfun/Cinfo o (side-effect) (set! side-effect v)))
(define-inline (extern-sfun/Cinfo-arity::long o::extern-sfun/Cinfo) (with-access::extern-sfun/Cinfo o (arity) arity))
(define-inline (extern-sfun/Cinfo-arity-set! o::extern-sfun/Cinfo v::long) (with-access::extern-sfun/Cinfo o (arity) (set! arity v)))

;; intern-sfun/Cinfo
(define-inline (make-intern-sfun/Cinfo::intern-sfun/Cinfo arity1675::long side-effect1676::obj predicate-of1677::obj stack-allocator1678::obj top?1679::bool the-closure1680::obj effect1681::obj failsafe1682::obj property1683::obj args1684::obj args-name1685::obj body1686::obj class1687::obj dsssl-keywords1688::obj loc1689::obj optionals1690::obj keys1691::obj the-closure-global1692::obj strength1693::symbol polymorphic?1694::bool approx1695::approx stamp1696::long) (instantiate::intern-sfun/Cinfo (arity arity1675) (side-effect side-effect1676) (predicate-of predicate-of1677) (stack-allocator stack-allocator1678) (top? top?1679) (the-closure the-closure1680) (effect effect1681) (failsafe failsafe1682) (property property1683) (args args1684) (args-name args-name1685) (body body1686) (class class1687) (dsssl-keywords dsssl-keywords1688) (loc loc1689) (optionals optionals1690) (keys keys1691) (the-closure-global the-closure-global1692) (strength strength1693) (polymorphic? polymorphic?1694) (approx approx1695) (stamp stamp1696)))
(define-inline (intern-sfun/Cinfo?::bool obj::obj) ((@ isa? __object) obj (@ intern-sfun/Cinfo cfa_info)))
(define (intern-sfun/Cinfo-nil::intern-sfun/Cinfo) (class-nil (@ intern-sfun/Cinfo cfa_info)))
(define-inline (intern-sfun/Cinfo-stamp::long o::intern-sfun/Cinfo) (with-access::intern-sfun/Cinfo o (stamp) stamp))
(define-inline (intern-sfun/Cinfo-stamp-set! o::intern-sfun/Cinfo v::long) (with-access::intern-sfun/Cinfo o (stamp) (set! stamp v)))
(define-inline (intern-sfun/Cinfo-approx::approx o::intern-sfun/Cinfo) (with-access::intern-sfun/Cinfo o (approx) approx))
(define-inline (intern-sfun/Cinfo-approx-set! o::intern-sfun/Cinfo v::approx) (with-access::intern-sfun/Cinfo o (approx) (set! approx v)))
(define-inline (intern-sfun/Cinfo-polymorphic?::bool o::intern-sfun/Cinfo) (with-access::intern-sfun/Cinfo o (polymorphic?) polymorphic?))
(define-inline (intern-sfun/Cinfo-polymorphic?-set! o::intern-sfun/Cinfo v::bool) (with-access::intern-sfun/Cinfo o (polymorphic?) (set! polymorphic? v)))
(define-inline (intern-sfun/Cinfo-strength::symbol o::intern-sfun/Cinfo) (with-access::intern-sfun/Cinfo o (strength) strength))
(define-inline (intern-sfun/Cinfo-strength-set! o::intern-sfun/Cinfo v::symbol) (with-access::intern-sfun/Cinfo o (strength) (set! strength v)))
(define-inline (intern-sfun/Cinfo-the-closure-global::obj o::intern-sfun/Cinfo) (with-access::intern-sfun/Cinfo o (the-closure-global) the-closure-global))
(define-inline (intern-sfun/Cinfo-the-closure-global-set! o::intern-sfun/Cinfo v::obj) (with-access::intern-sfun/Cinfo o (the-closure-global) (set! the-closure-global v)))
(define-inline (intern-sfun/Cinfo-keys::obj o::intern-sfun/Cinfo) (with-access::intern-sfun/Cinfo o (keys) keys))
(define-inline (intern-sfun/Cinfo-keys-set! o::intern-sfun/Cinfo v::obj) (with-access::intern-sfun/Cinfo o (keys) (set! keys v)))
(define-inline (intern-sfun/Cinfo-optionals::obj o::intern-sfun/Cinfo) (with-access::intern-sfun/Cinfo o (optionals) optionals))
(define-inline (intern-sfun/Cinfo-optionals-set! o::intern-sfun/Cinfo v::obj) (with-access::intern-sfun/Cinfo o (optionals) (set! optionals v)))
(define-inline (intern-sfun/Cinfo-loc::obj o::intern-sfun/Cinfo) (with-access::intern-sfun/Cinfo o (loc) loc))
(define-inline (intern-sfun/Cinfo-loc-set! o::intern-sfun/Cinfo v::obj) (with-access::intern-sfun/Cinfo o (loc) (set! loc v)))
(define-inline (intern-sfun/Cinfo-dsssl-keywords::obj o::intern-sfun/Cinfo) (with-access::intern-sfun/Cinfo o (dsssl-keywords) dsssl-keywords))
(define-inline (intern-sfun/Cinfo-dsssl-keywords-set! o::intern-sfun/Cinfo v::obj) (with-access::intern-sfun/Cinfo o (dsssl-keywords) (set! dsssl-keywords v)))
(define-inline (intern-sfun/Cinfo-class::obj o::intern-sfun/Cinfo) (with-access::intern-sfun/Cinfo o (class) class))
(define-inline (intern-sfun/Cinfo-class-set! o::intern-sfun/Cinfo v::obj) (with-access::intern-sfun/Cinfo o (class) (set! class v)))
(define-inline (intern-sfun/Cinfo-body::obj o::intern-sfun/Cinfo) (with-access::intern-sfun/Cinfo o (body) body))
(define-inline (intern-sfun/Cinfo-body-set! o::intern-sfun/Cinfo v::obj) (with-access::intern-sfun/Cinfo o (body) (set! body v)))
(define-inline (intern-sfun/Cinfo-args-name::obj o::intern-sfun/Cinfo) (with-access::intern-sfun/Cinfo o (args-name) args-name))
(define-inline (intern-sfun/Cinfo-args-name-set! o::intern-sfun/Cinfo v::obj) (with-access::intern-sfun/Cinfo o (args-name) (set! args-name v)))
(define-inline (intern-sfun/Cinfo-args::obj o::intern-sfun/Cinfo) (with-access::intern-sfun/Cinfo o (args) args))
(define-inline (intern-sfun/Cinfo-args-set! o::intern-sfun/Cinfo v::obj) (with-access::intern-sfun/Cinfo o (args) (set! args v)))
(define-inline (intern-sfun/Cinfo-property::obj o::intern-sfun/Cinfo) (with-access::intern-sfun/Cinfo o (property) property))
(define-inline (intern-sfun/Cinfo-property-set! o::intern-sfun/Cinfo v::obj) (with-access::intern-sfun/Cinfo o (property) (set! property v)))
(define-inline (intern-sfun/Cinfo-failsafe::obj o::intern-sfun/Cinfo) (with-access::intern-sfun/Cinfo o (failsafe) failsafe))
(define-inline (intern-sfun/Cinfo-failsafe-set! o::intern-sfun/Cinfo v::obj) (with-access::intern-sfun/Cinfo o (failsafe) (set! failsafe v)))
(define-inline (intern-sfun/Cinfo-effect::obj o::intern-sfun/Cinfo) (with-access::intern-sfun/Cinfo o (effect) effect))
(define-inline (intern-sfun/Cinfo-effect-set! o::intern-sfun/Cinfo v::obj) (with-access::intern-sfun/Cinfo o (effect) (set! effect v)))
(define-inline (intern-sfun/Cinfo-the-closure::obj o::intern-sfun/Cinfo) (with-access::intern-sfun/Cinfo o (the-closure) the-closure))
(define-inline (intern-sfun/Cinfo-the-closure-set! o::intern-sfun/Cinfo v::obj) (with-access::intern-sfun/Cinfo o (the-closure) (set! the-closure v)))
(define-inline (intern-sfun/Cinfo-top?::bool o::intern-sfun/Cinfo) (with-access::intern-sfun/Cinfo o (top?) top?))
(define-inline (intern-sfun/Cinfo-top?-set! o::intern-sfun/Cinfo v::bool) (with-access::intern-sfun/Cinfo o (top?) (set! top? v)))
(define-inline (intern-sfun/Cinfo-stack-allocator::obj o::intern-sfun/Cinfo) (with-access::intern-sfun/Cinfo o (stack-allocator) stack-allocator))
(define-inline (intern-sfun/Cinfo-stack-allocator-set! o::intern-sfun/Cinfo v::obj) (with-access::intern-sfun/Cinfo o (stack-allocator) (set! stack-allocator v)))
(define-inline (intern-sfun/Cinfo-predicate-of::obj o::intern-sfun/Cinfo) (with-access::intern-sfun/Cinfo o (predicate-of) predicate-of))
(define-inline (intern-sfun/Cinfo-predicate-of-set! o::intern-sfun/Cinfo v::obj) (with-access::intern-sfun/Cinfo o (predicate-of) (set! predicate-of v)))
(define-inline (intern-sfun/Cinfo-side-effect::obj o::intern-sfun/Cinfo) (with-access::intern-sfun/Cinfo o (side-effect) side-effect))
(define-inline (intern-sfun/Cinfo-side-effect-set! o::intern-sfun/Cinfo v::obj) (with-access::intern-sfun/Cinfo o (side-effect) (set! side-effect v)))
(define-inline (intern-sfun/Cinfo-arity::long o::intern-sfun/Cinfo) (with-access::intern-sfun/Cinfo o (arity) arity))
(define-inline (intern-sfun/Cinfo-arity-set! o::intern-sfun/Cinfo v::long) (with-access::intern-sfun/Cinfo o (arity) (set! arity v)))

;; scnst/Cinfo
(define-inline (make-scnst/Cinfo::scnst/Cinfo node1670::obj class1671::obj loc1672::obj approx1673::approx) (instantiate::scnst/Cinfo (node node1670) (class class1671) (loc loc1672) (approx approx1673)))
(define-inline (scnst/Cinfo?::bool obj::obj) ((@ isa? __object) obj (@ scnst/Cinfo cfa_info)))
(define (scnst/Cinfo-nil::scnst/Cinfo) (class-nil (@ scnst/Cinfo cfa_info)))
(define-inline (scnst/Cinfo-approx::approx o::scnst/Cinfo) (with-access::scnst/Cinfo o (approx) approx))
(define-inline (scnst/Cinfo-approx-set! o::scnst/Cinfo v::approx) (with-access::scnst/Cinfo o (approx) (set! approx v)))
(define-inline (scnst/Cinfo-loc::obj o::scnst/Cinfo) (with-access::scnst/Cinfo o (loc) loc))
(define-inline (scnst/Cinfo-loc-set! o::scnst/Cinfo v::obj) (with-access::scnst/Cinfo o (loc) (set! loc v)))
(define-inline (scnst/Cinfo-class::obj o::scnst/Cinfo) (with-access::scnst/Cinfo o (class) class))
(define-inline (scnst/Cinfo-class-set! o::scnst/Cinfo v::obj) (with-access::scnst/Cinfo o (class) (set! class v)))
(define-inline (scnst/Cinfo-node::obj o::scnst/Cinfo) (with-access::scnst/Cinfo o (node) node))
(define-inline (scnst/Cinfo-node-set! o::scnst/Cinfo v::obj) (with-access::scnst/Cinfo o (node) (set! node v)))

;; pre-clo-env
(define-inline (make-pre-clo-env::pre-clo-env loc1668::obj) (instantiate::pre-clo-env (loc loc1668)))
(define-inline (pre-clo-env?::bool obj::obj) ((@ isa? __object) obj (@ pre-clo-env cfa_info)))
(define (pre-clo-env-nil::pre-clo-env) (class-nil (@ pre-clo-env cfa_info)))
(define-inline (pre-clo-env-loc::obj o::pre-clo-env) (with-access::pre-clo-env o (loc) loc))
(define-inline (pre-clo-env-loc-set! o::pre-clo-env v::obj) (with-access::pre-clo-env o (loc) (set! loc v)))

;; svar/Cinfo
(define-inline (make-svar/Cinfo::svar/Cinfo loc1663::obj approx1664::approx clo-env?1665::bool stamp1666::long) (instantiate::svar/Cinfo (loc loc1663) (approx approx1664) (clo-env? clo-env?1665) (stamp stamp1666)))
(define-inline (svar/Cinfo?::bool obj::obj) ((@ isa? __object) obj (@ svar/Cinfo cfa_info)))
(define (svar/Cinfo-nil::svar/Cinfo) (class-nil (@ svar/Cinfo cfa_info)))
(define-inline (svar/Cinfo-stamp::long o::svar/Cinfo) (with-access::svar/Cinfo o (stamp) stamp))
(define-inline (svar/Cinfo-stamp-set! o::svar/Cinfo v::long) (with-access::svar/Cinfo o (stamp) (set! stamp v)))
(define-inline (svar/Cinfo-clo-env?::bool o::svar/Cinfo) (with-access::svar/Cinfo o (clo-env?) clo-env?))
(define-inline (svar/Cinfo-clo-env?-set! o::svar/Cinfo v::bool) (with-access::svar/Cinfo o (clo-env?) (set! clo-env? v)))
(define-inline (svar/Cinfo-approx::approx o::svar/Cinfo) (with-access::svar/Cinfo o (approx) approx))
(define-inline (svar/Cinfo-approx-set! o::svar/Cinfo v::approx) (with-access::svar/Cinfo o (approx) (set! approx v)))
(define-inline (svar/Cinfo-loc::obj o::svar/Cinfo) (with-access::svar/Cinfo o (loc) loc))
(define-inline (svar/Cinfo-loc-set! o::svar/Cinfo v::obj) (with-access::svar/Cinfo o (loc) (set! loc v)))

;; cvar/Cinfo
(define-inline (make-cvar/Cinfo::cvar/Cinfo macro?1660::bool approx1661::approx) (instantiate::cvar/Cinfo (macro? macro?1660) (approx approx1661)))
(define-inline (cvar/Cinfo?::bool obj::obj) ((@ isa? __object) obj (@ cvar/Cinfo cfa_info)))
(define (cvar/Cinfo-nil::cvar/Cinfo) (class-nil (@ cvar/Cinfo cfa_info)))
(define-inline (cvar/Cinfo-approx::approx o::cvar/Cinfo) (with-access::cvar/Cinfo o (approx) approx))
(define-inline (cvar/Cinfo-approx-set! o::cvar/Cinfo v::approx) (with-access::cvar/Cinfo o (approx) (set! approx v)))
(define-inline (cvar/Cinfo-macro?::bool o::cvar/Cinfo) (with-access::cvar/Cinfo o (macro?) macro?))
(define-inline (cvar/Cinfo-macro?-set! o::cvar/Cinfo v::bool) (with-access::cvar/Cinfo o (macro?) (set! macro? v)))

;; sexit/Cinfo
(define-inline (make-sexit/Cinfo::sexit/Cinfo handler1656::obj detached?1657::bool approx1658::approx) (instantiate::sexit/Cinfo (handler handler1656) (detached? detached?1657) (approx approx1658)))
(define-inline (sexit/Cinfo?::bool obj::obj) ((@ isa? __object) obj (@ sexit/Cinfo cfa_info)))
(define (sexit/Cinfo-nil::sexit/Cinfo) (class-nil (@ sexit/Cinfo cfa_info)))
(define-inline (sexit/Cinfo-approx::approx o::sexit/Cinfo) (with-access::sexit/Cinfo o (approx) approx))
(define-inline (sexit/Cinfo-approx-set! o::sexit/Cinfo v::approx) (with-access::sexit/Cinfo o (approx) (set! approx v)))
(define-inline (sexit/Cinfo-detached?::bool o::sexit/Cinfo) (with-access::sexit/Cinfo o (detached?) detached?))
(define-inline (sexit/Cinfo-detached?-set! o::sexit/Cinfo v::bool) (with-access::sexit/Cinfo o (detached?) (set! detached? v)))
(define-inline (sexit/Cinfo-handler::obj o::sexit/Cinfo) (with-access::sexit/Cinfo o (handler) handler))
(define-inline (sexit/Cinfo-handler-set! o::sexit/Cinfo v::obj) (with-access::sexit/Cinfo o (handler) (set! handler v)))

;; reshaped-local
(define-inline (make-reshaped-local::reshaped-local id1642::symbol name1643::obj type1645::type value1646::value access1647::obj fast-alpha1648::obj removable1649::obj occurrence1650::long occurrencew1651::long user?1652::bool key1653::long binding-value1654::obj) (instantiate::reshaped-local (id id1642) (name name1643) (type type1645) (value value1646) (access access1647) (fast-alpha fast-alpha1648) (removable removable1649) (occurrence occurrence1650) (occurrencew occurrencew1651) (user? user?1652) (key key1653) (binding-value binding-value1654)))
(define-inline (reshaped-local?::bool obj::obj) ((@ isa? __object) obj (@ reshaped-local cfa_info)))
(define (reshaped-local-nil::reshaped-local) (class-nil (@ reshaped-local cfa_info)))
(define-inline (reshaped-local-binding-value::obj o::reshaped-local) (with-access::reshaped-local o (binding-value) binding-value))
(define-inline (reshaped-local-binding-value-set! o::reshaped-local v::obj) (with-access::reshaped-local o (binding-value) (set! binding-value v)))
(define-inline (reshaped-local-key::long o::reshaped-local) (with-access::reshaped-local o (key) key))
(define-inline (reshaped-local-key-set! o::reshaped-local v::long) (with-access::reshaped-local o (key) (set! key v)))
(define-inline (reshaped-local-user?::bool o::reshaped-local) (with-access::reshaped-local o (user?) user?))
(define-inline (reshaped-local-user?-set! o::reshaped-local v::bool) (with-access::reshaped-local o (user?) (set! user? v)))
(define-inline (reshaped-local-occurrencew::long o::reshaped-local) (with-access::reshaped-local o (occurrencew) occurrencew))
(define-inline (reshaped-local-occurrencew-set! o::reshaped-local v::long) (with-access::reshaped-local o (occurrencew) (set! occurrencew v)))
(define-inline (reshaped-local-occurrence::long o::reshaped-local) (with-access::reshaped-local o (occurrence) occurrence))
(define-inline (reshaped-local-occurrence-set! o::reshaped-local v::long) (with-access::reshaped-local o (occurrence) (set! occurrence v)))
(define-inline (reshaped-local-removable::obj o::reshaped-local) (with-access::reshaped-local o (removable) removable))
(define-inline (reshaped-local-removable-set! o::reshaped-local v::obj) (with-access::reshaped-local o (removable) (set! removable v)))
(define-inline (reshaped-local-fast-alpha::obj o::reshaped-local) (with-access::reshaped-local o (fast-alpha) fast-alpha))
(define-inline (reshaped-local-fast-alpha-set! o::reshaped-local v::obj) (with-access::reshaped-local o (fast-alpha) (set! fast-alpha v)))
(define-inline (reshaped-local-access::obj o::reshaped-local) (with-access::reshaped-local o (access) access))
(define-inline (reshaped-local-access-set! o::reshaped-local v::obj) (with-access::reshaped-local o (access) (set! access v)))
(define-inline (reshaped-local-value::value o::reshaped-local) (with-access::reshaped-local o (value) value))
(define-inline (reshaped-local-value-set! o::reshaped-local v::value) (with-access::reshaped-local o (value) (set! value v)))
(define-inline (reshaped-local-type::type o::reshaped-local) (with-access::reshaped-local o (type) type))
(define-inline (reshaped-local-type-set! o::reshaped-local v::type) (with-access::reshaped-local o (type) (set! type v)))
(define-inline (reshaped-local-name::obj o::reshaped-local) (with-access::reshaped-local o (name) name))
(define-inline (reshaped-local-name-set! o::reshaped-local v::obj) (with-access::reshaped-local o (name) (set! name v)))
(define-inline (reshaped-local-id::symbol o::reshaped-local) (with-access::reshaped-local o (id) id))
(define-inline (reshaped-local-id-set! o::reshaped-local v::symbol) (with-access::reshaped-local o (id) (set! id v)))

;; reshaped-global
(define-inline (make-reshaped-global::reshaped-global id1621::symbol name1622::obj type1623::type value1624::value access1625::obj fast-alpha1626::obj removable1627::obj occurrence1628::long occurrencew1629::long user?1630::bool module1631::symbol import1632::obj evaluable?1633::bool eval?1634::bool library1635::obj pragma1636::obj src1637::obj jvm-type-name1638::bstring init1639::obj alias1640::obj) (instantiate::reshaped-global (id id1621) (name name1622) (type type1623) (value value1624) (access access1625) (fast-alpha fast-alpha1626) (removable removable1627) (occurrence occurrence1628) (occurrencew occurrencew1629) (user? user?1630) (module module1631) (import import1632) (evaluable? evaluable?1633) (eval? eval?1634) (library library1635) (pragma pragma1636) (src src1637) (jvm-type-name jvm-type-name1638) (init init1639) (alias alias1640)))
(define-inline (reshaped-global?::bool obj::obj) ((@ isa? __object) obj (@ reshaped-global cfa_info)))
(define (reshaped-global-nil::reshaped-global) (class-nil (@ reshaped-global cfa_info)))
(define-inline (reshaped-global-alias::obj o::reshaped-global) (with-access::reshaped-global o (alias) alias))
(define-inline (reshaped-global-alias-set! o::reshaped-global v::obj) (with-access::reshaped-global o (alias) (set! alias v)))
(define-inline (reshaped-global-init::obj o::reshaped-global) (with-access::reshaped-global o (init) init))
(define-inline (reshaped-global-init-set! o::reshaped-global v::obj) (with-access::reshaped-global o (init) (set! init v)))
(define-inline (reshaped-global-jvm-type-name::bstring o::reshaped-global) (with-access::reshaped-global o (jvm-type-name) jvm-type-name))
(define-inline (reshaped-global-jvm-type-name-set! o::reshaped-global v::bstring) (with-access::reshaped-global o (jvm-type-name) (set! jvm-type-name v)))
(define-inline (reshaped-global-src::obj o::reshaped-global) (with-access::reshaped-global o (src) src))
(define-inline (reshaped-global-src-set! o::reshaped-global v::obj) (with-access::reshaped-global o (src) (set! src v)))
(define-inline (reshaped-global-pragma::obj o::reshaped-global) (with-access::reshaped-global o (pragma) pragma))
(define-inline (reshaped-global-pragma-set! o::reshaped-global v::obj) (with-access::reshaped-global o (pragma) (set! pragma v)))
(define-inline (reshaped-global-library::obj o::reshaped-global) (with-access::reshaped-global o (library) library))
(define-inline (reshaped-global-library-set! o::reshaped-global v::obj) (with-access::reshaped-global o (library) (set! library v)))
(define-inline (reshaped-global-eval?::bool o::reshaped-global) (with-access::reshaped-global o (eval?) eval?))
(define-inline (reshaped-global-eval?-set! o::reshaped-global v::bool) (with-access::reshaped-global o (eval?) (set! eval? v)))
(define-inline (reshaped-global-evaluable?::bool o::reshaped-global) (with-access::reshaped-global o (evaluable?) evaluable?))
(define-inline (reshaped-global-evaluable?-set! o::reshaped-global v::bool) (with-access::reshaped-global o (evaluable?) (set! evaluable? v)))
(define-inline (reshaped-global-import::obj o::reshaped-global) (with-access::reshaped-global o (import) import))
(define-inline (reshaped-global-import-set! o::reshaped-global v::obj) (with-access::reshaped-global o (import) (set! import v)))
(define-inline (reshaped-global-module::symbol o::reshaped-global) (with-access::reshaped-global o (module) module))
(define-inline (reshaped-global-module-set! o::reshaped-global v::symbol) (with-access::reshaped-global o (module) (set! module v)))
(define-inline (reshaped-global-user?::bool o::reshaped-global) (with-access::reshaped-global o (user?) user?))
(define-inline (reshaped-global-user?-set! o::reshaped-global v::bool) (with-access::reshaped-global o (user?) (set! user? v)))
(define-inline (reshaped-global-occurrencew::long o::reshaped-global) (with-access::reshaped-global o (occurrencew) occurrencew))
(define-inline (reshaped-global-occurrencew-set! o::reshaped-global v::long) (with-access::reshaped-global o (occurrencew) (set! occurrencew v)))
(define-inline (reshaped-global-occurrence::long o::reshaped-global) (with-access::reshaped-global o (occurrence) occurrence))
(define-inline (reshaped-global-occurrence-set! o::reshaped-global v::long) (with-access::reshaped-global o (occurrence) (set! occurrence v)))
(define-inline (reshaped-global-removable::obj o::reshaped-global) (with-access::reshaped-global o (removable) removable))
(define-inline (reshaped-global-removable-set! o::reshaped-global v::obj) (with-access::reshaped-global o (removable) (set! removable v)))
(define-inline (reshaped-global-fast-alpha::obj o::reshaped-global) (with-access::reshaped-global o (fast-alpha) fast-alpha))
(define-inline (reshaped-global-fast-alpha-set! o::reshaped-global v::obj) (with-access::reshaped-global o (fast-alpha) (set! fast-alpha v)))
(define-inline (reshaped-global-access::obj o::reshaped-global) (with-access::reshaped-global o (access) access))
(define-inline (reshaped-global-access-set! o::reshaped-global v::obj) (with-access::reshaped-global o (access) (set! access v)))
(define-inline (reshaped-global-value::value o::reshaped-global) (with-access::reshaped-global o (value) value))
(define-inline (reshaped-global-value-set! o::reshaped-global v::value) (with-access::reshaped-global o (value) (set! value v)))
(define-inline (reshaped-global-type::type o::reshaped-global) (with-access::reshaped-global o (type) type))
(define-inline (reshaped-global-type-set! o::reshaped-global v::type) (with-access::reshaped-global o (type) (set! type v)))
(define-inline (reshaped-global-name::obj o::reshaped-global) (with-access::reshaped-global o (name) name))
(define-inline (reshaped-global-name-set! o::reshaped-global v::obj) (with-access::reshaped-global o (name) (set! name v)))
(define-inline (reshaped-global-id::symbol o::reshaped-global) (with-access::reshaped-global o (id) id))
(define-inline (reshaped-global-id-set! o::reshaped-global v::symbol) (with-access::reshaped-global o (id) (set! id v)))

;; atom/Cinfo
(define-inline (make-atom/Cinfo::atom/Cinfo loc1616::obj type1617::type value1618::obj approx1619::approx) (instantiate::atom/Cinfo (loc loc1616) (type type1617) (value value1618) (approx approx1619)))
(define-inline (atom/Cinfo?::bool obj::obj) ((@ isa? __object) obj (@ atom/Cinfo cfa_info)))
(define (atom/Cinfo-nil::atom/Cinfo) (class-nil (@ atom/Cinfo cfa_info)))
(define-inline (atom/Cinfo-approx::approx o::atom/Cinfo) (with-access::atom/Cinfo o (approx) approx))
(define-inline (atom/Cinfo-approx-set! o::atom/Cinfo v::approx) (with-access::atom/Cinfo o (approx) (set! approx v)))
(define-inline (atom/Cinfo-value::obj o::atom/Cinfo) (with-access::atom/Cinfo o (value) value))
(define-inline (atom/Cinfo-value-set! o::atom/Cinfo v::obj) (with-access::atom/Cinfo o (value) (set! value v)))
(define-inline (atom/Cinfo-type::type o::atom/Cinfo) (with-access::atom/Cinfo o (type) type))
(define-inline (atom/Cinfo-type-set! o::atom/Cinfo v::type) (with-access::atom/Cinfo o (type) (set! type v)))
(define-inline (atom/Cinfo-loc::obj o::atom/Cinfo) (with-access::atom/Cinfo o (loc) loc))
(define-inline (atom/Cinfo-loc-set! o::atom/Cinfo v::obj) (with-access::atom/Cinfo o (loc) (set! loc v)))

;; kwote/node
(define-inline (make-kwote/node::kwote/node loc1611::obj type1612::type value1613::obj node1614::node) (instantiate::kwote/node (loc loc1611) (type type1612) (value value1613) (node node1614)))
(define-inline (kwote/node?::bool obj::obj) ((@ isa? __object) obj (@ kwote/node cfa_info)))
(define (kwote/node-nil::kwote/node) (class-nil (@ kwote/node cfa_info)))
(define-inline (kwote/node-node::node o::kwote/node) (with-access::kwote/node o (node) node))
(define-inline (kwote/node-node-set! o::kwote/node v::node) (with-access::kwote/node o (node) (set! node v)))
(define-inline (kwote/node-value::obj o::kwote/node) (with-access::kwote/node o (value) value))
(define-inline (kwote/node-value-set! o::kwote/node v::obj) (with-access::kwote/node o (value) (set! value v)))
(define-inline (kwote/node-type::type o::kwote/node) (with-access::kwote/node o (type) type))
(define-inline (kwote/node-type-set! o::kwote/node v::type) (with-access::kwote/node o (type) (set! type v)))
(define-inline (kwote/node-loc::obj o::kwote/node) (with-access::kwote/node o (loc) loc))
(define-inline (kwote/node-loc-set! o::kwote/node v::obj) (with-access::kwote/node o (loc) (set! loc v)))

;; kwote/Cinfo
(define-inline (make-kwote/Cinfo::kwote/Cinfo loc1605::obj type1606::type value1607::obj approx1608::approx) (instantiate::kwote/Cinfo (loc loc1605) (type type1606) (value value1607) (approx approx1608)))
(define-inline (kwote/Cinfo?::bool obj::obj) ((@ isa? __object) obj (@ kwote/Cinfo cfa_info)))
(define (kwote/Cinfo-nil::kwote/Cinfo) (class-nil (@ kwote/Cinfo cfa_info)))
(define-inline (kwote/Cinfo-approx::approx o::kwote/Cinfo) (with-access::kwote/Cinfo o (approx) approx))
(define-inline (kwote/Cinfo-approx-set! o::kwote/Cinfo v::approx) (with-access::kwote/Cinfo o (approx) (set! approx v)))
(define-inline (kwote/Cinfo-value::obj o::kwote/Cinfo) (with-access::kwote/Cinfo o (value) value))
(define-inline (kwote/Cinfo-value-set! o::kwote/Cinfo v::obj) (with-access::kwote/Cinfo o (value) (set! value v)))
(define-inline (kwote/Cinfo-type::type o::kwote/Cinfo) (with-access::kwote/Cinfo o (type) type))
(define-inline (kwote/Cinfo-type-set! o::kwote/Cinfo v::type) (with-access::kwote/Cinfo o (type) (set! type v)))
(define-inline (kwote/Cinfo-loc::obj o::kwote/Cinfo) (with-access::kwote/Cinfo o (loc) loc))
(define-inline (kwote/Cinfo-loc-set! o::kwote/Cinfo v::obj) (with-access::kwote/Cinfo o (loc) (set! loc v)))

;; app-ly/Cinfo
(define-inline (make-app-ly/Cinfo::app-ly/Cinfo loc1599::obj type1600::type fun1601::node arg1602::node approx1603::approx) (instantiate::app-ly/Cinfo (loc loc1599) (type type1600) (fun fun1601) (arg arg1602) (approx approx1603)))
(define-inline (app-ly/Cinfo?::bool obj::obj) ((@ isa? __object) obj (@ app-ly/Cinfo cfa_info)))
(define (app-ly/Cinfo-nil::app-ly/Cinfo) (class-nil (@ app-ly/Cinfo cfa_info)))
(define-inline (app-ly/Cinfo-approx::approx o::app-ly/Cinfo) (with-access::app-ly/Cinfo o (approx) approx))
(define-inline (app-ly/Cinfo-approx-set! o::app-ly/Cinfo v::approx) (with-access::app-ly/Cinfo o (approx) (set! approx v)))
(define-inline (app-ly/Cinfo-arg::node o::app-ly/Cinfo) (with-access::app-ly/Cinfo o (arg) arg))
(define-inline (app-ly/Cinfo-arg-set! o::app-ly/Cinfo v::node) (with-access::app-ly/Cinfo o (arg) (set! arg v)))
(define-inline (app-ly/Cinfo-fun::node o::app-ly/Cinfo) (with-access::app-ly/Cinfo o (fun) fun))
(define-inline (app-ly/Cinfo-fun-set! o::app-ly/Cinfo v::node) (with-access::app-ly/Cinfo o (fun) (set! fun v)))
(define-inline (app-ly/Cinfo-type::type o::app-ly/Cinfo) (with-access::app-ly/Cinfo o (type) type))
(define-inline (app-ly/Cinfo-type-set! o::app-ly/Cinfo v::type) (with-access::app-ly/Cinfo o (type) (set! type v)))
(define-inline (app-ly/Cinfo-loc::obj o::app-ly/Cinfo) (with-access::app-ly/Cinfo o (loc) loc))
(define-inline (app-ly/Cinfo-loc-set! o::app-ly/Cinfo v::obj) (with-access::app-ly/Cinfo o (loc) (set! loc v)))

;; funcall/Cinfo
(define-inline (make-funcall/Cinfo::funcall/Cinfo loc1587::obj type1588::type fun1589::node args1590::obj strength1591::symbol functions1592::obj approx1593::approx va-approx1594::approx arity-error-noticed?1595::bool type-error-noticed?1596::bool) (instantiate::funcall/Cinfo (loc loc1587) (type type1588) (fun fun1589) (args args1590) (strength strength1591) (functions functions1592) (approx approx1593) (va-approx va-approx1594) (arity-error-noticed? arity-error-noticed?1595) (type-error-noticed? type-error-noticed?1596)))
(define-inline (funcall/Cinfo?::bool obj::obj) ((@ isa? __object) obj (@ funcall/Cinfo cfa_info)))
(define (funcall/Cinfo-nil::funcall/Cinfo) (class-nil (@ funcall/Cinfo cfa_info)))
(define-inline (funcall/Cinfo-type-error-noticed?::bool o::funcall/Cinfo) (with-access::funcall/Cinfo o (type-error-noticed?) type-error-noticed?))
(define-inline (funcall/Cinfo-type-error-noticed?-set! o::funcall/Cinfo v::bool) (with-access::funcall/Cinfo o (type-error-noticed?) (set! type-error-noticed? v)))
(define-inline (funcall/Cinfo-arity-error-noticed?::bool o::funcall/Cinfo) (with-access::funcall/Cinfo o (arity-error-noticed?) arity-error-noticed?))
(define-inline (funcall/Cinfo-arity-error-noticed?-set! o::funcall/Cinfo v::bool) (with-access::funcall/Cinfo o (arity-error-noticed?) (set! arity-error-noticed? v)))
(define-inline (funcall/Cinfo-va-approx::approx o::funcall/Cinfo) (with-access::funcall/Cinfo o (va-approx) va-approx))
(define-inline (funcall/Cinfo-va-approx-set! o::funcall/Cinfo v::approx) (with-access::funcall/Cinfo o (va-approx) (set! va-approx v)))
(define-inline (funcall/Cinfo-approx::approx o::funcall/Cinfo) (with-access::funcall/Cinfo o (approx) approx))
(define-inline (funcall/Cinfo-approx-set! o::funcall/Cinfo v::approx) (with-access::funcall/Cinfo o (approx) (set! approx v)))
(define-inline (funcall/Cinfo-functions::obj o::funcall/Cinfo) (with-access::funcall/Cinfo o (functions) functions))
(define-inline (funcall/Cinfo-functions-set! o::funcall/Cinfo v::obj) (with-access::funcall/Cinfo o (functions) (set! functions v)))
(define-inline (funcall/Cinfo-strength::symbol o::funcall/Cinfo) (with-access::funcall/Cinfo o (strength) strength))
(define-inline (funcall/Cinfo-strength-set! o::funcall/Cinfo v::symbol) (with-access::funcall/Cinfo o (strength) (set! strength v)))
(define-inline (funcall/Cinfo-args::obj o::funcall/Cinfo) (with-access::funcall/Cinfo o (args) args))
(define-inline (funcall/Cinfo-args-set! o::funcall/Cinfo v::obj) (with-access::funcall/Cinfo o (args) (set! args v)))
(define-inline (funcall/Cinfo-fun::node o::funcall/Cinfo) (with-access::funcall/Cinfo o (fun) fun))
(define-inline (funcall/Cinfo-fun-set! o::funcall/Cinfo v::node) (with-access::funcall/Cinfo o (fun) (set! fun v)))
(define-inline (funcall/Cinfo-type::type o::funcall/Cinfo) (with-access::funcall/Cinfo o (type) type))
(define-inline (funcall/Cinfo-type-set! o::funcall/Cinfo v::type) (with-access::funcall/Cinfo o (type) (set! type v)))
(define-inline (funcall/Cinfo-loc::obj o::funcall/Cinfo) (with-access::funcall/Cinfo o (loc) loc))
(define-inline (funcall/Cinfo-loc-set! o::funcall/Cinfo v::obj) (with-access::funcall/Cinfo o (loc) (set! loc v)))

;; setq/Cinfo
(define-inline (make-setq/Cinfo::setq/Cinfo loc1581::obj type1582::type var1583::var value1584::node approx1585::approx) (instantiate::setq/Cinfo (loc loc1581) (type type1582) (var var1583) (value value1584) (approx approx1585)))
(define-inline (setq/Cinfo?::bool obj::obj) ((@ isa? __object) obj (@ setq/Cinfo cfa_info)))
(define (setq/Cinfo-nil::setq/Cinfo) (class-nil (@ setq/Cinfo cfa_info)))
(define-inline (setq/Cinfo-approx::approx o::setq/Cinfo) (with-access::setq/Cinfo o (approx) approx))
(define-inline (setq/Cinfo-approx-set! o::setq/Cinfo v::approx) (with-access::setq/Cinfo o (approx) (set! approx v)))
(define-inline (setq/Cinfo-value::node o::setq/Cinfo) (with-access::setq/Cinfo o (value) value))
(define-inline (setq/Cinfo-value-set! o::setq/Cinfo v::node) (with-access::setq/Cinfo o (value) (set! value v)))
(define-inline (setq/Cinfo-var::var o::setq/Cinfo) (with-access::setq/Cinfo o (var) var))
(define-inline (setq/Cinfo-var-set! o::setq/Cinfo v::var) (with-access::setq/Cinfo o (var) (set! var v)))
(define-inline (setq/Cinfo-type::type o::setq/Cinfo) (with-access::setq/Cinfo o (type) type))
(define-inline (setq/Cinfo-type-set! o::setq/Cinfo v::type) (with-access::setq/Cinfo o (type) (set! type v)))
(define-inline (setq/Cinfo-loc::obj o::setq/Cinfo) (with-access::setq/Cinfo o (loc) loc))
(define-inline (setq/Cinfo-loc-set! o::setq/Cinfo v::obj) (with-access::setq/Cinfo o (loc) (set! loc v)))

;; conditional/Cinfo
(define-inline (make-conditional/Cinfo::conditional/Cinfo loc1572::obj type1573::type side-effect1574::obj key1575::obj test1576::node true1577::node false1578::node approx1579::approx) (instantiate::conditional/Cinfo (loc loc1572) (type type1573) (side-effect side-effect1574) (key key1575) (test test1576) (true true1577) (false false1578) (approx approx1579)))
(define-inline (conditional/Cinfo?::bool obj::obj) ((@ isa? __object) obj (@ conditional/Cinfo cfa_info)))
(define (conditional/Cinfo-nil::conditional/Cinfo) (class-nil (@ conditional/Cinfo cfa_info)))
(define-inline (conditional/Cinfo-approx::approx o::conditional/Cinfo) (with-access::conditional/Cinfo o (approx) approx))
(define-inline (conditional/Cinfo-approx-set! o::conditional/Cinfo v::approx) (with-access::conditional/Cinfo o (approx) (set! approx v)))
(define-inline (conditional/Cinfo-false::node o::conditional/Cinfo) (with-access::conditional/Cinfo o (false) false))
(define-inline (conditional/Cinfo-false-set! o::conditional/Cinfo v::node) (with-access::conditional/Cinfo o (false) (set! false v)))
(define-inline (conditional/Cinfo-true::node o::conditional/Cinfo) (with-access::conditional/Cinfo o (true) true))
(define-inline (conditional/Cinfo-true-set! o::conditional/Cinfo v::node) (with-access::conditional/Cinfo o (true) (set! true v)))
(define-inline (conditional/Cinfo-test::node o::conditional/Cinfo) (with-access::conditional/Cinfo o (test) test))
(define-inline (conditional/Cinfo-test-set! o::conditional/Cinfo v::node) (with-access::conditional/Cinfo o (test) (set! test v)))
(define-inline (conditional/Cinfo-key::obj o::conditional/Cinfo) (with-access::conditional/Cinfo o (key) key))
(define-inline (conditional/Cinfo-key-set! o::conditional/Cinfo v::obj) (with-access::conditional/Cinfo o (key) (set! key v)))
(define-inline (conditional/Cinfo-side-effect::obj o::conditional/Cinfo) (with-access::conditional/Cinfo o (side-effect) side-effect))
(define-inline (conditional/Cinfo-side-effect-set! o::conditional/Cinfo v::obj) (with-access::conditional/Cinfo o (side-effect) (set! side-effect v)))
(define-inline (conditional/Cinfo-type::type o::conditional/Cinfo) (with-access::conditional/Cinfo o (type) type))
(define-inline (conditional/Cinfo-type-set! o::conditional/Cinfo v::type) (with-access::conditional/Cinfo o (type) (set! type v)))
(define-inline (conditional/Cinfo-loc::obj o::conditional/Cinfo) (with-access::conditional/Cinfo o (loc) loc))
(define-inline (conditional/Cinfo-loc-set! o::conditional/Cinfo v::obj) (with-access::conditional/Cinfo o (loc) (set! loc v)))

;; fail/Cinfo
(define-inline (make-fail/Cinfo::fail/Cinfo loc1565::obj type1566::type proc1567::node msg1568::node obj1569::node approx1570::approx) (instantiate::fail/Cinfo (loc loc1565) (type type1566) (proc proc1567) (msg msg1568) (obj obj1569) (approx approx1570)))
(define-inline (fail/Cinfo?::bool obj::obj) ((@ isa? __object) obj (@ fail/Cinfo cfa_info)))
(define (fail/Cinfo-nil::fail/Cinfo) (class-nil (@ fail/Cinfo cfa_info)))
(define-inline (fail/Cinfo-approx::approx o::fail/Cinfo) (with-access::fail/Cinfo o (approx) approx))
(define-inline (fail/Cinfo-approx-set! o::fail/Cinfo v::approx) (with-access::fail/Cinfo o (approx) (set! approx v)))
(define-inline (fail/Cinfo-obj::node o::fail/Cinfo) (with-access::fail/Cinfo o (obj) obj))
(define-inline (fail/Cinfo-obj-set! o::fail/Cinfo v::node) (with-access::fail/Cinfo o (obj) (set! obj v)))
(define-inline (fail/Cinfo-msg::node o::fail/Cinfo) (with-access::fail/Cinfo o (msg) msg))
(define-inline (fail/Cinfo-msg-set! o::fail/Cinfo v::node) (with-access::fail/Cinfo o (msg) (set! msg v)))
(define-inline (fail/Cinfo-proc::node o::fail/Cinfo) (with-access::fail/Cinfo o (proc) proc))
(define-inline (fail/Cinfo-proc-set! o::fail/Cinfo v::node) (with-access::fail/Cinfo o (proc) (set! proc v)))
(define-inline (fail/Cinfo-type::type o::fail/Cinfo) (with-access::fail/Cinfo o (type) type))
(define-inline (fail/Cinfo-type-set! o::fail/Cinfo v::type) (with-access::fail/Cinfo o (type) (set! type v)))
(define-inline (fail/Cinfo-loc::obj o::fail/Cinfo) (with-access::fail/Cinfo o (loc) loc))
(define-inline (fail/Cinfo-loc-set! o::fail/Cinfo v::obj) (with-access::fail/Cinfo o (loc) (set! loc v)))

;; select/Cinfo
(define-inline (make-select/Cinfo::select/Cinfo loc1556::obj type1557::type side-effect1558::obj key1559::obj test1560::node clauses1561::obj item-type1562::type approx1563::approx) (instantiate::select/Cinfo (loc loc1556) (type type1557) (side-effect side-effect1558) (key key1559) (test test1560) (clauses clauses1561) (item-type item-type1562) (approx approx1563)))
(define-inline (select/Cinfo?::bool obj::obj) ((@ isa? __object) obj (@ select/Cinfo cfa_info)))
(define (select/Cinfo-nil::select/Cinfo) (class-nil (@ select/Cinfo cfa_info)))
(define-inline (select/Cinfo-approx::approx o::select/Cinfo) (with-access::select/Cinfo o (approx) approx))
(define-inline (select/Cinfo-approx-set! o::select/Cinfo v::approx) (with-access::select/Cinfo o (approx) (set! approx v)))
(define-inline (select/Cinfo-item-type::type o::select/Cinfo) (with-access::select/Cinfo o (item-type) item-type))
(define-inline (select/Cinfo-item-type-set! o::select/Cinfo v::type) (with-access::select/Cinfo o (item-type) (set! item-type v)))
(define-inline (select/Cinfo-clauses::obj o::select/Cinfo) (with-access::select/Cinfo o (clauses) clauses))
(define-inline (select/Cinfo-clauses-set! o::select/Cinfo v::obj) (with-access::select/Cinfo o (clauses) (set! clauses v)))
(define-inline (select/Cinfo-test::node o::select/Cinfo) (with-access::select/Cinfo o (test) test))
(define-inline (select/Cinfo-test-set! o::select/Cinfo v::node) (with-access::select/Cinfo o (test) (set! test v)))
(define-inline (select/Cinfo-key::obj o::select/Cinfo) (with-access::select/Cinfo o (key) key))
(define-inline (select/Cinfo-key-set! o::select/Cinfo v::obj) (with-access::select/Cinfo o (key) (set! key v)))
(define-inline (select/Cinfo-side-effect::obj o::select/Cinfo) (with-access::select/Cinfo o (side-effect) side-effect))
(define-inline (select/Cinfo-side-effect-set! o::select/Cinfo v::obj) (with-access::select/Cinfo o (side-effect) (set! side-effect v)))
(define-inline (select/Cinfo-type::type o::select/Cinfo) (with-access::select/Cinfo o (type) type))
(define-inline (select/Cinfo-type-set! o::select/Cinfo v::type) (with-access::select/Cinfo o (type) (set! type v)))
(define-inline (select/Cinfo-loc::obj o::select/Cinfo) (with-access::select/Cinfo o (loc) loc))
(define-inline (select/Cinfo-loc-set! o::select/Cinfo v::obj) (with-access::select/Cinfo o (loc) (set! loc v)))

;; set-ex-it/Cinfo
(define-inline (make-set-ex-it/Cinfo::set-ex-it/Cinfo loc1550::obj type1551::type var1552::var body1553::node approx1554::approx) (instantiate::set-ex-it/Cinfo (loc loc1550) (type type1551) (var var1552) (body body1553) (approx approx1554)))
(define-inline (set-ex-it/Cinfo?::bool obj::obj) ((@ isa? __object) obj (@ set-ex-it/Cinfo cfa_info)))
(define (set-ex-it/Cinfo-nil::set-ex-it/Cinfo) (class-nil (@ set-ex-it/Cinfo cfa_info)))
(define-inline (set-ex-it/Cinfo-approx::approx o::set-ex-it/Cinfo) (with-access::set-ex-it/Cinfo o (approx) approx))
(define-inline (set-ex-it/Cinfo-approx-set! o::set-ex-it/Cinfo v::approx) (with-access::set-ex-it/Cinfo o (approx) (set! approx v)))
(define-inline (set-ex-it/Cinfo-body::node o::set-ex-it/Cinfo) (with-access::set-ex-it/Cinfo o (body) body))
(define-inline (set-ex-it/Cinfo-body-set! o::set-ex-it/Cinfo v::node) (with-access::set-ex-it/Cinfo o (body) (set! body v)))
(define-inline (set-ex-it/Cinfo-var::var o::set-ex-it/Cinfo) (with-access::set-ex-it/Cinfo o (var) var))
(define-inline (set-ex-it/Cinfo-var-set! o::set-ex-it/Cinfo v::var) (with-access::set-ex-it/Cinfo o (var) (set! var v)))
(define-inline (set-ex-it/Cinfo-type::type o::set-ex-it/Cinfo) (with-access::set-ex-it/Cinfo o (type) type))
(define-inline (set-ex-it/Cinfo-type-set! o::set-ex-it/Cinfo v::type) (with-access::set-ex-it/Cinfo o (type) (set! type v)))
(define-inline (set-ex-it/Cinfo-loc::obj o::set-ex-it/Cinfo) (with-access::set-ex-it/Cinfo o (loc) loc))
(define-inline (set-ex-it/Cinfo-loc-set! o::set-ex-it/Cinfo v::obj) (with-access::set-ex-it/Cinfo o (loc) (set! loc v)))

;; jump-ex-it/Cinfo
(define-inline (make-jump-ex-it/Cinfo::jump-ex-it/Cinfo loc1544::obj type1545::type exit1546::node value1547::node approx1548::approx) (instantiate::jump-ex-it/Cinfo (loc loc1544) (type type1545) (exit exit1546) (value value1547) (approx approx1548)))
(define-inline (jump-ex-it/Cinfo?::bool obj::obj) ((@ isa? __object) obj (@ jump-ex-it/Cinfo cfa_info)))
(define (jump-ex-it/Cinfo-nil::jump-ex-it/Cinfo) (class-nil (@ jump-ex-it/Cinfo cfa_info)))
(define-inline (jump-ex-it/Cinfo-approx::approx o::jump-ex-it/Cinfo) (with-access::jump-ex-it/Cinfo o (approx) approx))
(define-inline (jump-ex-it/Cinfo-approx-set! o::jump-ex-it/Cinfo v::approx) (with-access::jump-ex-it/Cinfo o (approx) (set! approx v)))
(define-inline (jump-ex-it/Cinfo-value::node o::jump-ex-it/Cinfo) (with-access::jump-ex-it/Cinfo o (value) value))
(define-inline (jump-ex-it/Cinfo-value-set! o::jump-ex-it/Cinfo v::node) (with-access::jump-ex-it/Cinfo o (value) (set! value v)))
(define-inline (jump-ex-it/Cinfo-exit::node o::jump-ex-it/Cinfo) (with-access::jump-ex-it/Cinfo o (exit) exit))
(define-inline (jump-ex-it/Cinfo-exit-set! o::jump-ex-it/Cinfo v::node) (with-access::jump-ex-it/Cinfo o (exit) (set! exit v)))
(define-inline (jump-ex-it/Cinfo-type::type o::jump-ex-it/Cinfo) (with-access::jump-ex-it/Cinfo o (type) type))
(define-inline (jump-ex-it/Cinfo-type-set! o::jump-ex-it/Cinfo v::type) (with-access::jump-ex-it/Cinfo o (type) (set! type v)))
(define-inline (jump-ex-it/Cinfo-loc::obj o::jump-ex-it/Cinfo) (with-access::jump-ex-it/Cinfo o (loc) loc))
(define-inline (jump-ex-it/Cinfo-loc-set! o::jump-ex-it/Cinfo v::obj) (with-access::jump-ex-it/Cinfo o (loc) (set! loc v)))

;; pre-make-box
(define-inline (make-pre-make-box::pre-make-box loc1537::obj type1538::type side-effect1539::obj key1540::obj value1541::node vtype1542::type) (instantiate::pre-make-box (loc loc1537) (type type1538) (side-effect side-effect1539) (key key1540) (value value1541) (vtype vtype1542)))
(define-inline (pre-make-box?::bool obj::obj) ((@ isa? __object) obj (@ pre-make-box cfa_info)))
(define (pre-make-box-nil::pre-make-box) (class-nil (@ pre-make-box cfa_info)))
(define-inline (pre-make-box-vtype::type o::pre-make-box) (with-access::pre-make-box o (vtype) vtype))
(define-inline (pre-make-box-vtype-set! o::pre-make-box v::type) (with-access::pre-make-box o (vtype) (set! vtype v)))
(define-inline (pre-make-box-value::node o::pre-make-box) (with-access::pre-make-box o (value) value))
(define-inline (pre-make-box-value-set! o::pre-make-box v::node) (with-access::pre-make-box o (value) (set! value v)))
(define-inline (pre-make-box-key::obj o::pre-make-box) (with-access::pre-make-box o (key) key))
(define-inline (pre-make-box-key-set! o::pre-make-box v::obj) (with-access::pre-make-box o (key) (set! key v)))
(define-inline (pre-make-box-side-effect::obj o::pre-make-box) (with-access::pre-make-box o (side-effect) side-effect))
(define-inline (pre-make-box-side-effect-set! o::pre-make-box v::obj) (with-access::pre-make-box o (side-effect) (set! side-effect v)))
(define-inline (pre-make-box-type::type o::pre-make-box) (with-access::pre-make-box o (type) type))
(define-inline (pre-make-box-type-set! o::pre-make-box v::type) (with-access::pre-make-box o (type) (set! type v)))
(define-inline (pre-make-box-loc::obj o::pre-make-box) (with-access::pre-make-box o (loc) loc))
(define-inline (pre-make-box-loc-set! o::pre-make-box v::obj) (with-access::pre-make-box o (loc) (set! loc v)))

;; make-box/Cinfo
(define-inline (make-make-box/Cinfo::make-box/Cinfo loc1528::obj type1529::type side-effect1530::obj key1531::obj value1532::node vtype1533::type approx1535::approx) (instantiate::make-box/Cinfo (loc loc1528) (type type1529) (side-effect side-effect1530) (key key1531) (value value1532) (vtype vtype1533) (approx approx1535)))
(define-inline (make-box/Cinfo?::bool obj::obj) ((@ isa? __object) obj (@ make-box/Cinfo cfa_info)))
(define (make-box/Cinfo-nil::make-box/Cinfo) (class-nil (@ make-box/Cinfo cfa_info)))
(define-inline (make-box/Cinfo-approx::approx o::make-box/Cinfo) (with-access::make-box/Cinfo o (approx) approx))
(define-inline (make-box/Cinfo-approx-set! o::make-box/Cinfo v::approx) (with-access::make-box/Cinfo o (approx) (set! approx v)))
(define-inline (make-box/Cinfo-vtype::type o::make-box/Cinfo) (with-access::make-box/Cinfo o (vtype) vtype))
(define-inline (make-box/Cinfo-vtype-set! o::make-box/Cinfo v::type) (with-access::make-box/Cinfo o (vtype) (set! vtype v)))
(define-inline (make-box/Cinfo-value::node o::make-box/Cinfo) (with-access::make-box/Cinfo o (value) value))
(define-inline (make-box/Cinfo-value-set! o::make-box/Cinfo v::node) (with-access::make-box/Cinfo o (value) (set! value v)))
(define-inline (make-box/Cinfo-key::obj o::make-box/Cinfo) (with-access::make-box/Cinfo o (key) key))
(define-inline (make-box/Cinfo-key-set! o::make-box/Cinfo v::obj) (with-access::make-box/Cinfo o (key) (set! key v)))
(define-inline (make-box/Cinfo-side-effect::obj o::make-box/Cinfo) (with-access::make-box/Cinfo o (side-effect) side-effect))
(define-inline (make-box/Cinfo-side-effect-set! o::make-box/Cinfo v::obj) (with-access::make-box/Cinfo o (side-effect) (set! side-effect v)))
(define-inline (make-box/Cinfo-type::type o::make-box/Cinfo) (with-access::make-box/Cinfo o (type) type))
(define-inline (make-box/Cinfo-type-set! o::make-box/Cinfo v::type) (with-access::make-box/Cinfo o (type) (set! type v)))
(define-inline (make-box/Cinfo-loc::obj o::make-box/Cinfo) (with-access::make-box/Cinfo o (loc) loc))
(define-inline (make-box/Cinfo-loc-set! o::make-box/Cinfo v::obj) (with-access::make-box/Cinfo o (loc) (set! loc v)))

;; make-box/O-Cinfo
(define-inline (make-make-box/O-Cinfo::make-box/O-Cinfo loc1519::obj type1520::type side-effect1521::obj key1522::obj value1523::node vtype1524::type approx1525::approx value-approx1526::approx) (instantiate::make-box/O-Cinfo (loc loc1519) (type type1520) (side-effect side-effect1521) (key key1522) (value value1523) (vtype vtype1524) (approx approx1525) (value-approx value-approx1526)))
(define-inline (make-box/O-Cinfo?::bool obj::obj) ((@ isa? __object) obj (@ make-box/O-Cinfo cfa_info)))
(define (make-box/O-Cinfo-nil::make-box/O-Cinfo) (class-nil (@ make-box/O-Cinfo cfa_info)))
(define-inline (make-box/O-Cinfo-value-approx::approx o::make-box/O-Cinfo) (with-access::make-box/O-Cinfo o (value-approx) value-approx))
(define-inline (make-box/O-Cinfo-value-approx-set! o::make-box/O-Cinfo v::approx) (with-access::make-box/O-Cinfo o (value-approx) (set! value-approx v)))
(define-inline (make-box/O-Cinfo-approx::approx o::make-box/O-Cinfo) (with-access::make-box/O-Cinfo o (approx) approx))
(define-inline (make-box/O-Cinfo-approx-set! o::make-box/O-Cinfo v::approx) (with-access::make-box/O-Cinfo o (approx) (set! approx v)))
(define-inline (make-box/O-Cinfo-vtype::type o::make-box/O-Cinfo) (with-access::make-box/O-Cinfo o (vtype) vtype))
(define-inline (make-box/O-Cinfo-vtype-set! o::make-box/O-Cinfo v::type) (with-access::make-box/O-Cinfo o (vtype) (set! vtype v)))
(define-inline (make-box/O-Cinfo-value::node o::make-box/O-Cinfo) (with-access::make-box/O-Cinfo o (value) value))
(define-inline (make-box/O-Cinfo-value-set! o::make-box/O-Cinfo v::node) (with-access::make-box/O-Cinfo o (value) (set! value v)))
(define-inline (make-box/O-Cinfo-key::obj o::make-box/O-Cinfo) (with-access::make-box/O-Cinfo o (key) key))
(define-inline (make-box/O-Cinfo-key-set! o::make-box/O-Cinfo v::obj) (with-access::make-box/O-Cinfo o (key) (set! key v)))
(define-inline (make-box/O-Cinfo-side-effect::obj o::make-box/O-Cinfo) (with-access::make-box/O-Cinfo o (side-effect) side-effect))
(define-inline (make-box/O-Cinfo-side-effect-set! o::make-box/O-Cinfo v::obj) (with-access::make-box/O-Cinfo o (side-effect) (set! side-effect v)))
(define-inline (make-box/O-Cinfo-type::type o::make-box/O-Cinfo) (with-access::make-box/O-Cinfo o (type) type))
(define-inline (make-box/O-Cinfo-type-set! o::make-box/O-Cinfo v::type) (with-access::make-box/O-Cinfo o (type) (set! type v)))
(define-inline (make-box/O-Cinfo-loc::obj o::make-box/O-Cinfo) (with-access::make-box/O-Cinfo o (loc) loc))
(define-inline (make-box/O-Cinfo-loc-set! o::make-box/O-Cinfo v::obj) (with-access::make-box/O-Cinfo o (loc) (set! loc v)))

;; box-set!/Cinfo
(define-inline (make-box-set!/Cinfo::box-set!/Cinfo loc1511::obj type1512::type var1513::var value1514::node vtype1516::type approx1517::approx) (instantiate::box-set!/Cinfo (loc loc1511) (type type1512) (var var1513) (value value1514) (vtype vtype1516) (approx approx1517)))
(define-inline (box-set!/Cinfo?::bool obj::obj) ((@ isa? __object) obj (@ box-set!/Cinfo cfa_info)))
(define (box-set!/Cinfo-nil::box-set!/Cinfo) (class-nil (@ box-set!/Cinfo cfa_info)))
(define-inline (box-set!/Cinfo-approx::approx o::box-set!/Cinfo) (with-access::box-set!/Cinfo o (approx) approx))
(define-inline (box-set!/Cinfo-approx-set! o::box-set!/Cinfo v::approx) (with-access::box-set!/Cinfo o (approx) (set! approx v)))
(define-inline (box-set!/Cinfo-vtype::type o::box-set!/Cinfo) (with-access::box-set!/Cinfo o (vtype) vtype))
(define-inline (box-set!/Cinfo-vtype-set! o::box-set!/Cinfo v::type) (with-access::box-set!/Cinfo o (vtype) (set! vtype v)))
(define-inline (box-set!/Cinfo-value::node o::box-set!/Cinfo) (with-access::box-set!/Cinfo o (value) value))
(define-inline (box-set!/Cinfo-value-set! o::box-set!/Cinfo v::node) (with-access::box-set!/Cinfo o (value) (set! value v)))
(define-inline (box-set!/Cinfo-var::var o::box-set!/Cinfo) (with-access::box-set!/Cinfo o (var) var))
(define-inline (box-set!/Cinfo-var-set! o::box-set!/Cinfo v::var) (with-access::box-set!/Cinfo o (var) (set! var v)))
(define-inline (box-set!/Cinfo-type::type o::box-set!/Cinfo) (with-access::box-set!/Cinfo o (type) type))
(define-inline (box-set!/Cinfo-type-set! o::box-set!/Cinfo v::type) (with-access::box-set!/Cinfo o (type) (set! type v)))
(define-inline (box-set!/Cinfo-loc::obj o::box-set!/Cinfo) (with-access::box-set!/Cinfo o (loc) loc))
(define-inline (box-set!/Cinfo-loc-set! o::box-set!/Cinfo v::obj) (with-access::box-set!/Cinfo o (loc) (set! loc v)))

;; box-ref/Cinfo
(define-inline (make-box-ref/Cinfo::box-ref/Cinfo loc1503::obj type1504::type side-effect1505::obj key1506::obj var1507::var vtype1508::type approx1509::approx) (instantiate::box-ref/Cinfo (loc loc1503) (type type1504) (side-effect side-effect1505) (key key1506) (var var1507) (vtype vtype1508) (approx approx1509)))
(define-inline (box-ref/Cinfo?::bool obj::obj) ((@ isa? __object) obj (@ box-ref/Cinfo cfa_info)))
(define (box-ref/Cinfo-nil::box-ref/Cinfo) (class-nil (@ box-ref/Cinfo cfa_info)))
(define-inline (box-ref/Cinfo-approx::approx o::box-ref/Cinfo) (with-access::box-ref/Cinfo o (approx) approx))
(define-inline (box-ref/Cinfo-approx-set! o::box-ref/Cinfo v::approx) (with-access::box-ref/Cinfo o (approx) (set! approx v)))
(define-inline (box-ref/Cinfo-vtype::type o::box-ref/Cinfo) (with-access::box-ref/Cinfo o (vtype) vtype))
(define-inline (box-ref/Cinfo-vtype-set! o::box-ref/Cinfo v::type) (with-access::box-ref/Cinfo o (vtype) (set! vtype v)))
(define-inline (box-ref/Cinfo-var::var o::box-ref/Cinfo) (with-access::box-ref/Cinfo o (var) var))
(define-inline (box-ref/Cinfo-var-set! o::box-ref/Cinfo v::var) (with-access::box-ref/Cinfo o (var) (set! var v)))
(define-inline (box-ref/Cinfo-key::obj o::box-ref/Cinfo) (with-access::box-ref/Cinfo o (key) key))
(define-inline (box-ref/Cinfo-key-set! o::box-ref/Cinfo v::obj) (with-access::box-ref/Cinfo o (key) (set! key v)))
(define-inline (box-ref/Cinfo-side-effect::obj o::box-ref/Cinfo) (with-access::box-ref/Cinfo o (side-effect) side-effect))
(define-inline (box-ref/Cinfo-side-effect-set! o::box-ref/Cinfo v::obj) (with-access::box-ref/Cinfo o (side-effect) (set! side-effect v)))
(define-inline (box-ref/Cinfo-type::type o::box-ref/Cinfo) (with-access::box-ref/Cinfo o (type) type))
(define-inline (box-ref/Cinfo-type-set! o::box-ref/Cinfo v::type) (with-access::box-ref/Cinfo o (type) (set! type v)))
(define-inline (box-ref/Cinfo-loc::obj o::box-ref/Cinfo) (with-access::box-ref/Cinfo o (loc) loc))
(define-inline (box-ref/Cinfo-loc-set! o::box-ref/Cinfo v::obj) (with-access::box-ref/Cinfo o (loc) (set! loc v)))

;; box-set!/O-Cinfo
(define-inline (make-box-set!/O-Cinfo::box-set!/O-Cinfo loc1496::obj type1497::type var1498::var value1499::node vtype1500::type approx1501::approx) (instantiate::box-set!/O-Cinfo (loc loc1496) (type type1497) (var var1498) (value value1499) (vtype vtype1500) (approx approx1501)))
(define-inline (box-set!/O-Cinfo?::bool obj::obj) ((@ isa? __object) obj (@ box-set!/O-Cinfo cfa_info)))
(define (box-set!/O-Cinfo-nil::box-set!/O-Cinfo) (class-nil (@ box-set!/O-Cinfo cfa_info)))
(define-inline (box-set!/O-Cinfo-approx::approx o::box-set!/O-Cinfo) (with-access::box-set!/O-Cinfo o (approx) approx))
(define-inline (box-set!/O-Cinfo-approx-set! o::box-set!/O-Cinfo v::approx) (with-access::box-set!/O-Cinfo o (approx) (set! approx v)))
(define-inline (box-set!/O-Cinfo-vtype::type o::box-set!/O-Cinfo) (with-access::box-set!/O-Cinfo o (vtype) vtype))
(define-inline (box-set!/O-Cinfo-vtype-set! o::box-set!/O-Cinfo v::type) (with-access::box-set!/O-Cinfo o (vtype) (set! vtype v)))
(define-inline (box-set!/O-Cinfo-value::node o::box-set!/O-Cinfo) (with-access::box-set!/O-Cinfo o (value) value))
(define-inline (box-set!/O-Cinfo-value-set! o::box-set!/O-Cinfo v::node) (with-access::box-set!/O-Cinfo o (value) (set! value v)))
(define-inline (box-set!/O-Cinfo-var::var o::box-set!/O-Cinfo) (with-access::box-set!/O-Cinfo o (var) var))
(define-inline (box-set!/O-Cinfo-var-set! o::box-set!/O-Cinfo v::var) (with-access::box-set!/O-Cinfo o (var) (set! var v)))
(define-inline (box-set!/O-Cinfo-type::type o::box-set!/O-Cinfo) (with-access::box-set!/O-Cinfo o (type) type))
(define-inline (box-set!/O-Cinfo-type-set! o::box-set!/O-Cinfo v::type) (with-access::box-set!/O-Cinfo o (type) (set! type v)))
(define-inline (box-set!/O-Cinfo-loc::obj o::box-set!/O-Cinfo) (with-access::box-set!/O-Cinfo o (loc) loc))
(define-inline (box-set!/O-Cinfo-loc-set! o::box-set!/O-Cinfo v::obj) (with-access::box-set!/O-Cinfo o (loc) (set! loc v)))

;; box-ref/O-Cinfo
(define-inline (make-box-ref/O-Cinfo::box-ref/O-Cinfo loc1486::obj type1487::type side-effect1488::obj key1489::obj var1491::var vtype1493::type approx1494::approx) (instantiate::box-ref/O-Cinfo (loc loc1486) (type type1487) (side-effect side-effect1488) (key key1489) (var var1491) (vtype vtype1493) (approx approx1494)))
(define-inline (box-ref/O-Cinfo?::bool obj::obj) ((@ isa? __object) obj (@ box-ref/O-Cinfo cfa_info)))
(define (box-ref/O-Cinfo-nil::box-ref/O-Cinfo) (class-nil (@ box-ref/O-Cinfo cfa_info)))
(define-inline (box-ref/O-Cinfo-approx::approx o::box-ref/O-Cinfo) (with-access::box-ref/O-Cinfo o (approx) approx))
(define-inline (box-ref/O-Cinfo-approx-set! o::box-ref/O-Cinfo v::approx) (with-access::box-ref/O-Cinfo o (approx) (set! approx v)))
(define-inline (box-ref/O-Cinfo-vtype::type o::box-ref/O-Cinfo) (with-access::box-ref/O-Cinfo o (vtype) vtype))
(define-inline (box-ref/O-Cinfo-vtype-set! o::box-ref/O-Cinfo v::type) (with-access::box-ref/O-Cinfo o (vtype) (set! vtype v)))
(define-inline (box-ref/O-Cinfo-var::var o::box-ref/O-Cinfo) (with-access::box-ref/O-Cinfo o (var) var))
(define-inline (box-ref/O-Cinfo-var-set! o::box-ref/O-Cinfo v::var) (with-access::box-ref/O-Cinfo o (var) (set! var v)))
(define-inline (box-ref/O-Cinfo-key::obj o::box-ref/O-Cinfo) (with-access::box-ref/O-Cinfo o (key) key))
(define-inline (box-ref/O-Cinfo-key-set! o::box-ref/O-Cinfo v::obj) (with-access::box-ref/O-Cinfo o (key) (set! key v)))
(define-inline (box-ref/O-Cinfo-side-effect::obj o::box-ref/O-Cinfo) (with-access::box-ref/O-Cinfo o (side-effect) side-effect))
(define-inline (box-ref/O-Cinfo-side-effect-set! o::box-ref/O-Cinfo v::obj) (with-access::box-ref/O-Cinfo o (side-effect) (set! side-effect v)))
(define-inline (box-ref/O-Cinfo-type::type o::box-ref/O-Cinfo) (with-access::box-ref/O-Cinfo o (type) type))
(define-inline (box-ref/O-Cinfo-type-set! o::box-ref/O-Cinfo v::type) (with-access::box-ref/O-Cinfo o (type) (set! type v)))
(define-inline (box-ref/O-Cinfo-loc::obj o::box-ref/O-Cinfo) (with-access::box-ref/O-Cinfo o (loc) loc))
(define-inline (box-ref/O-Cinfo-loc-set! o::box-ref/O-Cinfo v::obj) (with-access::box-ref/O-Cinfo o (loc) (set! loc v)))
))
