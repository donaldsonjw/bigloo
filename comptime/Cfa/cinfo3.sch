;; ==========================================================
;; Class accessors
;; Bigloo (4.2c)
;; Inria -- Sophia Antipolis     Fri Nov 6 10:55:25 CET 2015 
;; (bigloo.new -classgen Cfa/cinfo3.scm)
;; ==========================================================

;; The directives
(directives

;; pragma/Cinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-pragma/Cinfo::pragma/Cinfo loc1457::obj type1458::type side-effect1459::obj key1460::obj expr*1461::pair-nil effect1462::obj format1463::bstring approx1464::approx)
    (inline pragma/Cinfo?::bool ::obj)
    (pragma/Cinfo-nil::pragma/Cinfo)
    (inline pragma/Cinfo-approx::approx ::pragma/Cinfo)
    (inline pragma/Cinfo-format::bstring ::pragma/Cinfo)
    (inline pragma/Cinfo-effect::obj ::pragma/Cinfo)
    (inline pragma/Cinfo-effect-set! ::pragma/Cinfo ::obj)
    (inline pragma/Cinfo-expr*::pair-nil ::pragma/Cinfo)
    (inline pragma/Cinfo-expr*-set! ::pragma/Cinfo ::pair-nil)
    (inline pragma/Cinfo-key::obj ::pragma/Cinfo)
    (inline pragma/Cinfo-key-set! ::pragma/Cinfo ::obj)
    (inline pragma/Cinfo-side-effect::obj ::pragma/Cinfo)
    (inline pragma/Cinfo-side-effect-set! ::pragma/Cinfo ::obj)
    (inline pragma/Cinfo-type::type ::pragma/Cinfo)
    (inline pragma/Cinfo-type-set! ::pragma/Cinfo ::type)
    (inline pragma/Cinfo-loc::obj ::pragma/Cinfo))))

;; getfield/Cinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-getfield/Cinfo::getfield/Cinfo loc1445::obj type1446::type side-effect1447::obj key1448::obj expr*1449::pair-nil effect1450::obj c-format1451::bstring fname1452::bstring ftype1453::type otype1454::type approx1455::approx)
    (inline getfield/Cinfo?::bool ::obj)
    (getfield/Cinfo-nil::getfield/Cinfo)
    (inline getfield/Cinfo-approx::approx ::getfield/Cinfo)
    (inline getfield/Cinfo-otype::type ::getfield/Cinfo)
    (inline getfield/Cinfo-otype-set! ::getfield/Cinfo ::type)
    (inline getfield/Cinfo-ftype::type ::getfield/Cinfo)
    (inline getfield/Cinfo-ftype-set! ::getfield/Cinfo ::type)
    (inline getfield/Cinfo-fname::bstring ::getfield/Cinfo)
    (inline getfield/Cinfo-c-format::bstring ::getfield/Cinfo)
    (inline getfield/Cinfo-effect::obj ::getfield/Cinfo)
    (inline getfield/Cinfo-effect-set! ::getfield/Cinfo ::obj)
    (inline getfield/Cinfo-expr*::pair-nil ::getfield/Cinfo)
    (inline getfield/Cinfo-expr*-set! ::getfield/Cinfo ::pair-nil)
    (inline getfield/Cinfo-key::obj ::getfield/Cinfo)
    (inline getfield/Cinfo-key-set! ::getfield/Cinfo ::obj)
    (inline getfield/Cinfo-side-effect::obj ::getfield/Cinfo)
    (inline getfield/Cinfo-side-effect-set! ::getfield/Cinfo ::obj)
    (inline getfield/Cinfo-type::type ::getfield/Cinfo)
    (inline getfield/Cinfo-type-set! ::getfield/Cinfo ::type)
    (inline getfield/Cinfo-loc::obj ::getfield/Cinfo))))

;; setfield/Cinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-setfield/Cinfo::setfield/Cinfo loc1433::obj type1434::type side-effect1435::obj key1436::obj expr*1437::pair-nil effect1438::obj c-format1439::bstring fname1440::bstring ftype1441::type otype1442::type approx1443::approx)
    (inline setfield/Cinfo?::bool ::obj)
    (setfield/Cinfo-nil::setfield/Cinfo)
    (inline setfield/Cinfo-approx::approx ::setfield/Cinfo)
    (inline setfield/Cinfo-otype::type ::setfield/Cinfo)
    (inline setfield/Cinfo-otype-set! ::setfield/Cinfo ::type)
    (inline setfield/Cinfo-ftype::type ::setfield/Cinfo)
    (inline setfield/Cinfo-ftype-set! ::setfield/Cinfo ::type)
    (inline setfield/Cinfo-fname::bstring ::setfield/Cinfo)
    (inline setfield/Cinfo-c-format::bstring ::setfield/Cinfo)
    (inline setfield/Cinfo-effect::obj ::setfield/Cinfo)
    (inline setfield/Cinfo-effect-set! ::setfield/Cinfo ::obj)
    (inline setfield/Cinfo-expr*::pair-nil ::setfield/Cinfo)
    (inline setfield/Cinfo-expr*-set! ::setfield/Cinfo ::pair-nil)
    (inline setfield/Cinfo-key::obj ::setfield/Cinfo)
    (inline setfield/Cinfo-key-set! ::setfield/Cinfo ::obj)
    (inline setfield/Cinfo-side-effect::obj ::setfield/Cinfo)
    (inline setfield/Cinfo-side-effect-set! ::setfield/Cinfo ::obj)
    (inline setfield/Cinfo-type::type ::setfield/Cinfo)
    (inline setfield/Cinfo-type-set! ::setfield/Cinfo ::type)
    (inline setfield/Cinfo-loc::obj ::setfield/Cinfo))))

;; new/Cinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-new/Cinfo::new/Cinfo loc1423::obj type1424::type side-effect1425::obj key1426::obj expr*1427::pair-nil effect1428::obj c-format1429::bstring args-type1430::pair-nil approx1431::approx)
    (inline new/Cinfo?::bool ::obj)
    (new/Cinfo-nil::new/Cinfo)
    (inline new/Cinfo-approx::approx ::new/Cinfo)
    (inline new/Cinfo-args-type::pair-nil ::new/Cinfo)
    (inline new/Cinfo-args-type-set! ::new/Cinfo ::pair-nil)
    (inline new/Cinfo-c-format::bstring ::new/Cinfo)
    (inline new/Cinfo-effect::obj ::new/Cinfo)
    (inline new/Cinfo-effect-set! ::new/Cinfo ::obj)
    (inline new/Cinfo-expr*::pair-nil ::new/Cinfo)
    (inline new/Cinfo-expr*-set! ::new/Cinfo ::pair-nil)
    (inline new/Cinfo-key::obj ::new/Cinfo)
    (inline new/Cinfo-key-set! ::new/Cinfo ::obj)
    (inline new/Cinfo-side-effect::obj ::new/Cinfo)
    (inline new/Cinfo-side-effect-set! ::new/Cinfo ::obj)
    (inline new/Cinfo-type::type ::new/Cinfo)
    (inline new/Cinfo-type-set! ::new/Cinfo ::type)
    (inline new/Cinfo-loc::obj ::new/Cinfo))))

;; instanceof/Cinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-instanceof/Cinfo::instanceof/Cinfo loc1413::obj type1414::type side-effect1415::obj key1416::obj expr*1417::pair-nil effect1418::obj c-format1419::bstring class1420::type approx1421::approx)
    (inline instanceof/Cinfo?::bool ::obj)
    (instanceof/Cinfo-nil::instanceof/Cinfo)
    (inline instanceof/Cinfo-approx::approx ::instanceof/Cinfo)
    (inline instanceof/Cinfo-class::type ::instanceof/Cinfo)
    (inline instanceof/Cinfo-class-set! ::instanceof/Cinfo ::type)
    (inline instanceof/Cinfo-c-format::bstring ::instanceof/Cinfo)
    (inline instanceof/Cinfo-effect::obj ::instanceof/Cinfo)
    (inline instanceof/Cinfo-effect-set! ::instanceof/Cinfo ::obj)
    (inline instanceof/Cinfo-expr*::pair-nil ::instanceof/Cinfo)
    (inline instanceof/Cinfo-expr*-set! ::instanceof/Cinfo ::pair-nil)
    (inline instanceof/Cinfo-key::obj ::instanceof/Cinfo)
    (inline instanceof/Cinfo-key-set! ::instanceof/Cinfo ::obj)
    (inline instanceof/Cinfo-side-effect::obj ::instanceof/Cinfo)
    (inline instanceof/Cinfo-side-effect-set! ::instanceof/Cinfo ::obj)
    (inline instanceof/Cinfo-type::type ::instanceof/Cinfo)
    (inline instanceof/Cinfo-type-set! ::instanceof/Cinfo ::type)
    (inline instanceof/Cinfo-loc::obj ::instanceof/Cinfo))))

;; cast-null/Cinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-cast-null/Cinfo::cast-null/Cinfo loc1404::obj type1405::type side-effect1406::obj key1407::obj expr*1408::pair-nil effect1409::obj c-format1410::bstring approx1411::approx)
    (inline cast-null/Cinfo?::bool ::obj)
    (cast-null/Cinfo-nil::cast-null/Cinfo)
    (inline cast-null/Cinfo-approx::approx ::cast-null/Cinfo)
    (inline cast-null/Cinfo-c-format::bstring ::cast-null/Cinfo)
    (inline cast-null/Cinfo-effect::obj ::cast-null/Cinfo)
    (inline cast-null/Cinfo-effect-set! ::cast-null/Cinfo ::obj)
    (inline cast-null/Cinfo-expr*::pair-nil ::cast-null/Cinfo)
    (inline cast-null/Cinfo-expr*-set! ::cast-null/Cinfo ::pair-nil)
    (inline cast-null/Cinfo-key::obj ::cast-null/Cinfo)
    (inline cast-null/Cinfo-key-set! ::cast-null/Cinfo ::obj)
    (inline cast-null/Cinfo-side-effect::obj ::cast-null/Cinfo)
    (inline cast-null/Cinfo-side-effect-set! ::cast-null/Cinfo ::obj)
    (inline cast-null/Cinfo-type::type ::cast-null/Cinfo)
    (inline cast-null/Cinfo-type-set! ::cast-null/Cinfo ::type)
    (inline cast-null/Cinfo-loc::obj ::cast-null/Cinfo))))

;; vref/Cinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-vref/Cinfo::vref/Cinfo loc1390::obj type1391::type side-effect1392::obj key1393::obj expr*1394::pair-nil effect1395::obj c-format1396::bstring ftype1397::type otype1398::type vtype1399::type unsafe1400::bool approx1401::approx tvector?1402::bool)
    (inline vref/Cinfo?::bool ::obj)
    (vref/Cinfo-nil::vref/Cinfo)
    (inline vref/Cinfo-tvector?::bool ::vref/Cinfo)
    (inline vref/Cinfo-tvector?-set! ::vref/Cinfo ::bool)
    (inline vref/Cinfo-approx::approx ::vref/Cinfo)
    (inline vref/Cinfo-unsafe::bool ::vref/Cinfo)
    (inline vref/Cinfo-vtype::type ::vref/Cinfo)
    (inline vref/Cinfo-vtype-set! ::vref/Cinfo ::type)
    (inline vref/Cinfo-otype::type ::vref/Cinfo)
    (inline vref/Cinfo-otype-set! ::vref/Cinfo ::type)
    (inline vref/Cinfo-ftype::type ::vref/Cinfo)
    (inline vref/Cinfo-ftype-set! ::vref/Cinfo ::type)
    (inline vref/Cinfo-c-format::bstring ::vref/Cinfo)
    (inline vref/Cinfo-effect::obj ::vref/Cinfo)
    (inline vref/Cinfo-effect-set! ::vref/Cinfo ::obj)
    (inline vref/Cinfo-expr*::pair-nil ::vref/Cinfo)
    (inline vref/Cinfo-expr*-set! ::vref/Cinfo ::pair-nil)
    (inline vref/Cinfo-key::obj ::vref/Cinfo)
    (inline vref/Cinfo-key-set! ::vref/Cinfo ::obj)
    (inline vref/Cinfo-side-effect::obj ::vref/Cinfo)
    (inline vref/Cinfo-side-effect-set! ::vref/Cinfo ::obj)
    (inline vref/Cinfo-type::type ::vref/Cinfo)
    (inline vref/Cinfo-type-set! ::vref/Cinfo ::type)
    (inline vref/Cinfo-loc::obj ::vref/Cinfo))))

;; vset!/Cinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-vset!/Cinfo::vset!/Cinfo loc1375::obj type1376::type side-effect1377::obj key1378::obj expr*1379::pair-nil effect1380::obj c-format1381::bstring ftype1382::type otype1383::type vtype1384::type unsafe1385::bool approx1387::approx tvector?1388::bool)
    (inline vset!/Cinfo?::bool ::obj)
    (vset!/Cinfo-nil::vset!/Cinfo)
    (inline vset!/Cinfo-tvector?::bool ::vset!/Cinfo)
    (inline vset!/Cinfo-tvector?-set! ::vset!/Cinfo ::bool)
    (inline vset!/Cinfo-approx::approx ::vset!/Cinfo)
    (inline vset!/Cinfo-unsafe::bool ::vset!/Cinfo)
    (inline vset!/Cinfo-vtype::type ::vset!/Cinfo)
    (inline vset!/Cinfo-vtype-set! ::vset!/Cinfo ::type)
    (inline vset!/Cinfo-otype::type ::vset!/Cinfo)
    (inline vset!/Cinfo-otype-set! ::vset!/Cinfo ::type)
    (inline vset!/Cinfo-ftype::type ::vset!/Cinfo)
    (inline vset!/Cinfo-ftype-set! ::vset!/Cinfo ::type)
    (inline vset!/Cinfo-c-format::bstring ::vset!/Cinfo)
    (inline vset!/Cinfo-effect::obj ::vset!/Cinfo)
    (inline vset!/Cinfo-effect-set! ::vset!/Cinfo ::obj)
    (inline vset!/Cinfo-expr*::pair-nil ::vset!/Cinfo)
    (inline vset!/Cinfo-expr*-set! ::vset!/Cinfo ::pair-nil)
    (inline vset!/Cinfo-key::obj ::vset!/Cinfo)
    (inline vset!/Cinfo-key-set! ::vset!/Cinfo ::obj)
    (inline vset!/Cinfo-side-effect::obj ::vset!/Cinfo)
    (inline vset!/Cinfo-side-effect-set! ::vset!/Cinfo ::obj)
    (inline vset!/Cinfo-type::type ::vset!/Cinfo)
    (inline vset!/Cinfo-type-set! ::vset!/Cinfo ::type)
    (inline vset!/Cinfo-loc::obj ::vset!/Cinfo))))

;; vlength/Cinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-vlength/Cinfo::vlength/Cinfo loc1364::obj type1365::type side-effect1366::obj key1367::obj expr*1368::pair-nil effect1369::obj c-format1370::bstring vtype1371::type approx1372::approx tvector?1373::bool)
    (inline vlength/Cinfo?::bool ::obj)
    (vlength/Cinfo-nil::vlength/Cinfo)
    (inline vlength/Cinfo-tvector?::bool ::vlength/Cinfo)
    (inline vlength/Cinfo-tvector?-set! ::vlength/Cinfo ::bool)
    (inline vlength/Cinfo-approx::approx ::vlength/Cinfo)
    (inline vlength/Cinfo-vtype::type ::vlength/Cinfo)
    (inline vlength/Cinfo-vtype-set! ::vlength/Cinfo ::type)
    (inline vlength/Cinfo-c-format::bstring ::vlength/Cinfo)
    (inline vlength/Cinfo-effect::obj ::vlength/Cinfo)
    (inline vlength/Cinfo-effect-set! ::vlength/Cinfo ::obj)
    (inline vlength/Cinfo-expr*::pair-nil ::vlength/Cinfo)
    (inline vlength/Cinfo-expr*-set! ::vlength/Cinfo ::pair-nil)
    (inline vlength/Cinfo-key::obj ::vlength/Cinfo)
    (inline vlength/Cinfo-key-set! ::vlength/Cinfo ::obj)
    (inline vlength/Cinfo-side-effect::obj ::vlength/Cinfo)
    (inline vlength/Cinfo-side-effect-set! ::vlength/Cinfo ::obj)
    (inline vlength/Cinfo-type::type ::vlength/Cinfo)
    (inline vlength/Cinfo-type-set! ::vlength/Cinfo ::type)
    (inline vlength/Cinfo-loc::obj ::vlength/Cinfo))))

;; pre-valloc/Cinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-pre-valloc/Cinfo::pre-valloc/Cinfo loc1353::obj type1354::type side-effect1355::obj key1356::obj expr*1357::pair-nil effect1358::obj c-format1359::bstring ftype1360::type otype1361::type owner1362::variable)
    (inline pre-valloc/Cinfo?::bool ::obj)
    (pre-valloc/Cinfo-nil::pre-valloc/Cinfo)
    (inline pre-valloc/Cinfo-owner::variable ::pre-valloc/Cinfo)
    (inline pre-valloc/Cinfo-otype::type ::pre-valloc/Cinfo)
    (inline pre-valloc/Cinfo-otype-set! ::pre-valloc/Cinfo ::type)
    (inline pre-valloc/Cinfo-ftype::type ::pre-valloc/Cinfo)
    (inline pre-valloc/Cinfo-ftype-set! ::pre-valloc/Cinfo ::type)
    (inline pre-valloc/Cinfo-c-format::bstring ::pre-valloc/Cinfo)
    (inline pre-valloc/Cinfo-effect::obj ::pre-valloc/Cinfo)
    (inline pre-valloc/Cinfo-effect-set! ::pre-valloc/Cinfo ::obj)
    (inline pre-valloc/Cinfo-expr*::pair-nil ::pre-valloc/Cinfo)
    (inline pre-valloc/Cinfo-expr*-set! ::pre-valloc/Cinfo ::pair-nil)
    (inline pre-valloc/Cinfo-key::obj ::pre-valloc/Cinfo)
    (inline pre-valloc/Cinfo-key-set! ::pre-valloc/Cinfo ::obj)
    (inline pre-valloc/Cinfo-side-effect::obj ::pre-valloc/Cinfo)
    (inline pre-valloc/Cinfo-side-effect-set! ::pre-valloc/Cinfo ::obj)
    (inline pre-valloc/Cinfo-type::type ::pre-valloc/Cinfo)
    (inline pre-valloc/Cinfo-type-set! ::pre-valloc/Cinfo ::type)
    (inline pre-valloc/Cinfo-loc::obj ::pre-valloc/Cinfo))))

;; valloc/Cinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-valloc/Cinfo::valloc/Cinfo loc1342::obj type1343::type side-effect1344::obj key1345::obj expr*1346::pair-nil effect1347::obj c-format1348::bstring ftype1349::type otype1350::type approx1351::approx)
    (inline valloc/Cinfo?::bool ::obj)
    (valloc/Cinfo-nil::valloc/Cinfo)
    (inline valloc/Cinfo-approx::approx ::valloc/Cinfo)
    (inline valloc/Cinfo-otype::type ::valloc/Cinfo)
    (inline valloc/Cinfo-otype-set! ::valloc/Cinfo ::type)
    (inline valloc/Cinfo-ftype::type ::valloc/Cinfo)
    (inline valloc/Cinfo-ftype-set! ::valloc/Cinfo ::type)
    (inline valloc/Cinfo-c-format::bstring ::valloc/Cinfo)
    (inline valloc/Cinfo-effect::obj ::valloc/Cinfo)
    (inline valloc/Cinfo-effect-set! ::valloc/Cinfo ::obj)
    (inline valloc/Cinfo-expr*::pair-nil ::valloc/Cinfo)
    (inline valloc/Cinfo-expr*-set! ::valloc/Cinfo ::pair-nil)
    (inline valloc/Cinfo-key::obj ::valloc/Cinfo)
    (inline valloc/Cinfo-key-set! ::valloc/Cinfo ::obj)
    (inline valloc/Cinfo-side-effect::obj ::valloc/Cinfo)
    (inline valloc/Cinfo-side-effect-set! ::valloc/Cinfo ::obj)
    (inline valloc/Cinfo-type::type ::valloc/Cinfo)
    (inline valloc/Cinfo-type-set! ::valloc/Cinfo ::type)
    (inline valloc/Cinfo-loc::obj ::valloc/Cinfo))))

;; valloc/Cinfo+optim
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-valloc/Cinfo+optim::valloc/Cinfo+optim loc1325::obj type1326::type side-effect1327::obj key1328::obj expr*1329::pair-nil effect1330::obj c-format1331::bstring ftype1332::type otype1333::type approx1334::approx value-approx1335::approx lost-stamp1336::long owner1337::variable stackable?1338::bool stack-stamp1339::obj seen?1340::bool)
    (inline valloc/Cinfo+optim?::bool ::obj)
    (valloc/Cinfo+optim-nil::valloc/Cinfo+optim)
    (inline valloc/Cinfo+optim-seen?::bool ::valloc/Cinfo+optim)
    (inline valloc/Cinfo+optim-seen?-set! ::valloc/Cinfo+optim ::bool)
    (inline valloc/Cinfo+optim-stack-stamp::obj ::valloc/Cinfo+optim)
    (inline valloc/Cinfo+optim-stack-stamp-set! ::valloc/Cinfo+optim ::obj)
    (inline valloc/Cinfo+optim-stackable?::bool ::valloc/Cinfo+optim)
    (inline valloc/Cinfo+optim-stackable?-set! ::valloc/Cinfo+optim ::bool)
    (inline valloc/Cinfo+optim-owner::variable ::valloc/Cinfo+optim)
    (inline valloc/Cinfo+optim-lost-stamp::long ::valloc/Cinfo+optim)
    (inline valloc/Cinfo+optim-lost-stamp-set! ::valloc/Cinfo+optim ::long)
    (inline valloc/Cinfo+optim-value-approx::approx ::valloc/Cinfo+optim)
    (inline valloc/Cinfo+optim-approx::approx ::valloc/Cinfo+optim)
    (inline valloc/Cinfo+optim-approx-set! ::valloc/Cinfo+optim ::approx)
    (inline valloc/Cinfo+optim-otype::type ::valloc/Cinfo+optim)
    (inline valloc/Cinfo+optim-otype-set! ::valloc/Cinfo+optim ::type)
    (inline valloc/Cinfo+optim-ftype::type ::valloc/Cinfo+optim)
    (inline valloc/Cinfo+optim-ftype-set! ::valloc/Cinfo+optim ::type)
    (inline valloc/Cinfo+optim-c-format::bstring ::valloc/Cinfo+optim)
    (inline valloc/Cinfo+optim-effect::obj ::valloc/Cinfo+optim)
    (inline valloc/Cinfo+optim-effect-set! ::valloc/Cinfo+optim ::obj)
    (inline valloc/Cinfo+optim-expr*::pair-nil ::valloc/Cinfo+optim)
    (inline valloc/Cinfo+optim-expr*-set! ::valloc/Cinfo+optim ::pair-nil)
    (inline valloc/Cinfo+optim-key::obj ::valloc/Cinfo+optim)
    (inline valloc/Cinfo+optim-key-set! ::valloc/Cinfo+optim ::obj)
    (inline valloc/Cinfo+optim-side-effect::obj ::valloc/Cinfo+optim)
    (inline valloc/Cinfo+optim-side-effect-set! ::valloc/Cinfo+optim ::obj)
    (inline valloc/Cinfo+optim-type::type ::valloc/Cinfo+optim)
    (inline valloc/Cinfo+optim-type-set! ::valloc/Cinfo+optim ::type)
    (inline valloc/Cinfo+optim-loc::obj ::valloc/Cinfo+optim)))))

;; The definitions
(cond-expand (bigloo-class-sans
;; pragma/Cinfo
(define-inline (make-pragma/Cinfo::pragma/Cinfo loc1457::obj type1458::type side-effect1459::obj key1460::obj expr*1461::pair-nil effect1462::obj format1463::bstring approx1464::approx) (instantiate::pragma/Cinfo (loc loc1457) (type type1458) (side-effect side-effect1459) (key key1460) (expr* expr*1461) (effect effect1462) (format format1463) (approx approx1464)))
(define-inline (pragma/Cinfo?::bool obj::obj) ((@ isa? __object) obj (@ pragma/Cinfo cfa_info3)))
(define (pragma/Cinfo-nil::pragma/Cinfo) (class-nil (@ pragma/Cinfo cfa_info3)))
(define-inline (pragma/Cinfo-approx::approx o::pragma/Cinfo) (-> |#!bigloo_wallow| o approx))
(define-inline (pragma/Cinfo-approx-set! o::pragma/Cinfo v::approx) (set! (-> |#!bigloo_wallow| o approx) v))
(define-inline (pragma/Cinfo-format::bstring o::pragma/Cinfo) (-> |#!bigloo_wallow| o format))
(define-inline (pragma/Cinfo-format-set! o::pragma/Cinfo v::bstring) (set! (-> |#!bigloo_wallow| o format) v))
(define-inline (pragma/Cinfo-effect::obj o::pragma/Cinfo) (-> |#!bigloo_wallow| o effect))
(define-inline (pragma/Cinfo-effect-set! o::pragma/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o effect) v))
(define-inline (pragma/Cinfo-expr*::pair-nil o::pragma/Cinfo) (-> |#!bigloo_wallow| o expr*))
(define-inline (pragma/Cinfo-expr*-set! o::pragma/Cinfo v::pair-nil) (set! (-> |#!bigloo_wallow| o expr*) v))
(define-inline (pragma/Cinfo-key::obj o::pragma/Cinfo) (-> |#!bigloo_wallow| o key))
(define-inline (pragma/Cinfo-key-set! o::pragma/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o key) v))
(define-inline (pragma/Cinfo-side-effect::obj o::pragma/Cinfo) (-> |#!bigloo_wallow| o side-effect))
(define-inline (pragma/Cinfo-side-effect-set! o::pragma/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o side-effect) v))
(define-inline (pragma/Cinfo-type::type o::pragma/Cinfo) (-> |#!bigloo_wallow| o type))
(define-inline (pragma/Cinfo-type-set! o::pragma/Cinfo v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (pragma/Cinfo-loc::obj o::pragma/Cinfo) (-> |#!bigloo_wallow| o loc))
(define-inline (pragma/Cinfo-loc-set! o::pragma/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; getfield/Cinfo
(define-inline (make-getfield/Cinfo::getfield/Cinfo loc1445::obj type1446::type side-effect1447::obj key1448::obj expr*1449::pair-nil effect1450::obj c-format1451::bstring fname1452::bstring ftype1453::type otype1454::type approx1455::approx) (instantiate::getfield/Cinfo (loc loc1445) (type type1446) (side-effect side-effect1447) (key key1448) (expr* expr*1449) (effect effect1450) (c-format c-format1451) (fname fname1452) (ftype ftype1453) (otype otype1454) (approx approx1455)))
(define-inline (getfield/Cinfo?::bool obj::obj) ((@ isa? __object) obj (@ getfield/Cinfo cfa_info3)))
(define (getfield/Cinfo-nil::getfield/Cinfo) (class-nil (@ getfield/Cinfo cfa_info3)))
(define-inline (getfield/Cinfo-approx::approx o::getfield/Cinfo) (-> |#!bigloo_wallow| o approx))
(define-inline (getfield/Cinfo-approx-set! o::getfield/Cinfo v::approx) (set! (-> |#!bigloo_wallow| o approx) v))
(define-inline (getfield/Cinfo-otype::type o::getfield/Cinfo) (-> |#!bigloo_wallow| o otype))
(define-inline (getfield/Cinfo-otype-set! o::getfield/Cinfo v::type) (set! (-> |#!bigloo_wallow| o otype) v))
(define-inline (getfield/Cinfo-ftype::type o::getfield/Cinfo) (-> |#!bigloo_wallow| o ftype))
(define-inline (getfield/Cinfo-ftype-set! o::getfield/Cinfo v::type) (set! (-> |#!bigloo_wallow| o ftype) v))
(define-inline (getfield/Cinfo-fname::bstring o::getfield/Cinfo) (-> |#!bigloo_wallow| o fname))
(define-inline (getfield/Cinfo-fname-set! o::getfield/Cinfo v::bstring) (set! (-> |#!bigloo_wallow| o fname) v))
(define-inline (getfield/Cinfo-c-format::bstring o::getfield/Cinfo) (-> |#!bigloo_wallow| o c-format))
(define-inline (getfield/Cinfo-c-format-set! o::getfield/Cinfo v::bstring) (set! (-> |#!bigloo_wallow| o c-format) v))
(define-inline (getfield/Cinfo-effect::obj o::getfield/Cinfo) (-> |#!bigloo_wallow| o effect))
(define-inline (getfield/Cinfo-effect-set! o::getfield/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o effect) v))
(define-inline (getfield/Cinfo-expr*::pair-nil o::getfield/Cinfo) (-> |#!bigloo_wallow| o expr*))
(define-inline (getfield/Cinfo-expr*-set! o::getfield/Cinfo v::pair-nil) (set! (-> |#!bigloo_wallow| o expr*) v))
(define-inline (getfield/Cinfo-key::obj o::getfield/Cinfo) (-> |#!bigloo_wallow| o key))
(define-inline (getfield/Cinfo-key-set! o::getfield/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o key) v))
(define-inline (getfield/Cinfo-side-effect::obj o::getfield/Cinfo) (-> |#!bigloo_wallow| o side-effect))
(define-inline (getfield/Cinfo-side-effect-set! o::getfield/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o side-effect) v))
(define-inline (getfield/Cinfo-type::type o::getfield/Cinfo) (-> |#!bigloo_wallow| o type))
(define-inline (getfield/Cinfo-type-set! o::getfield/Cinfo v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (getfield/Cinfo-loc::obj o::getfield/Cinfo) (-> |#!bigloo_wallow| o loc))
(define-inline (getfield/Cinfo-loc-set! o::getfield/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; setfield/Cinfo
(define-inline (make-setfield/Cinfo::setfield/Cinfo loc1433::obj type1434::type side-effect1435::obj key1436::obj expr*1437::pair-nil effect1438::obj c-format1439::bstring fname1440::bstring ftype1441::type otype1442::type approx1443::approx) (instantiate::setfield/Cinfo (loc loc1433) (type type1434) (side-effect side-effect1435) (key key1436) (expr* expr*1437) (effect effect1438) (c-format c-format1439) (fname fname1440) (ftype ftype1441) (otype otype1442) (approx approx1443)))
(define-inline (setfield/Cinfo?::bool obj::obj) ((@ isa? __object) obj (@ setfield/Cinfo cfa_info3)))
(define (setfield/Cinfo-nil::setfield/Cinfo) (class-nil (@ setfield/Cinfo cfa_info3)))
(define-inline (setfield/Cinfo-approx::approx o::setfield/Cinfo) (-> |#!bigloo_wallow| o approx))
(define-inline (setfield/Cinfo-approx-set! o::setfield/Cinfo v::approx) (set! (-> |#!bigloo_wallow| o approx) v))
(define-inline (setfield/Cinfo-otype::type o::setfield/Cinfo) (-> |#!bigloo_wallow| o otype))
(define-inline (setfield/Cinfo-otype-set! o::setfield/Cinfo v::type) (set! (-> |#!bigloo_wallow| o otype) v))
(define-inline (setfield/Cinfo-ftype::type o::setfield/Cinfo) (-> |#!bigloo_wallow| o ftype))
(define-inline (setfield/Cinfo-ftype-set! o::setfield/Cinfo v::type) (set! (-> |#!bigloo_wallow| o ftype) v))
(define-inline (setfield/Cinfo-fname::bstring o::setfield/Cinfo) (-> |#!bigloo_wallow| o fname))
(define-inline (setfield/Cinfo-fname-set! o::setfield/Cinfo v::bstring) (set! (-> |#!bigloo_wallow| o fname) v))
(define-inline (setfield/Cinfo-c-format::bstring o::setfield/Cinfo) (-> |#!bigloo_wallow| o c-format))
(define-inline (setfield/Cinfo-c-format-set! o::setfield/Cinfo v::bstring) (set! (-> |#!bigloo_wallow| o c-format) v))
(define-inline (setfield/Cinfo-effect::obj o::setfield/Cinfo) (-> |#!bigloo_wallow| o effect))
(define-inline (setfield/Cinfo-effect-set! o::setfield/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o effect) v))
(define-inline (setfield/Cinfo-expr*::pair-nil o::setfield/Cinfo) (-> |#!bigloo_wallow| o expr*))
(define-inline (setfield/Cinfo-expr*-set! o::setfield/Cinfo v::pair-nil) (set! (-> |#!bigloo_wallow| o expr*) v))
(define-inline (setfield/Cinfo-key::obj o::setfield/Cinfo) (-> |#!bigloo_wallow| o key))
(define-inline (setfield/Cinfo-key-set! o::setfield/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o key) v))
(define-inline (setfield/Cinfo-side-effect::obj o::setfield/Cinfo) (-> |#!bigloo_wallow| o side-effect))
(define-inline (setfield/Cinfo-side-effect-set! o::setfield/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o side-effect) v))
(define-inline (setfield/Cinfo-type::type o::setfield/Cinfo) (-> |#!bigloo_wallow| o type))
(define-inline (setfield/Cinfo-type-set! o::setfield/Cinfo v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (setfield/Cinfo-loc::obj o::setfield/Cinfo) (-> |#!bigloo_wallow| o loc))
(define-inline (setfield/Cinfo-loc-set! o::setfield/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; new/Cinfo
(define-inline (make-new/Cinfo::new/Cinfo loc1423::obj type1424::type side-effect1425::obj key1426::obj expr*1427::pair-nil effect1428::obj c-format1429::bstring args-type1430::pair-nil approx1431::approx) (instantiate::new/Cinfo (loc loc1423) (type type1424) (side-effect side-effect1425) (key key1426) (expr* expr*1427) (effect effect1428) (c-format c-format1429) (args-type args-type1430) (approx approx1431)))
(define-inline (new/Cinfo?::bool obj::obj) ((@ isa? __object) obj (@ new/Cinfo cfa_info3)))
(define (new/Cinfo-nil::new/Cinfo) (class-nil (@ new/Cinfo cfa_info3)))
(define-inline (new/Cinfo-approx::approx o::new/Cinfo) (-> |#!bigloo_wallow| o approx))
(define-inline (new/Cinfo-approx-set! o::new/Cinfo v::approx) (set! (-> |#!bigloo_wallow| o approx) v))
(define-inline (new/Cinfo-args-type::pair-nil o::new/Cinfo) (-> |#!bigloo_wallow| o args-type))
(define-inline (new/Cinfo-args-type-set! o::new/Cinfo v::pair-nil) (set! (-> |#!bigloo_wallow| o args-type) v))
(define-inline (new/Cinfo-c-format::bstring o::new/Cinfo) (-> |#!bigloo_wallow| o c-format))
(define-inline (new/Cinfo-c-format-set! o::new/Cinfo v::bstring) (set! (-> |#!bigloo_wallow| o c-format) v))
(define-inline (new/Cinfo-effect::obj o::new/Cinfo) (-> |#!bigloo_wallow| o effect))
(define-inline (new/Cinfo-effect-set! o::new/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o effect) v))
(define-inline (new/Cinfo-expr*::pair-nil o::new/Cinfo) (-> |#!bigloo_wallow| o expr*))
(define-inline (new/Cinfo-expr*-set! o::new/Cinfo v::pair-nil) (set! (-> |#!bigloo_wallow| o expr*) v))
(define-inline (new/Cinfo-key::obj o::new/Cinfo) (-> |#!bigloo_wallow| o key))
(define-inline (new/Cinfo-key-set! o::new/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o key) v))
(define-inline (new/Cinfo-side-effect::obj o::new/Cinfo) (-> |#!bigloo_wallow| o side-effect))
(define-inline (new/Cinfo-side-effect-set! o::new/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o side-effect) v))
(define-inline (new/Cinfo-type::type o::new/Cinfo) (-> |#!bigloo_wallow| o type))
(define-inline (new/Cinfo-type-set! o::new/Cinfo v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (new/Cinfo-loc::obj o::new/Cinfo) (-> |#!bigloo_wallow| o loc))
(define-inline (new/Cinfo-loc-set! o::new/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; instanceof/Cinfo
(define-inline (make-instanceof/Cinfo::instanceof/Cinfo loc1413::obj type1414::type side-effect1415::obj key1416::obj expr*1417::pair-nil effect1418::obj c-format1419::bstring class1420::type approx1421::approx) (instantiate::instanceof/Cinfo (loc loc1413) (type type1414) (side-effect side-effect1415) (key key1416) (expr* expr*1417) (effect effect1418) (c-format c-format1419) (class class1420) (approx approx1421)))
(define-inline (instanceof/Cinfo?::bool obj::obj) ((@ isa? __object) obj (@ instanceof/Cinfo cfa_info3)))
(define (instanceof/Cinfo-nil::instanceof/Cinfo) (class-nil (@ instanceof/Cinfo cfa_info3)))
(define-inline (instanceof/Cinfo-approx::approx o::instanceof/Cinfo) (-> |#!bigloo_wallow| o approx))
(define-inline (instanceof/Cinfo-approx-set! o::instanceof/Cinfo v::approx) (set! (-> |#!bigloo_wallow| o approx) v))
(define-inline (instanceof/Cinfo-class::type o::instanceof/Cinfo) (-> |#!bigloo_wallow| o class))
(define-inline (instanceof/Cinfo-class-set! o::instanceof/Cinfo v::type) (set! (-> |#!bigloo_wallow| o class) v))
(define-inline (instanceof/Cinfo-c-format::bstring o::instanceof/Cinfo) (-> |#!bigloo_wallow| o c-format))
(define-inline (instanceof/Cinfo-c-format-set! o::instanceof/Cinfo v::bstring) (set! (-> |#!bigloo_wallow| o c-format) v))
(define-inline (instanceof/Cinfo-effect::obj o::instanceof/Cinfo) (-> |#!bigloo_wallow| o effect))
(define-inline (instanceof/Cinfo-effect-set! o::instanceof/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o effect) v))
(define-inline (instanceof/Cinfo-expr*::pair-nil o::instanceof/Cinfo) (-> |#!bigloo_wallow| o expr*))
(define-inline (instanceof/Cinfo-expr*-set! o::instanceof/Cinfo v::pair-nil) (set! (-> |#!bigloo_wallow| o expr*) v))
(define-inline (instanceof/Cinfo-key::obj o::instanceof/Cinfo) (-> |#!bigloo_wallow| o key))
(define-inline (instanceof/Cinfo-key-set! o::instanceof/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o key) v))
(define-inline (instanceof/Cinfo-side-effect::obj o::instanceof/Cinfo) (-> |#!bigloo_wallow| o side-effect))
(define-inline (instanceof/Cinfo-side-effect-set! o::instanceof/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o side-effect) v))
(define-inline (instanceof/Cinfo-type::type o::instanceof/Cinfo) (-> |#!bigloo_wallow| o type))
(define-inline (instanceof/Cinfo-type-set! o::instanceof/Cinfo v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (instanceof/Cinfo-loc::obj o::instanceof/Cinfo) (-> |#!bigloo_wallow| o loc))
(define-inline (instanceof/Cinfo-loc-set! o::instanceof/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; cast-null/Cinfo
(define-inline (make-cast-null/Cinfo::cast-null/Cinfo loc1404::obj type1405::type side-effect1406::obj key1407::obj expr*1408::pair-nil effect1409::obj c-format1410::bstring approx1411::approx) (instantiate::cast-null/Cinfo (loc loc1404) (type type1405) (side-effect side-effect1406) (key key1407) (expr* expr*1408) (effect effect1409) (c-format c-format1410) (approx approx1411)))
(define-inline (cast-null/Cinfo?::bool obj::obj) ((@ isa? __object) obj (@ cast-null/Cinfo cfa_info3)))
(define (cast-null/Cinfo-nil::cast-null/Cinfo) (class-nil (@ cast-null/Cinfo cfa_info3)))
(define-inline (cast-null/Cinfo-approx::approx o::cast-null/Cinfo) (-> |#!bigloo_wallow| o approx))
(define-inline (cast-null/Cinfo-approx-set! o::cast-null/Cinfo v::approx) (set! (-> |#!bigloo_wallow| o approx) v))
(define-inline (cast-null/Cinfo-c-format::bstring o::cast-null/Cinfo) (-> |#!bigloo_wallow| o c-format))
(define-inline (cast-null/Cinfo-c-format-set! o::cast-null/Cinfo v::bstring) (set! (-> |#!bigloo_wallow| o c-format) v))
(define-inline (cast-null/Cinfo-effect::obj o::cast-null/Cinfo) (-> |#!bigloo_wallow| o effect))
(define-inline (cast-null/Cinfo-effect-set! o::cast-null/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o effect) v))
(define-inline (cast-null/Cinfo-expr*::pair-nil o::cast-null/Cinfo) (-> |#!bigloo_wallow| o expr*))
(define-inline (cast-null/Cinfo-expr*-set! o::cast-null/Cinfo v::pair-nil) (set! (-> |#!bigloo_wallow| o expr*) v))
(define-inline (cast-null/Cinfo-key::obj o::cast-null/Cinfo) (-> |#!bigloo_wallow| o key))
(define-inline (cast-null/Cinfo-key-set! o::cast-null/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o key) v))
(define-inline (cast-null/Cinfo-side-effect::obj o::cast-null/Cinfo) (-> |#!bigloo_wallow| o side-effect))
(define-inline (cast-null/Cinfo-side-effect-set! o::cast-null/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o side-effect) v))
(define-inline (cast-null/Cinfo-type::type o::cast-null/Cinfo) (-> |#!bigloo_wallow| o type))
(define-inline (cast-null/Cinfo-type-set! o::cast-null/Cinfo v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (cast-null/Cinfo-loc::obj o::cast-null/Cinfo) (-> |#!bigloo_wallow| o loc))
(define-inline (cast-null/Cinfo-loc-set! o::cast-null/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; vref/Cinfo
(define-inline (make-vref/Cinfo::vref/Cinfo loc1390::obj type1391::type side-effect1392::obj key1393::obj expr*1394::pair-nil effect1395::obj c-format1396::bstring ftype1397::type otype1398::type vtype1399::type unsafe1400::bool approx1401::approx tvector?1402::bool) (instantiate::vref/Cinfo (loc loc1390) (type type1391) (side-effect side-effect1392) (key key1393) (expr* expr*1394) (effect effect1395) (c-format c-format1396) (ftype ftype1397) (otype otype1398) (vtype vtype1399) (unsafe unsafe1400) (approx approx1401) (tvector? tvector?1402)))
(define-inline (vref/Cinfo?::bool obj::obj) ((@ isa? __object) obj (@ vref/Cinfo cfa_info3)))
(define (vref/Cinfo-nil::vref/Cinfo) (class-nil (@ vref/Cinfo cfa_info3)))
(define-inline (vref/Cinfo-tvector?::bool o::vref/Cinfo) (-> |#!bigloo_wallow| o tvector?))
(define-inline (vref/Cinfo-tvector?-set! o::vref/Cinfo v::bool) (set! (-> |#!bigloo_wallow| o tvector?) v))
(define-inline (vref/Cinfo-approx::approx o::vref/Cinfo) (-> |#!bigloo_wallow| o approx))
(define-inline (vref/Cinfo-approx-set! o::vref/Cinfo v::approx) (set! (-> |#!bigloo_wallow| o approx) v))
(define-inline (vref/Cinfo-unsafe::bool o::vref/Cinfo) (-> |#!bigloo_wallow| o unsafe))
(define-inline (vref/Cinfo-unsafe-set! o::vref/Cinfo v::bool) (set! (-> |#!bigloo_wallow| o unsafe) v))
(define-inline (vref/Cinfo-vtype::type o::vref/Cinfo) (-> |#!bigloo_wallow| o vtype))
(define-inline (vref/Cinfo-vtype-set! o::vref/Cinfo v::type) (set! (-> |#!bigloo_wallow| o vtype) v))
(define-inline (vref/Cinfo-otype::type o::vref/Cinfo) (-> |#!bigloo_wallow| o otype))
(define-inline (vref/Cinfo-otype-set! o::vref/Cinfo v::type) (set! (-> |#!bigloo_wallow| o otype) v))
(define-inline (vref/Cinfo-ftype::type o::vref/Cinfo) (-> |#!bigloo_wallow| o ftype))
(define-inline (vref/Cinfo-ftype-set! o::vref/Cinfo v::type) (set! (-> |#!bigloo_wallow| o ftype) v))
(define-inline (vref/Cinfo-c-format::bstring o::vref/Cinfo) (-> |#!bigloo_wallow| o c-format))
(define-inline (vref/Cinfo-c-format-set! o::vref/Cinfo v::bstring) (set! (-> |#!bigloo_wallow| o c-format) v))
(define-inline (vref/Cinfo-effect::obj o::vref/Cinfo) (-> |#!bigloo_wallow| o effect))
(define-inline (vref/Cinfo-effect-set! o::vref/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o effect) v))
(define-inline (vref/Cinfo-expr*::pair-nil o::vref/Cinfo) (-> |#!bigloo_wallow| o expr*))
(define-inline (vref/Cinfo-expr*-set! o::vref/Cinfo v::pair-nil) (set! (-> |#!bigloo_wallow| o expr*) v))
(define-inline (vref/Cinfo-key::obj o::vref/Cinfo) (-> |#!bigloo_wallow| o key))
(define-inline (vref/Cinfo-key-set! o::vref/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o key) v))
(define-inline (vref/Cinfo-side-effect::obj o::vref/Cinfo) (-> |#!bigloo_wallow| o side-effect))
(define-inline (vref/Cinfo-side-effect-set! o::vref/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o side-effect) v))
(define-inline (vref/Cinfo-type::type o::vref/Cinfo) (-> |#!bigloo_wallow| o type))
(define-inline (vref/Cinfo-type-set! o::vref/Cinfo v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (vref/Cinfo-loc::obj o::vref/Cinfo) (-> |#!bigloo_wallow| o loc))
(define-inline (vref/Cinfo-loc-set! o::vref/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; vset!/Cinfo
(define-inline (make-vset!/Cinfo::vset!/Cinfo loc1375::obj type1376::type side-effect1377::obj key1378::obj expr*1379::pair-nil effect1380::obj c-format1381::bstring ftype1382::type otype1383::type vtype1384::type unsafe1385::bool approx1387::approx tvector?1388::bool) (instantiate::vset!/Cinfo (loc loc1375) (type type1376) (side-effect side-effect1377) (key key1378) (expr* expr*1379) (effect effect1380) (c-format c-format1381) (ftype ftype1382) (otype otype1383) (vtype vtype1384) (unsafe unsafe1385) (approx approx1387) (tvector? tvector?1388)))
(define-inline (vset!/Cinfo?::bool obj::obj) ((@ isa? __object) obj (@ vset!/Cinfo cfa_info3)))
(define (vset!/Cinfo-nil::vset!/Cinfo) (class-nil (@ vset!/Cinfo cfa_info3)))
(define-inline (vset!/Cinfo-tvector?::bool o::vset!/Cinfo) (-> |#!bigloo_wallow| o tvector?))
(define-inline (vset!/Cinfo-tvector?-set! o::vset!/Cinfo v::bool) (set! (-> |#!bigloo_wallow| o tvector?) v))
(define-inline (vset!/Cinfo-approx::approx o::vset!/Cinfo) (-> |#!bigloo_wallow| o approx))
(define-inline (vset!/Cinfo-approx-set! o::vset!/Cinfo v::approx) (set! (-> |#!bigloo_wallow| o approx) v))
(define-inline (vset!/Cinfo-unsafe::bool o::vset!/Cinfo) (-> |#!bigloo_wallow| o unsafe))
(define-inline (vset!/Cinfo-unsafe-set! o::vset!/Cinfo v::bool) (set! (-> |#!bigloo_wallow| o unsafe) v))
(define-inline (vset!/Cinfo-vtype::type o::vset!/Cinfo) (-> |#!bigloo_wallow| o vtype))
(define-inline (vset!/Cinfo-vtype-set! o::vset!/Cinfo v::type) (set! (-> |#!bigloo_wallow| o vtype) v))
(define-inline (vset!/Cinfo-otype::type o::vset!/Cinfo) (-> |#!bigloo_wallow| o otype))
(define-inline (vset!/Cinfo-otype-set! o::vset!/Cinfo v::type) (set! (-> |#!bigloo_wallow| o otype) v))
(define-inline (vset!/Cinfo-ftype::type o::vset!/Cinfo) (-> |#!bigloo_wallow| o ftype))
(define-inline (vset!/Cinfo-ftype-set! o::vset!/Cinfo v::type) (set! (-> |#!bigloo_wallow| o ftype) v))
(define-inline (vset!/Cinfo-c-format::bstring o::vset!/Cinfo) (-> |#!bigloo_wallow| o c-format))
(define-inline (vset!/Cinfo-c-format-set! o::vset!/Cinfo v::bstring) (set! (-> |#!bigloo_wallow| o c-format) v))
(define-inline (vset!/Cinfo-effect::obj o::vset!/Cinfo) (-> |#!bigloo_wallow| o effect))
(define-inline (vset!/Cinfo-effect-set! o::vset!/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o effect) v))
(define-inline (vset!/Cinfo-expr*::pair-nil o::vset!/Cinfo) (-> |#!bigloo_wallow| o expr*))
(define-inline (vset!/Cinfo-expr*-set! o::vset!/Cinfo v::pair-nil) (set! (-> |#!bigloo_wallow| o expr*) v))
(define-inline (vset!/Cinfo-key::obj o::vset!/Cinfo) (-> |#!bigloo_wallow| o key))
(define-inline (vset!/Cinfo-key-set! o::vset!/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o key) v))
(define-inline (vset!/Cinfo-side-effect::obj o::vset!/Cinfo) (-> |#!bigloo_wallow| o side-effect))
(define-inline (vset!/Cinfo-side-effect-set! o::vset!/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o side-effect) v))
(define-inline (vset!/Cinfo-type::type o::vset!/Cinfo) (-> |#!bigloo_wallow| o type))
(define-inline (vset!/Cinfo-type-set! o::vset!/Cinfo v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (vset!/Cinfo-loc::obj o::vset!/Cinfo) (-> |#!bigloo_wallow| o loc))
(define-inline (vset!/Cinfo-loc-set! o::vset!/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; vlength/Cinfo
(define-inline (make-vlength/Cinfo::vlength/Cinfo loc1364::obj type1365::type side-effect1366::obj key1367::obj expr*1368::pair-nil effect1369::obj c-format1370::bstring vtype1371::type approx1372::approx tvector?1373::bool) (instantiate::vlength/Cinfo (loc loc1364) (type type1365) (side-effect side-effect1366) (key key1367) (expr* expr*1368) (effect effect1369) (c-format c-format1370) (vtype vtype1371) (approx approx1372) (tvector? tvector?1373)))
(define-inline (vlength/Cinfo?::bool obj::obj) ((@ isa? __object) obj (@ vlength/Cinfo cfa_info3)))
(define (vlength/Cinfo-nil::vlength/Cinfo) (class-nil (@ vlength/Cinfo cfa_info3)))
(define-inline (vlength/Cinfo-tvector?::bool o::vlength/Cinfo) (-> |#!bigloo_wallow| o tvector?))
(define-inline (vlength/Cinfo-tvector?-set! o::vlength/Cinfo v::bool) (set! (-> |#!bigloo_wallow| o tvector?) v))
(define-inline (vlength/Cinfo-approx::approx o::vlength/Cinfo) (-> |#!bigloo_wallow| o approx))
(define-inline (vlength/Cinfo-approx-set! o::vlength/Cinfo v::approx) (set! (-> |#!bigloo_wallow| o approx) v))
(define-inline (vlength/Cinfo-vtype::type o::vlength/Cinfo) (-> |#!bigloo_wallow| o vtype))
(define-inline (vlength/Cinfo-vtype-set! o::vlength/Cinfo v::type) (set! (-> |#!bigloo_wallow| o vtype) v))
(define-inline (vlength/Cinfo-c-format::bstring o::vlength/Cinfo) (-> |#!bigloo_wallow| o c-format))
(define-inline (vlength/Cinfo-c-format-set! o::vlength/Cinfo v::bstring) (set! (-> |#!bigloo_wallow| o c-format) v))
(define-inline (vlength/Cinfo-effect::obj o::vlength/Cinfo) (-> |#!bigloo_wallow| o effect))
(define-inline (vlength/Cinfo-effect-set! o::vlength/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o effect) v))
(define-inline (vlength/Cinfo-expr*::pair-nil o::vlength/Cinfo) (-> |#!bigloo_wallow| o expr*))
(define-inline (vlength/Cinfo-expr*-set! o::vlength/Cinfo v::pair-nil) (set! (-> |#!bigloo_wallow| o expr*) v))
(define-inline (vlength/Cinfo-key::obj o::vlength/Cinfo) (-> |#!bigloo_wallow| o key))
(define-inline (vlength/Cinfo-key-set! o::vlength/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o key) v))
(define-inline (vlength/Cinfo-side-effect::obj o::vlength/Cinfo) (-> |#!bigloo_wallow| o side-effect))
(define-inline (vlength/Cinfo-side-effect-set! o::vlength/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o side-effect) v))
(define-inline (vlength/Cinfo-type::type o::vlength/Cinfo) (-> |#!bigloo_wallow| o type))
(define-inline (vlength/Cinfo-type-set! o::vlength/Cinfo v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (vlength/Cinfo-loc::obj o::vlength/Cinfo) (-> |#!bigloo_wallow| o loc))
(define-inline (vlength/Cinfo-loc-set! o::vlength/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; pre-valloc/Cinfo
(define-inline (make-pre-valloc/Cinfo::pre-valloc/Cinfo loc1353::obj type1354::type side-effect1355::obj key1356::obj expr*1357::pair-nil effect1358::obj c-format1359::bstring ftype1360::type otype1361::type owner1362::variable) (instantiate::pre-valloc/Cinfo (loc loc1353) (type type1354) (side-effect side-effect1355) (key key1356) (expr* expr*1357) (effect effect1358) (c-format c-format1359) (ftype ftype1360) (otype otype1361) (owner owner1362)))
(define-inline (pre-valloc/Cinfo?::bool obj::obj) ((@ isa? __object) obj (@ pre-valloc/Cinfo cfa_info3)))
(define (pre-valloc/Cinfo-nil::pre-valloc/Cinfo) (class-nil (@ pre-valloc/Cinfo cfa_info3)))
(define-inline (pre-valloc/Cinfo-owner::variable o::pre-valloc/Cinfo) (-> |#!bigloo_wallow| o owner))
(define-inline (pre-valloc/Cinfo-owner-set! o::pre-valloc/Cinfo v::variable) (set! (-> |#!bigloo_wallow| o owner) v))
(define-inline (pre-valloc/Cinfo-otype::type o::pre-valloc/Cinfo) (-> |#!bigloo_wallow| o otype))
(define-inline (pre-valloc/Cinfo-otype-set! o::pre-valloc/Cinfo v::type) (set! (-> |#!bigloo_wallow| o otype) v))
(define-inline (pre-valloc/Cinfo-ftype::type o::pre-valloc/Cinfo) (-> |#!bigloo_wallow| o ftype))
(define-inline (pre-valloc/Cinfo-ftype-set! o::pre-valloc/Cinfo v::type) (set! (-> |#!bigloo_wallow| o ftype) v))
(define-inline (pre-valloc/Cinfo-c-format::bstring o::pre-valloc/Cinfo) (-> |#!bigloo_wallow| o c-format))
(define-inline (pre-valloc/Cinfo-c-format-set! o::pre-valloc/Cinfo v::bstring) (set! (-> |#!bigloo_wallow| o c-format) v))
(define-inline (pre-valloc/Cinfo-effect::obj o::pre-valloc/Cinfo) (-> |#!bigloo_wallow| o effect))
(define-inline (pre-valloc/Cinfo-effect-set! o::pre-valloc/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o effect) v))
(define-inline (pre-valloc/Cinfo-expr*::pair-nil o::pre-valloc/Cinfo) (-> |#!bigloo_wallow| o expr*))
(define-inline (pre-valloc/Cinfo-expr*-set! o::pre-valloc/Cinfo v::pair-nil) (set! (-> |#!bigloo_wallow| o expr*) v))
(define-inline (pre-valloc/Cinfo-key::obj o::pre-valloc/Cinfo) (-> |#!bigloo_wallow| o key))
(define-inline (pre-valloc/Cinfo-key-set! o::pre-valloc/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o key) v))
(define-inline (pre-valloc/Cinfo-side-effect::obj o::pre-valloc/Cinfo) (-> |#!bigloo_wallow| o side-effect))
(define-inline (pre-valloc/Cinfo-side-effect-set! o::pre-valloc/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o side-effect) v))
(define-inline (pre-valloc/Cinfo-type::type o::pre-valloc/Cinfo) (-> |#!bigloo_wallow| o type))
(define-inline (pre-valloc/Cinfo-type-set! o::pre-valloc/Cinfo v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (pre-valloc/Cinfo-loc::obj o::pre-valloc/Cinfo) (-> |#!bigloo_wallow| o loc))
(define-inline (pre-valloc/Cinfo-loc-set! o::pre-valloc/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; valloc/Cinfo
(define-inline (make-valloc/Cinfo::valloc/Cinfo loc1342::obj type1343::type side-effect1344::obj key1345::obj expr*1346::pair-nil effect1347::obj c-format1348::bstring ftype1349::type otype1350::type approx1351::approx) (instantiate::valloc/Cinfo (loc loc1342) (type type1343) (side-effect side-effect1344) (key key1345) (expr* expr*1346) (effect effect1347) (c-format c-format1348) (ftype ftype1349) (otype otype1350) (approx approx1351)))
(define-inline (valloc/Cinfo?::bool obj::obj) ((@ isa? __object) obj (@ valloc/Cinfo cfa_info3)))
(define (valloc/Cinfo-nil::valloc/Cinfo) (class-nil (@ valloc/Cinfo cfa_info3)))
(define-inline (valloc/Cinfo-approx::approx o::valloc/Cinfo) (-> |#!bigloo_wallow| o approx))
(define-inline (valloc/Cinfo-approx-set! o::valloc/Cinfo v::approx) (set! (-> |#!bigloo_wallow| o approx) v))
(define-inline (valloc/Cinfo-otype::type o::valloc/Cinfo) (-> |#!bigloo_wallow| o otype))
(define-inline (valloc/Cinfo-otype-set! o::valloc/Cinfo v::type) (set! (-> |#!bigloo_wallow| o otype) v))
(define-inline (valloc/Cinfo-ftype::type o::valloc/Cinfo) (-> |#!bigloo_wallow| o ftype))
(define-inline (valloc/Cinfo-ftype-set! o::valloc/Cinfo v::type) (set! (-> |#!bigloo_wallow| o ftype) v))
(define-inline (valloc/Cinfo-c-format::bstring o::valloc/Cinfo) (-> |#!bigloo_wallow| o c-format))
(define-inline (valloc/Cinfo-c-format-set! o::valloc/Cinfo v::bstring) (set! (-> |#!bigloo_wallow| o c-format) v))
(define-inline (valloc/Cinfo-effect::obj o::valloc/Cinfo) (-> |#!bigloo_wallow| o effect))
(define-inline (valloc/Cinfo-effect-set! o::valloc/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o effect) v))
(define-inline (valloc/Cinfo-expr*::pair-nil o::valloc/Cinfo) (-> |#!bigloo_wallow| o expr*))
(define-inline (valloc/Cinfo-expr*-set! o::valloc/Cinfo v::pair-nil) (set! (-> |#!bigloo_wallow| o expr*) v))
(define-inline (valloc/Cinfo-key::obj o::valloc/Cinfo) (-> |#!bigloo_wallow| o key))
(define-inline (valloc/Cinfo-key-set! o::valloc/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o key) v))
(define-inline (valloc/Cinfo-side-effect::obj o::valloc/Cinfo) (-> |#!bigloo_wallow| o side-effect))
(define-inline (valloc/Cinfo-side-effect-set! o::valloc/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o side-effect) v))
(define-inline (valloc/Cinfo-type::type o::valloc/Cinfo) (-> |#!bigloo_wallow| o type))
(define-inline (valloc/Cinfo-type-set! o::valloc/Cinfo v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (valloc/Cinfo-loc::obj o::valloc/Cinfo) (-> |#!bigloo_wallow| o loc))
(define-inline (valloc/Cinfo-loc-set! o::valloc/Cinfo v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; valloc/Cinfo+optim
(define-inline (make-valloc/Cinfo+optim::valloc/Cinfo+optim loc1325::obj type1326::type side-effect1327::obj key1328::obj expr*1329::pair-nil effect1330::obj c-format1331::bstring ftype1332::type otype1333::type approx1334::approx value-approx1335::approx lost-stamp1336::long owner1337::variable stackable?1338::bool stack-stamp1339::obj seen?1340::bool) (instantiate::valloc/Cinfo+optim (loc loc1325) (type type1326) (side-effect side-effect1327) (key key1328) (expr* expr*1329) (effect effect1330) (c-format c-format1331) (ftype ftype1332) (otype otype1333) (approx approx1334) (value-approx value-approx1335) (lost-stamp lost-stamp1336) (owner owner1337) (stackable? stackable?1338) (stack-stamp stack-stamp1339) (seen? seen?1340)))
(define-inline (valloc/Cinfo+optim?::bool obj::obj) ((@ isa? __object) obj (@ valloc/Cinfo+optim cfa_info3)))
(define (valloc/Cinfo+optim-nil::valloc/Cinfo+optim) (class-nil (@ valloc/Cinfo+optim cfa_info3)))
(define-inline (valloc/Cinfo+optim-seen?::bool o::valloc/Cinfo+optim) (-> |#!bigloo_wallow| o seen?))
(define-inline (valloc/Cinfo+optim-seen?-set! o::valloc/Cinfo+optim v::bool) (set! (-> |#!bigloo_wallow| o seen?) v))
(define-inline (valloc/Cinfo+optim-stack-stamp::obj o::valloc/Cinfo+optim) (-> |#!bigloo_wallow| o stack-stamp))
(define-inline (valloc/Cinfo+optim-stack-stamp-set! o::valloc/Cinfo+optim v::obj) (set! (-> |#!bigloo_wallow| o stack-stamp) v))
(define-inline (valloc/Cinfo+optim-stackable?::bool o::valloc/Cinfo+optim) (-> |#!bigloo_wallow| o stackable?))
(define-inline (valloc/Cinfo+optim-stackable?-set! o::valloc/Cinfo+optim v::bool) (set! (-> |#!bigloo_wallow| o stackable?) v))
(define-inline (valloc/Cinfo+optim-owner::variable o::valloc/Cinfo+optim) (-> |#!bigloo_wallow| o owner))
(define-inline (valloc/Cinfo+optim-owner-set! o::valloc/Cinfo+optim v::variable) (set! (-> |#!bigloo_wallow| o owner) v))
(define-inline (valloc/Cinfo+optim-lost-stamp::long o::valloc/Cinfo+optim) (-> |#!bigloo_wallow| o lost-stamp))
(define-inline (valloc/Cinfo+optim-lost-stamp-set! o::valloc/Cinfo+optim v::long) (set! (-> |#!bigloo_wallow| o lost-stamp) v))
(define-inline (valloc/Cinfo+optim-value-approx::approx o::valloc/Cinfo+optim) (-> |#!bigloo_wallow| o value-approx))
(define-inline (valloc/Cinfo+optim-value-approx-set! o::valloc/Cinfo+optim v::approx) (set! (-> |#!bigloo_wallow| o value-approx) v))
(define-inline (valloc/Cinfo+optim-approx::approx o::valloc/Cinfo+optim) (-> |#!bigloo_wallow| o approx))
(define-inline (valloc/Cinfo+optim-approx-set! o::valloc/Cinfo+optim v::approx) (set! (-> |#!bigloo_wallow| o approx) v))
(define-inline (valloc/Cinfo+optim-otype::type o::valloc/Cinfo+optim) (-> |#!bigloo_wallow| o otype))
(define-inline (valloc/Cinfo+optim-otype-set! o::valloc/Cinfo+optim v::type) (set! (-> |#!bigloo_wallow| o otype) v))
(define-inline (valloc/Cinfo+optim-ftype::type o::valloc/Cinfo+optim) (-> |#!bigloo_wallow| o ftype))
(define-inline (valloc/Cinfo+optim-ftype-set! o::valloc/Cinfo+optim v::type) (set! (-> |#!bigloo_wallow| o ftype) v))
(define-inline (valloc/Cinfo+optim-c-format::bstring o::valloc/Cinfo+optim) (-> |#!bigloo_wallow| o c-format))
(define-inline (valloc/Cinfo+optim-c-format-set! o::valloc/Cinfo+optim v::bstring) (set! (-> |#!bigloo_wallow| o c-format) v))
(define-inline (valloc/Cinfo+optim-effect::obj o::valloc/Cinfo+optim) (-> |#!bigloo_wallow| o effect))
(define-inline (valloc/Cinfo+optim-effect-set! o::valloc/Cinfo+optim v::obj) (set! (-> |#!bigloo_wallow| o effect) v))
(define-inline (valloc/Cinfo+optim-expr*::pair-nil o::valloc/Cinfo+optim) (-> |#!bigloo_wallow| o expr*))
(define-inline (valloc/Cinfo+optim-expr*-set! o::valloc/Cinfo+optim v::pair-nil) (set! (-> |#!bigloo_wallow| o expr*) v))
(define-inline (valloc/Cinfo+optim-key::obj o::valloc/Cinfo+optim) (-> |#!bigloo_wallow| o key))
(define-inline (valloc/Cinfo+optim-key-set! o::valloc/Cinfo+optim v::obj) (set! (-> |#!bigloo_wallow| o key) v))
(define-inline (valloc/Cinfo+optim-side-effect::obj o::valloc/Cinfo+optim) (-> |#!bigloo_wallow| o side-effect))
(define-inline (valloc/Cinfo+optim-side-effect-set! o::valloc/Cinfo+optim v::obj) (set! (-> |#!bigloo_wallow| o side-effect) v))
(define-inline (valloc/Cinfo+optim-type::type o::valloc/Cinfo+optim) (-> |#!bigloo_wallow| o type))
(define-inline (valloc/Cinfo+optim-type-set! o::valloc/Cinfo+optim v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (valloc/Cinfo+optim-loc::obj o::valloc/Cinfo+optim) (-> |#!bigloo_wallow| o loc))
(define-inline (valloc/Cinfo+optim-loc-set! o::valloc/Cinfo+optim v::obj) (set! (-> |#!bigloo_wallow| o loc) v))
))
