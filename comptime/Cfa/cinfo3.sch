;; ==========================================================
;; Class accessors
;; Bigloo (3.7b)
;; Inria -- Sophia Antipolis     Mon Nov 14 16:42:36 CET 2011 
;; (bigloo.new -classgen Cfa/cinfo3.scm)
;; ==========================================================

;; The directives
(directives

;; pragma/Cinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-pragma/Cinfo::pragma/Cinfo loc1509::obj type1510::type side-effect1511::obj key1512::obj expr*1513::pair-nil effect1514::obj format1515::bstring approx1516::approx)
    (inline pragma/Cinfo?::bool ::obj)
    (pragma/Cinfo-nil::pragma/Cinfo)
    (inline pragma/Cinfo-approx::approx ::pragma/Cinfo)
    (inline pragma/Cinfo-format::bstring ::pragma/Cinfo)
    (inline pragma/Cinfo-effect::obj ::pragma/Cinfo)
    (inline pragma/Cinfo-effect-set! ::pragma/Cinfo ::obj)
    (inline pragma/Cinfo-expr*::pair-nil ::pragma/Cinfo)
    (inline pragma/Cinfo-expr*-set! ::pragma/Cinfo ::pair-nil)
    (inline pragma/Cinfo-key::obj ::pragma/Cinfo)
    (inline pragma/Cinfo-key-set! ::pragma/Cinfo ::obj)
    (inline pragma/Cinfo-side-effect::obj ::pragma/Cinfo)
    (inline pragma/Cinfo-side-effect-set! ::pragma/Cinfo ::obj)
    (inline pragma/Cinfo-type::type ::pragma/Cinfo)
    (inline pragma/Cinfo-type-set! ::pragma/Cinfo ::type)
    (inline pragma/Cinfo-loc::obj ::pragma/Cinfo))))

;; getfield/Cinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-getfield/Cinfo::getfield/Cinfo loc1497::obj type1498::type side-effect1499::obj key1500::obj expr*1501::pair-nil effect1502::obj c-format1503::bstring fname1504::bstring ftype1505::type otype1506::type approx1507::approx)
    (inline getfield/Cinfo?::bool ::obj)
    (getfield/Cinfo-nil::getfield/Cinfo)
    (inline getfield/Cinfo-approx::approx ::getfield/Cinfo)
    (inline getfield/Cinfo-otype::type ::getfield/Cinfo)
    (inline getfield/Cinfo-ftype::type ::getfield/Cinfo)
    (inline getfield/Cinfo-fname::bstring ::getfield/Cinfo)
    (inline getfield/Cinfo-c-format::bstring ::getfield/Cinfo)
    (inline getfield/Cinfo-effect::obj ::getfield/Cinfo)
    (inline getfield/Cinfo-effect-set! ::getfield/Cinfo ::obj)
    (inline getfield/Cinfo-expr*::pair-nil ::getfield/Cinfo)
    (inline getfield/Cinfo-expr*-set! ::getfield/Cinfo ::pair-nil)
    (inline getfield/Cinfo-key::obj ::getfield/Cinfo)
    (inline getfield/Cinfo-key-set! ::getfield/Cinfo ::obj)
    (inline getfield/Cinfo-side-effect::obj ::getfield/Cinfo)
    (inline getfield/Cinfo-side-effect-set! ::getfield/Cinfo ::obj)
    (inline getfield/Cinfo-type::type ::getfield/Cinfo)
    (inline getfield/Cinfo-type-set! ::getfield/Cinfo ::type)
    (inline getfield/Cinfo-loc::obj ::getfield/Cinfo))))

;; setfield/Cinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-setfield/Cinfo::setfield/Cinfo loc1485::obj type1486::type side-effect1487::obj key1488::obj expr*1489::pair-nil effect1490::obj c-format1491::bstring fname1492::bstring ftype1493::type otype1494::type approx1495::approx)
    (inline setfield/Cinfo?::bool ::obj)
    (setfield/Cinfo-nil::setfield/Cinfo)
    (inline setfield/Cinfo-approx::approx ::setfield/Cinfo)
    (inline setfield/Cinfo-otype::type ::setfield/Cinfo)
    (inline setfield/Cinfo-ftype::type ::setfield/Cinfo)
    (inline setfield/Cinfo-fname::bstring ::setfield/Cinfo)
    (inline setfield/Cinfo-c-format::bstring ::setfield/Cinfo)
    (inline setfield/Cinfo-effect::obj ::setfield/Cinfo)
    (inline setfield/Cinfo-effect-set! ::setfield/Cinfo ::obj)
    (inline setfield/Cinfo-expr*::pair-nil ::setfield/Cinfo)
    (inline setfield/Cinfo-expr*-set! ::setfield/Cinfo ::pair-nil)
    (inline setfield/Cinfo-key::obj ::setfield/Cinfo)
    (inline setfield/Cinfo-key-set! ::setfield/Cinfo ::obj)
    (inline setfield/Cinfo-side-effect::obj ::setfield/Cinfo)
    (inline setfield/Cinfo-side-effect-set! ::setfield/Cinfo ::obj)
    (inline setfield/Cinfo-type::type ::setfield/Cinfo)
    (inline setfield/Cinfo-type-set! ::setfield/Cinfo ::type)
    (inline setfield/Cinfo-loc::obj ::setfield/Cinfo))))

;; new/Cinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-new/Cinfo::new/Cinfo loc1475::obj type1476::type side-effect1477::obj key1478::obj expr*1479::pair-nil effect1480::obj c-format1481::bstring args-type1482::pair-nil approx1483::approx)
    (inline new/Cinfo?::bool ::obj)
    (new/Cinfo-nil::new/Cinfo)
    (inline new/Cinfo-approx::approx ::new/Cinfo)
    (inline new/Cinfo-args-type::pair-nil ::new/Cinfo)
    (inline new/Cinfo-args-type-set! ::new/Cinfo ::pair-nil)
    (inline new/Cinfo-c-format::bstring ::new/Cinfo)
    (inline new/Cinfo-effect::obj ::new/Cinfo)
    (inline new/Cinfo-effect-set! ::new/Cinfo ::obj)
    (inline new/Cinfo-expr*::pair-nil ::new/Cinfo)
    (inline new/Cinfo-expr*-set! ::new/Cinfo ::pair-nil)
    (inline new/Cinfo-key::obj ::new/Cinfo)
    (inline new/Cinfo-key-set! ::new/Cinfo ::obj)
    (inline new/Cinfo-side-effect::obj ::new/Cinfo)
    (inline new/Cinfo-side-effect-set! ::new/Cinfo ::obj)
    (inline new/Cinfo-type::type ::new/Cinfo)
    (inline new/Cinfo-type-set! ::new/Cinfo ::type)
    (inline new/Cinfo-loc::obj ::new/Cinfo))))

;; instanceof/Cinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-instanceof/Cinfo::instanceof/Cinfo loc1465::obj type1466::type side-effect1467::obj key1468::obj expr*1469::pair-nil effect1470::obj c-format1471::bstring class1472::type approx1473::approx)
    (inline instanceof/Cinfo?::bool ::obj)
    (instanceof/Cinfo-nil::instanceof/Cinfo)
    (inline instanceof/Cinfo-approx::approx ::instanceof/Cinfo)
    (inline instanceof/Cinfo-class::type ::instanceof/Cinfo)
    (inline instanceof/Cinfo-c-format::bstring ::instanceof/Cinfo)
    (inline instanceof/Cinfo-effect::obj ::instanceof/Cinfo)
    (inline instanceof/Cinfo-effect-set! ::instanceof/Cinfo ::obj)
    (inline instanceof/Cinfo-expr*::pair-nil ::instanceof/Cinfo)
    (inline instanceof/Cinfo-expr*-set! ::instanceof/Cinfo ::pair-nil)
    (inline instanceof/Cinfo-key::obj ::instanceof/Cinfo)
    (inline instanceof/Cinfo-key-set! ::instanceof/Cinfo ::obj)
    (inline instanceof/Cinfo-side-effect::obj ::instanceof/Cinfo)
    (inline instanceof/Cinfo-side-effect-set! ::instanceof/Cinfo ::obj)
    (inline instanceof/Cinfo-type::type ::instanceof/Cinfo)
    (inline instanceof/Cinfo-type-set! ::instanceof/Cinfo ::type)
    (inline instanceof/Cinfo-loc::obj ::instanceof/Cinfo))))

;; cast-null/Cinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-cast-null/Cinfo::cast-null/Cinfo loc1456::obj type1457::type side-effect1458::obj key1459::obj expr*1460::pair-nil effect1461::obj c-format1462::bstring approx1463::approx)
    (inline cast-null/Cinfo?::bool ::obj)
    (cast-null/Cinfo-nil::cast-null/Cinfo)
    (inline cast-null/Cinfo-approx::approx ::cast-null/Cinfo)
    (inline cast-null/Cinfo-c-format::bstring ::cast-null/Cinfo)
    (inline cast-null/Cinfo-effect::obj ::cast-null/Cinfo)
    (inline cast-null/Cinfo-effect-set! ::cast-null/Cinfo ::obj)
    (inline cast-null/Cinfo-expr*::pair-nil ::cast-null/Cinfo)
    (inline cast-null/Cinfo-expr*-set! ::cast-null/Cinfo ::pair-nil)
    (inline cast-null/Cinfo-key::obj ::cast-null/Cinfo)
    (inline cast-null/Cinfo-key-set! ::cast-null/Cinfo ::obj)
    (inline cast-null/Cinfo-side-effect::obj ::cast-null/Cinfo)
    (inline cast-null/Cinfo-side-effect-set! ::cast-null/Cinfo ::obj)
    (inline cast-null/Cinfo-type::type ::cast-null/Cinfo)
    (inline cast-null/Cinfo-type-set! ::cast-null/Cinfo ::type)
    (inline cast-null/Cinfo-loc::obj ::cast-null/Cinfo))))

;; vref/Cinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-vref/Cinfo::vref/Cinfo loc1442::obj type1443::type side-effect1444::obj key1445::obj expr*1446::pair-nil effect1447::obj c-format1448::bstring ftype1449::type otype1450::type vtype1451::type unsafe1452::bool approx1453::approx tvector?1454::bool)
    (inline vref/Cinfo?::bool ::obj)
    (vref/Cinfo-nil::vref/Cinfo)
    (inline vref/Cinfo-tvector?::bool ::vref/Cinfo)
    (inline vref/Cinfo-tvector?-set! ::vref/Cinfo ::bool)
    (inline vref/Cinfo-approx::approx ::vref/Cinfo)
    (inline vref/Cinfo-unsafe::bool ::vref/Cinfo)
    (inline vref/Cinfo-vtype::type ::vref/Cinfo)
    (inline vref/Cinfo-otype::type ::vref/Cinfo)
    (inline vref/Cinfo-ftype::type ::vref/Cinfo)
    (inline vref/Cinfo-ftype-set! ::vref/Cinfo ::type)
    (inline vref/Cinfo-c-format::bstring ::vref/Cinfo)
    (inline vref/Cinfo-effect::obj ::vref/Cinfo)
    (inline vref/Cinfo-effect-set! ::vref/Cinfo ::obj)
    (inline vref/Cinfo-expr*::pair-nil ::vref/Cinfo)
    (inline vref/Cinfo-expr*-set! ::vref/Cinfo ::pair-nil)
    (inline vref/Cinfo-key::obj ::vref/Cinfo)
    (inline vref/Cinfo-key-set! ::vref/Cinfo ::obj)
    (inline vref/Cinfo-side-effect::obj ::vref/Cinfo)
    (inline vref/Cinfo-side-effect-set! ::vref/Cinfo ::obj)
    (inline vref/Cinfo-type::type ::vref/Cinfo)
    (inline vref/Cinfo-type-set! ::vref/Cinfo ::type)
    (inline vref/Cinfo-loc::obj ::vref/Cinfo))))

;; vset!/Cinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-vset!/Cinfo::vset!/Cinfo loc1428::obj type1429::type side-effect1430::obj key1431::obj expr*1432::pair-nil effect1433::obj c-format1434::bstring ftype1435::type otype1436::type vtype1437::type unsafe1438::bool approx1439::approx tvector?1440::bool)
    (inline vset!/Cinfo?::bool ::obj)
    (vset!/Cinfo-nil::vset!/Cinfo)
    (inline vset!/Cinfo-tvector?::bool ::vset!/Cinfo)
    (inline vset!/Cinfo-tvector?-set! ::vset!/Cinfo ::bool)
    (inline vset!/Cinfo-approx::approx ::vset!/Cinfo)
    (inline vset!/Cinfo-unsafe::bool ::vset!/Cinfo)
    (inline vset!/Cinfo-vtype::type ::vset!/Cinfo)
    (inline vset!/Cinfo-otype::type ::vset!/Cinfo)
    (inline vset!/Cinfo-ftype::type ::vset!/Cinfo)
    (inline vset!/Cinfo-ftype-set! ::vset!/Cinfo ::type)
    (inline vset!/Cinfo-c-format::bstring ::vset!/Cinfo)
    (inline vset!/Cinfo-effect::obj ::vset!/Cinfo)
    (inline vset!/Cinfo-effect-set! ::vset!/Cinfo ::obj)
    (inline vset!/Cinfo-expr*::pair-nil ::vset!/Cinfo)
    (inline vset!/Cinfo-expr*-set! ::vset!/Cinfo ::pair-nil)
    (inline vset!/Cinfo-key::obj ::vset!/Cinfo)
    (inline vset!/Cinfo-key-set! ::vset!/Cinfo ::obj)
    (inline vset!/Cinfo-side-effect::obj ::vset!/Cinfo)
    (inline vset!/Cinfo-side-effect-set! ::vset!/Cinfo ::obj)
    (inline vset!/Cinfo-type::type ::vset!/Cinfo)
    (inline vset!/Cinfo-type-set! ::vset!/Cinfo ::type)
    (inline vset!/Cinfo-loc::obj ::vset!/Cinfo))))

;; vlength/Cinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-vlength/Cinfo::vlength/Cinfo loc1416::obj type1417::type side-effect1418::obj key1419::obj expr*1420::pair-nil effect1421::obj c-format1422::bstring vtype1423::type approx1424::approx tvector?1425::bool)
    (inline vlength/Cinfo?::bool ::obj)
    (vlength/Cinfo-nil::vlength/Cinfo)
    (inline vlength/Cinfo-tvector?::bool ::vlength/Cinfo)
    (inline vlength/Cinfo-tvector?-set! ::vlength/Cinfo ::bool)
    (inline vlength/Cinfo-approx::approx ::vlength/Cinfo)
    (inline vlength/Cinfo-vtype::type ::vlength/Cinfo)
    (inline vlength/Cinfo-c-format::bstring ::vlength/Cinfo)
    (inline vlength/Cinfo-effect::obj ::vlength/Cinfo)
    (inline vlength/Cinfo-effect-set! ::vlength/Cinfo ::obj)
    (inline vlength/Cinfo-expr*::pair-nil ::vlength/Cinfo)
    (inline vlength/Cinfo-expr*-set! ::vlength/Cinfo ::pair-nil)
    (inline vlength/Cinfo-key::obj ::vlength/Cinfo)
    (inline vlength/Cinfo-key-set! ::vlength/Cinfo ::obj)
    (inline vlength/Cinfo-side-effect::obj ::vlength/Cinfo)
    (inline vlength/Cinfo-side-effect-set! ::vlength/Cinfo ::obj)
    (inline vlength/Cinfo-type::type ::vlength/Cinfo)
    (inline vlength/Cinfo-type-set! ::vlength/Cinfo ::type)
    (inline vlength/Cinfo-loc::obj ::vlength/Cinfo))))

;; pre-valloc/Cinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-pre-valloc/Cinfo::pre-valloc/Cinfo loc1405::obj type1406::type side-effect1407::obj key1408::obj expr*1409::pair-nil effect1410::obj c-format1411::bstring ftype1412::type otype1413::type owner1414::variable)
    (inline pre-valloc/Cinfo?::bool ::obj)
    (pre-valloc/Cinfo-nil::pre-valloc/Cinfo)
    (inline pre-valloc/Cinfo-owner::variable ::pre-valloc/Cinfo)
    (inline pre-valloc/Cinfo-otype::type ::pre-valloc/Cinfo)
    (inline pre-valloc/Cinfo-ftype::type ::pre-valloc/Cinfo)
    (inline pre-valloc/Cinfo-ftype-set! ::pre-valloc/Cinfo ::type)
    (inline pre-valloc/Cinfo-c-format::bstring ::pre-valloc/Cinfo)
    (inline pre-valloc/Cinfo-effect::obj ::pre-valloc/Cinfo)
    (inline pre-valloc/Cinfo-effect-set! ::pre-valloc/Cinfo ::obj)
    (inline pre-valloc/Cinfo-expr*::pair-nil ::pre-valloc/Cinfo)
    (inline pre-valloc/Cinfo-expr*-set! ::pre-valloc/Cinfo ::pair-nil)
    (inline pre-valloc/Cinfo-key::obj ::pre-valloc/Cinfo)
    (inline pre-valloc/Cinfo-key-set! ::pre-valloc/Cinfo ::obj)
    (inline pre-valloc/Cinfo-side-effect::obj ::pre-valloc/Cinfo)
    (inline pre-valloc/Cinfo-side-effect-set! ::pre-valloc/Cinfo ::obj)
    (inline pre-valloc/Cinfo-type::type ::pre-valloc/Cinfo)
    (inline pre-valloc/Cinfo-type-set! ::pre-valloc/Cinfo ::type)
    (inline pre-valloc/Cinfo-loc::obj ::pre-valloc/Cinfo))))

;; valloc/Cinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-valloc/Cinfo::valloc/Cinfo loc1394::obj type1395::type side-effect1396::obj key1397::obj expr*1398::pair-nil effect1399::obj c-format1400::bstring ftype1401::type otype1402::type approx1403::approx)
    (inline valloc/Cinfo?::bool ::obj)
    (valloc/Cinfo-nil::valloc/Cinfo)
    (inline valloc/Cinfo-approx::approx ::valloc/Cinfo)
    (inline valloc/Cinfo-otype::type ::valloc/Cinfo)
    (inline valloc/Cinfo-ftype::type ::valloc/Cinfo)
    (inline valloc/Cinfo-ftype-set! ::valloc/Cinfo ::type)
    (inline valloc/Cinfo-c-format::bstring ::valloc/Cinfo)
    (inline valloc/Cinfo-effect::obj ::valloc/Cinfo)
    (inline valloc/Cinfo-effect-set! ::valloc/Cinfo ::obj)
    (inline valloc/Cinfo-expr*::pair-nil ::valloc/Cinfo)
    (inline valloc/Cinfo-expr*-set! ::valloc/Cinfo ::pair-nil)
    (inline valloc/Cinfo-key::obj ::valloc/Cinfo)
    (inline valloc/Cinfo-key-set! ::valloc/Cinfo ::obj)
    (inline valloc/Cinfo-side-effect::obj ::valloc/Cinfo)
    (inline valloc/Cinfo-side-effect-set! ::valloc/Cinfo ::obj)
    (inline valloc/Cinfo-type::type ::valloc/Cinfo)
    (inline valloc/Cinfo-type-set! ::valloc/Cinfo ::type)
    (inline valloc/Cinfo-loc::obj ::valloc/Cinfo))))

;; valloc/Cinfo+optim
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-valloc/Cinfo+optim::valloc/Cinfo+optim loc1377::obj type1378::type side-effect1379::obj key1380::obj expr*1381::pair-nil effect1382::obj c-format1383::bstring ftype1384::type otype1385::type approx1386::approx value-approx1387::approx lost-stamp1388::long owner1389::variable stackable?1390::bool stack-stamp1391::obj seen?1392::bool)
    (inline valloc/Cinfo+optim?::bool ::obj)
    (valloc/Cinfo+optim-nil::valloc/Cinfo+optim)
    (inline valloc/Cinfo+optim-seen?::bool ::valloc/Cinfo+optim)
    (inline valloc/Cinfo+optim-seen?-set! ::valloc/Cinfo+optim ::bool)
    (inline valloc/Cinfo+optim-stack-stamp::obj ::valloc/Cinfo+optim)
    (inline valloc/Cinfo+optim-stack-stamp-set! ::valloc/Cinfo+optim ::obj)
    (inline valloc/Cinfo+optim-stackable?::bool ::valloc/Cinfo+optim)
    (inline valloc/Cinfo+optim-stackable?-set! ::valloc/Cinfo+optim ::bool)
    (inline valloc/Cinfo+optim-owner::variable ::valloc/Cinfo+optim)
    (inline valloc/Cinfo+optim-lost-stamp::long ::valloc/Cinfo+optim)
    (inline valloc/Cinfo+optim-lost-stamp-set! ::valloc/Cinfo+optim ::long)
    (inline valloc/Cinfo+optim-value-approx::approx ::valloc/Cinfo+optim)
    (inline valloc/Cinfo+optim-approx::approx ::valloc/Cinfo+optim)
    (inline valloc/Cinfo+optim-approx-set! ::valloc/Cinfo+optim ::approx)
    (inline valloc/Cinfo+optim-otype::type ::valloc/Cinfo+optim)
    (inline valloc/Cinfo+optim-ftype::type ::valloc/Cinfo+optim)
    (inline valloc/Cinfo+optim-ftype-set! ::valloc/Cinfo+optim ::type)
    (inline valloc/Cinfo+optim-c-format::bstring ::valloc/Cinfo+optim)
    (inline valloc/Cinfo+optim-effect::obj ::valloc/Cinfo+optim)
    (inline valloc/Cinfo+optim-effect-set! ::valloc/Cinfo+optim ::obj)
    (inline valloc/Cinfo+optim-expr*::pair-nil ::valloc/Cinfo+optim)
    (inline valloc/Cinfo+optim-expr*-set! ::valloc/Cinfo+optim ::pair-nil)
    (inline valloc/Cinfo+optim-key::obj ::valloc/Cinfo+optim)
    (inline valloc/Cinfo+optim-key-set! ::valloc/Cinfo+optim ::obj)
    (inline valloc/Cinfo+optim-side-effect::obj ::valloc/Cinfo+optim)
    (inline valloc/Cinfo+optim-side-effect-set! ::valloc/Cinfo+optim ::obj)
    (inline valloc/Cinfo+optim-type::type ::valloc/Cinfo+optim)
    (inline valloc/Cinfo+optim-type-set! ::valloc/Cinfo+optim ::type)
    (inline valloc/Cinfo+optim-loc::obj ::valloc/Cinfo+optim)))))

;; The definitions
(cond-expand (bigloo-class-sans
;; pragma/Cinfo
(define-inline (make-pragma/Cinfo::pragma/Cinfo loc1509::obj type1510::type side-effect1511::obj key1512::obj expr*1513::pair-nil effect1514::obj format1515::bstring approx1516::approx) (instantiate::pragma/Cinfo (loc loc1509) (type type1510) (side-effect side-effect1511) (key key1512) (expr* expr*1513) (effect effect1514) (format format1515) (approx approx1516)))
(define-inline (pragma/Cinfo?::bool obj::obj) ((@ isa? __object) obj (@ pragma/Cinfo cfa_info3)))
(define (pragma/Cinfo-nil::pragma/Cinfo) (class-nil (@ pragma/Cinfo cfa_info3)))
(define-inline (pragma/Cinfo-approx::approx o::pragma/Cinfo) (with-access::pragma/Cinfo o (approx) approx))
(define-inline (pragma/Cinfo-approx-set! o::pragma/Cinfo v::approx) (with-access::pragma/Cinfo o (approx) (set! approx v)))
(define-inline (pragma/Cinfo-format::bstring o::pragma/Cinfo) (with-access::pragma/Cinfo o (format) format))
(define-inline (pragma/Cinfo-format-set! o::pragma/Cinfo v::bstring) (with-access::pragma/Cinfo o (format) (set! format v)))
(define-inline (pragma/Cinfo-effect::obj o::pragma/Cinfo) (with-access::pragma/Cinfo o (effect) effect))
(define-inline (pragma/Cinfo-effect-set! o::pragma/Cinfo v::obj) (with-access::pragma/Cinfo o (effect) (set! effect v)))
(define-inline (pragma/Cinfo-expr*::pair-nil o::pragma/Cinfo) (with-access::pragma/Cinfo o (expr*) expr*))
(define-inline (pragma/Cinfo-expr*-set! o::pragma/Cinfo v::pair-nil) (with-access::pragma/Cinfo o (expr*) (set! expr* v)))
(define-inline (pragma/Cinfo-key::obj o::pragma/Cinfo) (with-access::pragma/Cinfo o (key) key))
(define-inline (pragma/Cinfo-key-set! o::pragma/Cinfo v::obj) (with-access::pragma/Cinfo o (key) (set! key v)))
(define-inline (pragma/Cinfo-side-effect::obj o::pragma/Cinfo) (with-access::pragma/Cinfo o (side-effect) side-effect))
(define-inline (pragma/Cinfo-side-effect-set! o::pragma/Cinfo v::obj) (with-access::pragma/Cinfo o (side-effect) (set! side-effect v)))
(define-inline (pragma/Cinfo-type::type o::pragma/Cinfo) (with-access::pragma/Cinfo o (type) type))
(define-inline (pragma/Cinfo-type-set! o::pragma/Cinfo v::type) (with-access::pragma/Cinfo o (type) (set! type v)))
(define-inline (pragma/Cinfo-loc::obj o::pragma/Cinfo) (with-access::pragma/Cinfo o (loc) loc))
(define-inline (pragma/Cinfo-loc-set! o::pragma/Cinfo v::obj) (with-access::pragma/Cinfo o (loc) (set! loc v)))

;; getfield/Cinfo
(define-inline (make-getfield/Cinfo::getfield/Cinfo loc1497::obj type1498::type side-effect1499::obj key1500::obj expr*1501::pair-nil effect1502::obj c-format1503::bstring fname1504::bstring ftype1505::type otype1506::type approx1507::approx) (instantiate::getfield/Cinfo (loc loc1497) (type type1498) (side-effect side-effect1499) (key key1500) (expr* expr*1501) (effect effect1502) (c-format c-format1503) (fname fname1504) (ftype ftype1505) (otype otype1506) (approx approx1507)))
(define-inline (getfield/Cinfo?::bool obj::obj) ((@ isa? __object) obj (@ getfield/Cinfo cfa_info3)))
(define (getfield/Cinfo-nil::getfield/Cinfo) (class-nil (@ getfield/Cinfo cfa_info3)))
(define-inline (getfield/Cinfo-approx::approx o::getfield/Cinfo) (with-access::getfield/Cinfo o (approx) approx))
(define-inline (getfield/Cinfo-approx-set! o::getfield/Cinfo v::approx) (with-access::getfield/Cinfo o (approx) (set! approx v)))
(define-inline (getfield/Cinfo-otype::type o::getfield/Cinfo) (with-access::getfield/Cinfo o (otype) otype))
(define-inline (getfield/Cinfo-otype-set! o::getfield/Cinfo v::type) (with-access::getfield/Cinfo o (otype) (set! otype v)))
(define-inline (getfield/Cinfo-ftype::type o::getfield/Cinfo) (with-access::getfield/Cinfo o (ftype) ftype))
(define-inline (getfield/Cinfo-ftype-set! o::getfield/Cinfo v::type) (with-access::getfield/Cinfo o (ftype) (set! ftype v)))
(define-inline (getfield/Cinfo-fname::bstring o::getfield/Cinfo) (with-access::getfield/Cinfo o (fname) fname))
(define-inline (getfield/Cinfo-fname-set! o::getfield/Cinfo v::bstring) (with-access::getfield/Cinfo o (fname) (set! fname v)))
(define-inline (getfield/Cinfo-c-format::bstring o::getfield/Cinfo) (with-access::getfield/Cinfo o (c-format) c-format))
(define-inline (getfield/Cinfo-c-format-set! o::getfield/Cinfo v::bstring) (with-access::getfield/Cinfo o (c-format) (set! c-format v)))
(define-inline (getfield/Cinfo-effect::obj o::getfield/Cinfo) (with-access::getfield/Cinfo o (effect) effect))
(define-inline (getfield/Cinfo-effect-set! o::getfield/Cinfo v::obj) (with-access::getfield/Cinfo o (effect) (set! effect v)))
(define-inline (getfield/Cinfo-expr*::pair-nil o::getfield/Cinfo) (with-access::getfield/Cinfo o (expr*) expr*))
(define-inline (getfield/Cinfo-expr*-set! o::getfield/Cinfo v::pair-nil) (with-access::getfield/Cinfo o (expr*) (set! expr* v)))
(define-inline (getfield/Cinfo-key::obj o::getfield/Cinfo) (with-access::getfield/Cinfo o (key) key))
(define-inline (getfield/Cinfo-key-set! o::getfield/Cinfo v::obj) (with-access::getfield/Cinfo o (key) (set! key v)))
(define-inline (getfield/Cinfo-side-effect::obj o::getfield/Cinfo) (with-access::getfield/Cinfo o (side-effect) side-effect))
(define-inline (getfield/Cinfo-side-effect-set! o::getfield/Cinfo v::obj) (with-access::getfield/Cinfo o (side-effect) (set! side-effect v)))
(define-inline (getfield/Cinfo-type::type o::getfield/Cinfo) (with-access::getfield/Cinfo o (type) type))
(define-inline (getfield/Cinfo-type-set! o::getfield/Cinfo v::type) (with-access::getfield/Cinfo o (type) (set! type v)))
(define-inline (getfield/Cinfo-loc::obj o::getfield/Cinfo) (with-access::getfield/Cinfo o (loc) loc))
(define-inline (getfield/Cinfo-loc-set! o::getfield/Cinfo v::obj) (with-access::getfield/Cinfo o (loc) (set! loc v)))

;; setfield/Cinfo
(define-inline (make-setfield/Cinfo::setfield/Cinfo loc1485::obj type1486::type side-effect1487::obj key1488::obj expr*1489::pair-nil effect1490::obj c-format1491::bstring fname1492::bstring ftype1493::type otype1494::type approx1495::approx) (instantiate::setfield/Cinfo (loc loc1485) (type type1486) (side-effect side-effect1487) (key key1488) (expr* expr*1489) (effect effect1490) (c-format c-format1491) (fname fname1492) (ftype ftype1493) (otype otype1494) (approx approx1495)))
(define-inline (setfield/Cinfo?::bool obj::obj) ((@ isa? __object) obj (@ setfield/Cinfo cfa_info3)))
(define (setfield/Cinfo-nil::setfield/Cinfo) (class-nil (@ setfield/Cinfo cfa_info3)))
(define-inline (setfield/Cinfo-approx::approx o::setfield/Cinfo) (with-access::setfield/Cinfo o (approx) approx))
(define-inline (setfield/Cinfo-approx-set! o::setfield/Cinfo v::approx) (with-access::setfield/Cinfo o (approx) (set! approx v)))
(define-inline (setfield/Cinfo-otype::type o::setfield/Cinfo) (with-access::setfield/Cinfo o (otype) otype))
(define-inline (setfield/Cinfo-otype-set! o::setfield/Cinfo v::type) (with-access::setfield/Cinfo o (otype) (set! otype v)))
(define-inline (setfield/Cinfo-ftype::type o::setfield/Cinfo) (with-access::setfield/Cinfo o (ftype) ftype))
(define-inline (setfield/Cinfo-ftype-set! o::setfield/Cinfo v::type) (with-access::setfield/Cinfo o (ftype) (set! ftype v)))
(define-inline (setfield/Cinfo-fname::bstring o::setfield/Cinfo) (with-access::setfield/Cinfo o (fname) fname))
(define-inline (setfield/Cinfo-fname-set! o::setfield/Cinfo v::bstring) (with-access::setfield/Cinfo o (fname) (set! fname v)))
(define-inline (setfield/Cinfo-c-format::bstring o::setfield/Cinfo) (with-access::setfield/Cinfo o (c-format) c-format))
(define-inline (setfield/Cinfo-c-format-set! o::setfield/Cinfo v::bstring) (with-access::setfield/Cinfo o (c-format) (set! c-format v)))
(define-inline (setfield/Cinfo-effect::obj o::setfield/Cinfo) (with-access::setfield/Cinfo o (effect) effect))
(define-inline (setfield/Cinfo-effect-set! o::setfield/Cinfo v::obj) (with-access::setfield/Cinfo o (effect) (set! effect v)))
(define-inline (setfield/Cinfo-expr*::pair-nil o::setfield/Cinfo) (with-access::setfield/Cinfo o (expr*) expr*))
(define-inline (setfield/Cinfo-expr*-set! o::setfield/Cinfo v::pair-nil) (with-access::setfield/Cinfo o (expr*) (set! expr* v)))
(define-inline (setfield/Cinfo-key::obj o::setfield/Cinfo) (with-access::setfield/Cinfo o (key) key))
(define-inline (setfield/Cinfo-key-set! o::setfield/Cinfo v::obj) (with-access::setfield/Cinfo o (key) (set! key v)))
(define-inline (setfield/Cinfo-side-effect::obj o::setfield/Cinfo) (with-access::setfield/Cinfo o (side-effect) side-effect))
(define-inline (setfield/Cinfo-side-effect-set! o::setfield/Cinfo v::obj) (with-access::setfield/Cinfo o (side-effect) (set! side-effect v)))
(define-inline (setfield/Cinfo-type::type o::setfield/Cinfo) (with-access::setfield/Cinfo o (type) type))
(define-inline (setfield/Cinfo-type-set! o::setfield/Cinfo v::type) (with-access::setfield/Cinfo o (type) (set! type v)))
(define-inline (setfield/Cinfo-loc::obj o::setfield/Cinfo) (with-access::setfield/Cinfo o (loc) loc))
(define-inline (setfield/Cinfo-loc-set! o::setfield/Cinfo v::obj) (with-access::setfield/Cinfo o (loc) (set! loc v)))

;; new/Cinfo
(define-inline (make-new/Cinfo::new/Cinfo loc1475::obj type1476::type side-effect1477::obj key1478::obj expr*1479::pair-nil effect1480::obj c-format1481::bstring args-type1482::pair-nil approx1483::approx) (instantiate::new/Cinfo (loc loc1475) (type type1476) (side-effect side-effect1477) (key key1478) (expr* expr*1479) (effect effect1480) (c-format c-format1481) (args-type args-type1482) (approx approx1483)))
(define-inline (new/Cinfo?::bool obj::obj) ((@ isa? __object) obj (@ new/Cinfo cfa_info3)))
(define (new/Cinfo-nil::new/Cinfo) (class-nil (@ new/Cinfo cfa_info3)))
(define-inline (new/Cinfo-approx::approx o::new/Cinfo) (with-access::new/Cinfo o (approx) approx))
(define-inline (new/Cinfo-approx-set! o::new/Cinfo v::approx) (with-access::new/Cinfo o (approx) (set! approx v)))
(define-inline (new/Cinfo-args-type::pair-nil o::new/Cinfo) (with-access::new/Cinfo o (args-type) args-type))
(define-inline (new/Cinfo-args-type-set! o::new/Cinfo v::pair-nil) (with-access::new/Cinfo o (args-type) (set! args-type v)))
(define-inline (new/Cinfo-c-format::bstring o::new/Cinfo) (with-access::new/Cinfo o (c-format) c-format))
(define-inline (new/Cinfo-c-format-set! o::new/Cinfo v::bstring) (with-access::new/Cinfo o (c-format) (set! c-format v)))
(define-inline (new/Cinfo-effect::obj o::new/Cinfo) (with-access::new/Cinfo o (effect) effect))
(define-inline (new/Cinfo-effect-set! o::new/Cinfo v::obj) (with-access::new/Cinfo o (effect) (set! effect v)))
(define-inline (new/Cinfo-expr*::pair-nil o::new/Cinfo) (with-access::new/Cinfo o (expr*) expr*))
(define-inline (new/Cinfo-expr*-set! o::new/Cinfo v::pair-nil) (with-access::new/Cinfo o (expr*) (set! expr* v)))
(define-inline (new/Cinfo-key::obj o::new/Cinfo) (with-access::new/Cinfo o (key) key))
(define-inline (new/Cinfo-key-set! o::new/Cinfo v::obj) (with-access::new/Cinfo o (key) (set! key v)))
(define-inline (new/Cinfo-side-effect::obj o::new/Cinfo) (with-access::new/Cinfo o (side-effect) side-effect))
(define-inline (new/Cinfo-side-effect-set! o::new/Cinfo v::obj) (with-access::new/Cinfo o (side-effect) (set! side-effect v)))
(define-inline (new/Cinfo-type::type o::new/Cinfo) (with-access::new/Cinfo o (type) type))
(define-inline (new/Cinfo-type-set! o::new/Cinfo v::type) (with-access::new/Cinfo o (type) (set! type v)))
(define-inline (new/Cinfo-loc::obj o::new/Cinfo) (with-access::new/Cinfo o (loc) loc))
(define-inline (new/Cinfo-loc-set! o::new/Cinfo v::obj) (with-access::new/Cinfo o (loc) (set! loc v)))

;; instanceof/Cinfo
(define-inline (make-instanceof/Cinfo::instanceof/Cinfo loc1465::obj type1466::type side-effect1467::obj key1468::obj expr*1469::pair-nil effect1470::obj c-format1471::bstring class1472::type approx1473::approx) (instantiate::instanceof/Cinfo (loc loc1465) (type type1466) (side-effect side-effect1467) (key key1468) (expr* expr*1469) (effect effect1470) (c-format c-format1471) (class class1472) (approx approx1473)))
(define-inline (instanceof/Cinfo?::bool obj::obj) ((@ isa? __object) obj (@ instanceof/Cinfo cfa_info3)))
(define (instanceof/Cinfo-nil::instanceof/Cinfo) (class-nil (@ instanceof/Cinfo cfa_info3)))
(define-inline (instanceof/Cinfo-approx::approx o::instanceof/Cinfo) (with-access::instanceof/Cinfo o (approx) approx))
(define-inline (instanceof/Cinfo-approx-set! o::instanceof/Cinfo v::approx) (with-access::instanceof/Cinfo o (approx) (set! approx v)))
(define-inline (instanceof/Cinfo-class::type o::instanceof/Cinfo) (with-access::instanceof/Cinfo o (class) class))
(define-inline (instanceof/Cinfo-class-set! o::instanceof/Cinfo v::type) (with-access::instanceof/Cinfo o (class) (set! class v)))
(define-inline (instanceof/Cinfo-c-format::bstring o::instanceof/Cinfo) (with-access::instanceof/Cinfo o (c-format) c-format))
(define-inline (instanceof/Cinfo-c-format-set! o::instanceof/Cinfo v::bstring) (with-access::instanceof/Cinfo o (c-format) (set! c-format v)))
(define-inline (instanceof/Cinfo-effect::obj o::instanceof/Cinfo) (with-access::instanceof/Cinfo o (effect) effect))
(define-inline (instanceof/Cinfo-effect-set! o::instanceof/Cinfo v::obj) (with-access::instanceof/Cinfo o (effect) (set! effect v)))
(define-inline (instanceof/Cinfo-expr*::pair-nil o::instanceof/Cinfo) (with-access::instanceof/Cinfo o (expr*) expr*))
(define-inline (instanceof/Cinfo-expr*-set! o::instanceof/Cinfo v::pair-nil) (with-access::instanceof/Cinfo o (expr*) (set! expr* v)))
(define-inline (instanceof/Cinfo-key::obj o::instanceof/Cinfo) (with-access::instanceof/Cinfo o (key) key))
(define-inline (instanceof/Cinfo-key-set! o::instanceof/Cinfo v::obj) (with-access::instanceof/Cinfo o (key) (set! key v)))
(define-inline (instanceof/Cinfo-side-effect::obj o::instanceof/Cinfo) (with-access::instanceof/Cinfo o (side-effect) side-effect))
(define-inline (instanceof/Cinfo-side-effect-set! o::instanceof/Cinfo v::obj) (with-access::instanceof/Cinfo o (side-effect) (set! side-effect v)))
(define-inline (instanceof/Cinfo-type::type o::instanceof/Cinfo) (with-access::instanceof/Cinfo o (type) type))
(define-inline (instanceof/Cinfo-type-set! o::instanceof/Cinfo v::type) (with-access::instanceof/Cinfo o (type) (set! type v)))
(define-inline (instanceof/Cinfo-loc::obj o::instanceof/Cinfo) (with-access::instanceof/Cinfo o (loc) loc))
(define-inline (instanceof/Cinfo-loc-set! o::instanceof/Cinfo v::obj) (with-access::instanceof/Cinfo o (loc) (set! loc v)))

;; cast-null/Cinfo
(define-inline (make-cast-null/Cinfo::cast-null/Cinfo loc1456::obj type1457::type side-effect1458::obj key1459::obj expr*1460::pair-nil effect1461::obj c-format1462::bstring approx1463::approx) (instantiate::cast-null/Cinfo (loc loc1456) (type type1457) (side-effect side-effect1458) (key key1459) (expr* expr*1460) (effect effect1461) (c-format c-format1462) (approx approx1463)))
(define-inline (cast-null/Cinfo?::bool obj::obj) ((@ isa? __object) obj (@ cast-null/Cinfo cfa_info3)))
(define (cast-null/Cinfo-nil::cast-null/Cinfo) (class-nil (@ cast-null/Cinfo cfa_info3)))
(define-inline (cast-null/Cinfo-approx::approx o::cast-null/Cinfo) (with-access::cast-null/Cinfo o (approx) approx))
(define-inline (cast-null/Cinfo-approx-set! o::cast-null/Cinfo v::approx) (with-access::cast-null/Cinfo o (approx) (set! approx v)))
(define-inline (cast-null/Cinfo-c-format::bstring o::cast-null/Cinfo) (with-access::cast-null/Cinfo o (c-format) c-format))
(define-inline (cast-null/Cinfo-c-format-set! o::cast-null/Cinfo v::bstring) (with-access::cast-null/Cinfo o (c-format) (set! c-format v)))
(define-inline (cast-null/Cinfo-effect::obj o::cast-null/Cinfo) (with-access::cast-null/Cinfo o (effect) effect))
(define-inline (cast-null/Cinfo-effect-set! o::cast-null/Cinfo v::obj) (with-access::cast-null/Cinfo o (effect) (set! effect v)))
(define-inline (cast-null/Cinfo-expr*::pair-nil o::cast-null/Cinfo) (with-access::cast-null/Cinfo o (expr*) expr*))
(define-inline (cast-null/Cinfo-expr*-set! o::cast-null/Cinfo v::pair-nil) (with-access::cast-null/Cinfo o (expr*) (set! expr* v)))
(define-inline (cast-null/Cinfo-key::obj o::cast-null/Cinfo) (with-access::cast-null/Cinfo o (key) key))
(define-inline (cast-null/Cinfo-key-set! o::cast-null/Cinfo v::obj) (with-access::cast-null/Cinfo o (key) (set! key v)))
(define-inline (cast-null/Cinfo-side-effect::obj o::cast-null/Cinfo) (with-access::cast-null/Cinfo o (side-effect) side-effect))
(define-inline (cast-null/Cinfo-side-effect-set! o::cast-null/Cinfo v::obj) (with-access::cast-null/Cinfo o (side-effect) (set! side-effect v)))
(define-inline (cast-null/Cinfo-type::type o::cast-null/Cinfo) (with-access::cast-null/Cinfo o (type) type))
(define-inline (cast-null/Cinfo-type-set! o::cast-null/Cinfo v::type) (with-access::cast-null/Cinfo o (type) (set! type v)))
(define-inline (cast-null/Cinfo-loc::obj o::cast-null/Cinfo) (with-access::cast-null/Cinfo o (loc) loc))
(define-inline (cast-null/Cinfo-loc-set! o::cast-null/Cinfo v::obj) (with-access::cast-null/Cinfo o (loc) (set! loc v)))

;; vref/Cinfo
(define-inline (make-vref/Cinfo::vref/Cinfo loc1442::obj type1443::type side-effect1444::obj key1445::obj expr*1446::pair-nil effect1447::obj c-format1448::bstring ftype1449::type otype1450::type vtype1451::type unsafe1452::bool approx1453::approx tvector?1454::bool) (instantiate::vref/Cinfo (loc loc1442) (type type1443) (side-effect side-effect1444) (key key1445) (expr* expr*1446) (effect effect1447) (c-format c-format1448) (ftype ftype1449) (otype otype1450) (vtype vtype1451) (unsafe unsafe1452) (approx approx1453) (tvector? tvector?1454)))
(define-inline (vref/Cinfo?::bool obj::obj) ((@ isa? __object) obj (@ vref/Cinfo cfa_info3)))
(define (vref/Cinfo-nil::vref/Cinfo) (class-nil (@ vref/Cinfo cfa_info3)))
(define-inline (vref/Cinfo-tvector?::bool o::vref/Cinfo) (with-access::vref/Cinfo o (tvector?) tvector?))
(define-inline (vref/Cinfo-tvector?-set! o::vref/Cinfo v::bool) (with-access::vref/Cinfo o (tvector?) (set! tvector? v)))
(define-inline (vref/Cinfo-approx::approx o::vref/Cinfo) (with-access::vref/Cinfo o (approx) approx))
(define-inline (vref/Cinfo-approx-set! o::vref/Cinfo v::approx) (with-access::vref/Cinfo o (approx) (set! approx v)))
(define-inline (vref/Cinfo-unsafe::bool o::vref/Cinfo) (with-access::vref/Cinfo o (unsafe) unsafe))
(define-inline (vref/Cinfo-unsafe-set! o::vref/Cinfo v::bool) (with-access::vref/Cinfo o (unsafe) (set! unsafe v)))
(define-inline (vref/Cinfo-vtype::type o::vref/Cinfo) (with-access::vref/Cinfo o (vtype) vtype))
(define-inline (vref/Cinfo-vtype-set! o::vref/Cinfo v::type) (with-access::vref/Cinfo o (vtype) (set! vtype v)))
(define-inline (vref/Cinfo-otype::type o::vref/Cinfo) (with-access::vref/Cinfo o (otype) otype))
(define-inline (vref/Cinfo-otype-set! o::vref/Cinfo v::type) (with-access::vref/Cinfo o (otype) (set! otype v)))
(define-inline (vref/Cinfo-ftype::type o::vref/Cinfo) (with-access::vref/Cinfo o (ftype) ftype))
(define-inline (vref/Cinfo-ftype-set! o::vref/Cinfo v::type) (with-access::vref/Cinfo o (ftype) (set! ftype v)))
(define-inline (vref/Cinfo-c-format::bstring o::vref/Cinfo) (with-access::vref/Cinfo o (c-format) c-format))
(define-inline (vref/Cinfo-c-format-set! o::vref/Cinfo v::bstring) (with-access::vref/Cinfo o (c-format) (set! c-format v)))
(define-inline (vref/Cinfo-effect::obj o::vref/Cinfo) (with-access::vref/Cinfo o (effect) effect))
(define-inline (vref/Cinfo-effect-set! o::vref/Cinfo v::obj) (with-access::vref/Cinfo o (effect) (set! effect v)))
(define-inline (vref/Cinfo-expr*::pair-nil o::vref/Cinfo) (with-access::vref/Cinfo o (expr*) expr*))
(define-inline (vref/Cinfo-expr*-set! o::vref/Cinfo v::pair-nil) (with-access::vref/Cinfo o (expr*) (set! expr* v)))
(define-inline (vref/Cinfo-key::obj o::vref/Cinfo) (with-access::vref/Cinfo o (key) key))
(define-inline (vref/Cinfo-key-set! o::vref/Cinfo v::obj) (with-access::vref/Cinfo o (key) (set! key v)))
(define-inline (vref/Cinfo-side-effect::obj o::vref/Cinfo) (with-access::vref/Cinfo o (side-effect) side-effect))
(define-inline (vref/Cinfo-side-effect-set! o::vref/Cinfo v::obj) (with-access::vref/Cinfo o (side-effect) (set! side-effect v)))
(define-inline (vref/Cinfo-type::type o::vref/Cinfo) (with-access::vref/Cinfo o (type) type))
(define-inline (vref/Cinfo-type-set! o::vref/Cinfo v::type) (with-access::vref/Cinfo o (type) (set! type v)))
(define-inline (vref/Cinfo-loc::obj o::vref/Cinfo) (with-access::vref/Cinfo o (loc) loc))
(define-inline (vref/Cinfo-loc-set! o::vref/Cinfo v::obj) (with-access::vref/Cinfo o (loc) (set! loc v)))

;; vset!/Cinfo
(define-inline (make-vset!/Cinfo::vset!/Cinfo loc1428::obj type1429::type side-effect1430::obj key1431::obj expr*1432::pair-nil effect1433::obj c-format1434::bstring ftype1435::type otype1436::type vtype1437::type unsafe1438::bool approx1439::approx tvector?1440::bool) (instantiate::vset!/Cinfo (loc loc1428) (type type1429) (side-effect side-effect1430) (key key1431) (expr* expr*1432) (effect effect1433) (c-format c-format1434) (ftype ftype1435) (otype otype1436) (vtype vtype1437) (unsafe unsafe1438) (approx approx1439) (tvector? tvector?1440)))
(define-inline (vset!/Cinfo?::bool obj::obj) ((@ isa? __object) obj (@ vset!/Cinfo cfa_info3)))
(define (vset!/Cinfo-nil::vset!/Cinfo) (class-nil (@ vset!/Cinfo cfa_info3)))
(define-inline (vset!/Cinfo-tvector?::bool o::vset!/Cinfo) (with-access::vset!/Cinfo o (tvector?) tvector?))
(define-inline (vset!/Cinfo-tvector?-set! o::vset!/Cinfo v::bool) (with-access::vset!/Cinfo o (tvector?) (set! tvector? v)))
(define-inline (vset!/Cinfo-approx::approx o::vset!/Cinfo) (with-access::vset!/Cinfo o (approx) approx))
(define-inline (vset!/Cinfo-approx-set! o::vset!/Cinfo v::approx) (with-access::vset!/Cinfo o (approx) (set! approx v)))
(define-inline (vset!/Cinfo-unsafe::bool o::vset!/Cinfo) (with-access::vset!/Cinfo o (unsafe) unsafe))
(define-inline (vset!/Cinfo-unsafe-set! o::vset!/Cinfo v::bool) (with-access::vset!/Cinfo o (unsafe) (set! unsafe v)))
(define-inline (vset!/Cinfo-vtype::type o::vset!/Cinfo) (with-access::vset!/Cinfo o (vtype) vtype))
(define-inline (vset!/Cinfo-vtype-set! o::vset!/Cinfo v::type) (with-access::vset!/Cinfo o (vtype) (set! vtype v)))
(define-inline (vset!/Cinfo-otype::type o::vset!/Cinfo) (with-access::vset!/Cinfo o (otype) otype))
(define-inline (vset!/Cinfo-otype-set! o::vset!/Cinfo v::type) (with-access::vset!/Cinfo o (otype) (set! otype v)))
(define-inline (vset!/Cinfo-ftype::type o::vset!/Cinfo) (with-access::vset!/Cinfo o (ftype) ftype))
(define-inline (vset!/Cinfo-ftype-set! o::vset!/Cinfo v::type) (with-access::vset!/Cinfo o (ftype) (set! ftype v)))
(define-inline (vset!/Cinfo-c-format::bstring o::vset!/Cinfo) (with-access::vset!/Cinfo o (c-format) c-format))
(define-inline (vset!/Cinfo-c-format-set! o::vset!/Cinfo v::bstring) (with-access::vset!/Cinfo o (c-format) (set! c-format v)))
(define-inline (vset!/Cinfo-effect::obj o::vset!/Cinfo) (with-access::vset!/Cinfo o (effect) effect))
(define-inline (vset!/Cinfo-effect-set! o::vset!/Cinfo v::obj) (with-access::vset!/Cinfo o (effect) (set! effect v)))
(define-inline (vset!/Cinfo-expr*::pair-nil o::vset!/Cinfo) (with-access::vset!/Cinfo o (expr*) expr*))
(define-inline (vset!/Cinfo-expr*-set! o::vset!/Cinfo v::pair-nil) (with-access::vset!/Cinfo o (expr*) (set! expr* v)))
(define-inline (vset!/Cinfo-key::obj o::vset!/Cinfo) (with-access::vset!/Cinfo o (key) key))
(define-inline (vset!/Cinfo-key-set! o::vset!/Cinfo v::obj) (with-access::vset!/Cinfo o (key) (set! key v)))
(define-inline (vset!/Cinfo-side-effect::obj o::vset!/Cinfo) (with-access::vset!/Cinfo o (side-effect) side-effect))
(define-inline (vset!/Cinfo-side-effect-set! o::vset!/Cinfo v::obj) (with-access::vset!/Cinfo o (side-effect) (set! side-effect v)))
(define-inline (vset!/Cinfo-type::type o::vset!/Cinfo) (with-access::vset!/Cinfo o (type) type))
(define-inline (vset!/Cinfo-type-set! o::vset!/Cinfo v::type) (with-access::vset!/Cinfo o (type) (set! type v)))
(define-inline (vset!/Cinfo-loc::obj o::vset!/Cinfo) (with-access::vset!/Cinfo o (loc) loc))
(define-inline (vset!/Cinfo-loc-set! o::vset!/Cinfo v::obj) (with-access::vset!/Cinfo o (loc) (set! loc v)))

;; vlength/Cinfo
(define-inline (make-vlength/Cinfo::vlength/Cinfo loc1416::obj type1417::type side-effect1418::obj key1419::obj expr*1420::pair-nil effect1421::obj c-format1422::bstring vtype1423::type approx1424::approx tvector?1425::bool) (instantiate::vlength/Cinfo (loc loc1416) (type type1417) (side-effect side-effect1418) (key key1419) (expr* expr*1420) (effect effect1421) (c-format c-format1422) (vtype vtype1423) (approx approx1424) (tvector? tvector?1425)))
(define-inline (vlength/Cinfo?::bool obj::obj) ((@ isa? __object) obj (@ vlength/Cinfo cfa_info3)))
(define (vlength/Cinfo-nil::vlength/Cinfo) (class-nil (@ vlength/Cinfo cfa_info3)))
(define-inline (vlength/Cinfo-tvector?::bool o::vlength/Cinfo) (with-access::vlength/Cinfo o (tvector?) tvector?))
(define-inline (vlength/Cinfo-tvector?-set! o::vlength/Cinfo v::bool) (with-access::vlength/Cinfo o (tvector?) (set! tvector? v)))
(define-inline (vlength/Cinfo-approx::approx o::vlength/Cinfo) (with-access::vlength/Cinfo o (approx) approx))
(define-inline (vlength/Cinfo-approx-set! o::vlength/Cinfo v::approx) (with-access::vlength/Cinfo o (approx) (set! approx v)))
(define-inline (vlength/Cinfo-vtype::type o::vlength/Cinfo) (with-access::vlength/Cinfo o (vtype) vtype))
(define-inline (vlength/Cinfo-vtype-set! o::vlength/Cinfo v::type) (with-access::vlength/Cinfo o (vtype) (set! vtype v)))
(define-inline (vlength/Cinfo-c-format::bstring o::vlength/Cinfo) (with-access::vlength/Cinfo o (c-format) c-format))
(define-inline (vlength/Cinfo-c-format-set! o::vlength/Cinfo v::bstring) (with-access::vlength/Cinfo o (c-format) (set! c-format v)))
(define-inline (vlength/Cinfo-effect::obj o::vlength/Cinfo) (with-access::vlength/Cinfo o (effect) effect))
(define-inline (vlength/Cinfo-effect-set! o::vlength/Cinfo v::obj) (with-access::vlength/Cinfo o (effect) (set! effect v)))
(define-inline (vlength/Cinfo-expr*::pair-nil o::vlength/Cinfo) (with-access::vlength/Cinfo o (expr*) expr*))
(define-inline (vlength/Cinfo-expr*-set! o::vlength/Cinfo v::pair-nil) (with-access::vlength/Cinfo o (expr*) (set! expr* v)))
(define-inline (vlength/Cinfo-key::obj o::vlength/Cinfo) (with-access::vlength/Cinfo o (key) key))
(define-inline (vlength/Cinfo-key-set! o::vlength/Cinfo v::obj) (with-access::vlength/Cinfo o (key) (set! key v)))
(define-inline (vlength/Cinfo-side-effect::obj o::vlength/Cinfo) (with-access::vlength/Cinfo o (side-effect) side-effect))
(define-inline (vlength/Cinfo-side-effect-set! o::vlength/Cinfo v::obj) (with-access::vlength/Cinfo o (side-effect) (set! side-effect v)))
(define-inline (vlength/Cinfo-type::type o::vlength/Cinfo) (with-access::vlength/Cinfo o (type) type))
(define-inline (vlength/Cinfo-type-set! o::vlength/Cinfo v::type) (with-access::vlength/Cinfo o (type) (set! type v)))
(define-inline (vlength/Cinfo-loc::obj o::vlength/Cinfo) (with-access::vlength/Cinfo o (loc) loc))
(define-inline (vlength/Cinfo-loc-set! o::vlength/Cinfo v::obj) (with-access::vlength/Cinfo o (loc) (set! loc v)))

;; pre-valloc/Cinfo
(define-inline (make-pre-valloc/Cinfo::pre-valloc/Cinfo loc1405::obj type1406::type side-effect1407::obj key1408::obj expr*1409::pair-nil effect1410::obj c-format1411::bstring ftype1412::type otype1413::type owner1414::variable) (instantiate::pre-valloc/Cinfo (loc loc1405) (type type1406) (side-effect side-effect1407) (key key1408) (expr* expr*1409) (effect effect1410) (c-format c-format1411) (ftype ftype1412) (otype otype1413) (owner owner1414)))
(define-inline (pre-valloc/Cinfo?::bool obj::obj) ((@ isa? __object) obj (@ pre-valloc/Cinfo cfa_info3)))
(define (pre-valloc/Cinfo-nil::pre-valloc/Cinfo) (class-nil (@ pre-valloc/Cinfo cfa_info3)))
(define-inline (pre-valloc/Cinfo-owner::variable o::pre-valloc/Cinfo) (with-access::pre-valloc/Cinfo o (owner) owner))
(define-inline (pre-valloc/Cinfo-owner-set! o::pre-valloc/Cinfo v::variable) (with-access::pre-valloc/Cinfo o (owner) (set! owner v)))
(define-inline (pre-valloc/Cinfo-otype::type o::pre-valloc/Cinfo) (with-access::pre-valloc/Cinfo o (otype) otype))
(define-inline (pre-valloc/Cinfo-otype-set! o::pre-valloc/Cinfo v::type) (with-access::pre-valloc/Cinfo o (otype) (set! otype v)))
(define-inline (pre-valloc/Cinfo-ftype::type o::pre-valloc/Cinfo) (with-access::pre-valloc/Cinfo o (ftype) ftype))
(define-inline (pre-valloc/Cinfo-ftype-set! o::pre-valloc/Cinfo v::type) (with-access::pre-valloc/Cinfo o (ftype) (set! ftype v)))
(define-inline (pre-valloc/Cinfo-c-format::bstring o::pre-valloc/Cinfo) (with-access::pre-valloc/Cinfo o (c-format) c-format))
(define-inline (pre-valloc/Cinfo-c-format-set! o::pre-valloc/Cinfo v::bstring) (with-access::pre-valloc/Cinfo o (c-format) (set! c-format v)))
(define-inline (pre-valloc/Cinfo-effect::obj o::pre-valloc/Cinfo) (with-access::pre-valloc/Cinfo o (effect) effect))
(define-inline (pre-valloc/Cinfo-effect-set! o::pre-valloc/Cinfo v::obj) (with-access::pre-valloc/Cinfo o (effect) (set! effect v)))
(define-inline (pre-valloc/Cinfo-expr*::pair-nil o::pre-valloc/Cinfo) (with-access::pre-valloc/Cinfo o (expr*) expr*))
(define-inline (pre-valloc/Cinfo-expr*-set! o::pre-valloc/Cinfo v::pair-nil) (with-access::pre-valloc/Cinfo o (expr*) (set! expr* v)))
(define-inline (pre-valloc/Cinfo-key::obj o::pre-valloc/Cinfo) (with-access::pre-valloc/Cinfo o (key) key))
(define-inline (pre-valloc/Cinfo-key-set! o::pre-valloc/Cinfo v::obj) (with-access::pre-valloc/Cinfo o (key) (set! key v)))
(define-inline (pre-valloc/Cinfo-side-effect::obj o::pre-valloc/Cinfo) (with-access::pre-valloc/Cinfo o (side-effect) side-effect))
(define-inline (pre-valloc/Cinfo-side-effect-set! o::pre-valloc/Cinfo v::obj) (with-access::pre-valloc/Cinfo o (side-effect) (set! side-effect v)))
(define-inline (pre-valloc/Cinfo-type::type o::pre-valloc/Cinfo) (with-access::pre-valloc/Cinfo o (type) type))
(define-inline (pre-valloc/Cinfo-type-set! o::pre-valloc/Cinfo v::type) (with-access::pre-valloc/Cinfo o (type) (set! type v)))
(define-inline (pre-valloc/Cinfo-loc::obj o::pre-valloc/Cinfo) (with-access::pre-valloc/Cinfo o (loc) loc))
(define-inline (pre-valloc/Cinfo-loc-set! o::pre-valloc/Cinfo v::obj) (with-access::pre-valloc/Cinfo o (loc) (set! loc v)))

;; valloc/Cinfo
(define-inline (make-valloc/Cinfo::valloc/Cinfo loc1394::obj type1395::type side-effect1396::obj key1397::obj expr*1398::pair-nil effect1399::obj c-format1400::bstring ftype1401::type otype1402::type approx1403::approx) (instantiate::valloc/Cinfo (loc loc1394) (type type1395) (side-effect side-effect1396) (key key1397) (expr* expr*1398) (effect effect1399) (c-format c-format1400) (ftype ftype1401) (otype otype1402) (approx approx1403)))
(define-inline (valloc/Cinfo?::bool obj::obj) ((@ isa? __object) obj (@ valloc/Cinfo cfa_info3)))
(define (valloc/Cinfo-nil::valloc/Cinfo) (class-nil (@ valloc/Cinfo cfa_info3)))
(define-inline (valloc/Cinfo-approx::approx o::valloc/Cinfo) (with-access::valloc/Cinfo o (approx) approx))
(define-inline (valloc/Cinfo-approx-set! o::valloc/Cinfo v::approx) (with-access::valloc/Cinfo o (approx) (set! approx v)))
(define-inline (valloc/Cinfo-otype::type o::valloc/Cinfo) (with-access::valloc/Cinfo o (otype) otype))
(define-inline (valloc/Cinfo-otype-set! o::valloc/Cinfo v::type) (with-access::valloc/Cinfo o (otype) (set! otype v)))
(define-inline (valloc/Cinfo-ftype::type o::valloc/Cinfo) (with-access::valloc/Cinfo o (ftype) ftype))
(define-inline (valloc/Cinfo-ftype-set! o::valloc/Cinfo v::type) (with-access::valloc/Cinfo o (ftype) (set! ftype v)))
(define-inline (valloc/Cinfo-c-format::bstring o::valloc/Cinfo) (with-access::valloc/Cinfo o (c-format) c-format))
(define-inline (valloc/Cinfo-c-format-set! o::valloc/Cinfo v::bstring) (with-access::valloc/Cinfo o (c-format) (set! c-format v)))
(define-inline (valloc/Cinfo-effect::obj o::valloc/Cinfo) (with-access::valloc/Cinfo o (effect) effect))
(define-inline (valloc/Cinfo-effect-set! o::valloc/Cinfo v::obj) (with-access::valloc/Cinfo o (effect) (set! effect v)))
(define-inline (valloc/Cinfo-expr*::pair-nil o::valloc/Cinfo) (with-access::valloc/Cinfo o (expr*) expr*))
(define-inline (valloc/Cinfo-expr*-set! o::valloc/Cinfo v::pair-nil) (with-access::valloc/Cinfo o (expr*) (set! expr* v)))
(define-inline (valloc/Cinfo-key::obj o::valloc/Cinfo) (with-access::valloc/Cinfo o (key) key))
(define-inline (valloc/Cinfo-key-set! o::valloc/Cinfo v::obj) (with-access::valloc/Cinfo o (key) (set! key v)))
(define-inline (valloc/Cinfo-side-effect::obj o::valloc/Cinfo) (with-access::valloc/Cinfo o (side-effect) side-effect))
(define-inline (valloc/Cinfo-side-effect-set! o::valloc/Cinfo v::obj) (with-access::valloc/Cinfo o (side-effect) (set! side-effect v)))
(define-inline (valloc/Cinfo-type::type o::valloc/Cinfo) (with-access::valloc/Cinfo o (type) type))
(define-inline (valloc/Cinfo-type-set! o::valloc/Cinfo v::type) (with-access::valloc/Cinfo o (type) (set! type v)))
(define-inline (valloc/Cinfo-loc::obj o::valloc/Cinfo) (with-access::valloc/Cinfo o (loc) loc))
(define-inline (valloc/Cinfo-loc-set! o::valloc/Cinfo v::obj) (with-access::valloc/Cinfo o (loc) (set! loc v)))

;; valloc/Cinfo+optim
(define-inline (make-valloc/Cinfo+optim::valloc/Cinfo+optim loc1377::obj type1378::type side-effect1379::obj key1380::obj expr*1381::pair-nil effect1382::obj c-format1383::bstring ftype1384::type otype1385::type approx1386::approx value-approx1387::approx lost-stamp1388::long owner1389::variable stackable?1390::bool stack-stamp1391::obj seen?1392::bool) (instantiate::valloc/Cinfo+optim (loc loc1377) (type type1378) (side-effect side-effect1379) (key key1380) (expr* expr*1381) (effect effect1382) (c-format c-format1383) (ftype ftype1384) (otype otype1385) (approx approx1386) (value-approx value-approx1387) (lost-stamp lost-stamp1388) (owner owner1389) (stackable? stackable?1390) (stack-stamp stack-stamp1391) (seen? seen?1392)))
(define-inline (valloc/Cinfo+optim?::bool obj::obj) ((@ isa? __object) obj (@ valloc/Cinfo+optim cfa_info3)))
(define (valloc/Cinfo+optim-nil::valloc/Cinfo+optim) (class-nil (@ valloc/Cinfo+optim cfa_info3)))
(define-inline (valloc/Cinfo+optim-seen?::bool o::valloc/Cinfo+optim) (with-access::valloc/Cinfo+optim o (seen?) seen?))
(define-inline (valloc/Cinfo+optim-seen?-set! o::valloc/Cinfo+optim v::bool) (with-access::valloc/Cinfo+optim o (seen?) (set! seen? v)))
(define-inline (valloc/Cinfo+optim-stack-stamp::obj o::valloc/Cinfo+optim) (with-access::valloc/Cinfo+optim o (stack-stamp) stack-stamp))
(define-inline (valloc/Cinfo+optim-stack-stamp-set! o::valloc/Cinfo+optim v::obj) (with-access::valloc/Cinfo+optim o (stack-stamp) (set! stack-stamp v)))
(define-inline (valloc/Cinfo+optim-stackable?::bool o::valloc/Cinfo+optim) (with-access::valloc/Cinfo+optim o (stackable?) stackable?))
(define-inline (valloc/Cinfo+optim-stackable?-set! o::valloc/Cinfo+optim v::bool) (with-access::valloc/Cinfo+optim o (stackable?) (set! stackable? v)))
(define-inline (valloc/Cinfo+optim-owner::variable o::valloc/Cinfo+optim) (with-access::valloc/Cinfo+optim o (owner) owner))
(define-inline (valloc/Cinfo+optim-owner-set! o::valloc/Cinfo+optim v::variable) (with-access::valloc/Cinfo+optim o (owner) (set! owner v)))
(define-inline (valloc/Cinfo+optim-lost-stamp::long o::valloc/Cinfo+optim) (with-access::valloc/Cinfo+optim o (lost-stamp) lost-stamp))
(define-inline (valloc/Cinfo+optim-lost-stamp-set! o::valloc/Cinfo+optim v::long) (with-access::valloc/Cinfo+optim o (lost-stamp) (set! lost-stamp v)))
(define-inline (valloc/Cinfo+optim-value-approx::approx o::valloc/Cinfo+optim) (with-access::valloc/Cinfo+optim o (value-approx) value-approx))
(define-inline (valloc/Cinfo+optim-value-approx-set! o::valloc/Cinfo+optim v::approx) (with-access::valloc/Cinfo+optim o (value-approx) (set! value-approx v)))
(define-inline (valloc/Cinfo+optim-approx::approx o::valloc/Cinfo+optim) (with-access::valloc/Cinfo+optim o (approx) approx))
(define-inline (valloc/Cinfo+optim-approx-set! o::valloc/Cinfo+optim v::approx) (with-access::valloc/Cinfo+optim o (approx) (set! approx v)))
(define-inline (valloc/Cinfo+optim-otype::type o::valloc/Cinfo+optim) (with-access::valloc/Cinfo+optim o (otype) otype))
(define-inline (valloc/Cinfo+optim-otype-set! o::valloc/Cinfo+optim v::type) (with-access::valloc/Cinfo+optim o (otype) (set! otype v)))
(define-inline (valloc/Cinfo+optim-ftype::type o::valloc/Cinfo+optim) (with-access::valloc/Cinfo+optim o (ftype) ftype))
(define-inline (valloc/Cinfo+optim-ftype-set! o::valloc/Cinfo+optim v::type) (with-access::valloc/Cinfo+optim o (ftype) (set! ftype v)))
(define-inline (valloc/Cinfo+optim-c-format::bstring o::valloc/Cinfo+optim) (with-access::valloc/Cinfo+optim o (c-format) c-format))
(define-inline (valloc/Cinfo+optim-c-format-set! o::valloc/Cinfo+optim v::bstring) (with-access::valloc/Cinfo+optim o (c-format) (set! c-format v)))
(define-inline (valloc/Cinfo+optim-effect::obj o::valloc/Cinfo+optim) (with-access::valloc/Cinfo+optim o (effect) effect))
(define-inline (valloc/Cinfo+optim-effect-set! o::valloc/Cinfo+optim v::obj) (with-access::valloc/Cinfo+optim o (effect) (set! effect v)))
(define-inline (valloc/Cinfo+optim-expr*::pair-nil o::valloc/Cinfo+optim) (with-access::valloc/Cinfo+optim o (expr*) expr*))
(define-inline (valloc/Cinfo+optim-expr*-set! o::valloc/Cinfo+optim v::pair-nil) (with-access::valloc/Cinfo+optim o (expr*) (set! expr* v)))
(define-inline (valloc/Cinfo+optim-key::obj o::valloc/Cinfo+optim) (with-access::valloc/Cinfo+optim o (key) key))
(define-inline (valloc/Cinfo+optim-key-set! o::valloc/Cinfo+optim v::obj) (with-access::valloc/Cinfo+optim o (key) (set! key v)))
(define-inline (valloc/Cinfo+optim-side-effect::obj o::valloc/Cinfo+optim) (with-access::valloc/Cinfo+optim o (side-effect) side-effect))
(define-inline (valloc/Cinfo+optim-side-effect-set! o::valloc/Cinfo+optim v::obj) (with-access::valloc/Cinfo+optim o (side-effect) (set! side-effect v)))
(define-inline (valloc/Cinfo+optim-type::type o::valloc/Cinfo+optim) (with-access::valloc/Cinfo+optim o (type) type))
(define-inline (valloc/Cinfo+optim-type-set! o::valloc/Cinfo+optim v::type) (with-access::valloc/Cinfo+optim o (type) (set! type v)))
(define-inline (valloc/Cinfo+optim-loc::obj o::valloc/Cinfo+optim) (with-access::valloc/Cinfo+optim o (loc) loc))
(define-inline (valloc/Cinfo+optim-loc-set! o::valloc/Cinfo+optim v::obj) (with-access::valloc/Cinfo+optim o (loc) (set! loc v)))
))
