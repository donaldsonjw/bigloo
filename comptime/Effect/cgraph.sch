;; ==========================================================
;; Class accessors
;; Bigloo (4.2c)
;; Inria -- Sophia Antipolis     Fri Nov 6 10:55:25 CET 2015 
;; (bigloo.new -classgen Effect/cgraph.scm)
;; ==========================================================

;; The directives
(directives

;; local/from
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-local/from::local/from id1163::symbol name1164::obj type1165::type value1166::value access1167::obj fast-alpha1168::obj removable1169::obj occurrence1170::long occurrencew1171::long user?1172::bool key1173::long from1174::obj)
    (inline local/from?::bool ::obj)
    (local/from-nil::local/from)
    (inline local/from-from::obj ::local/from)
    (inline local/from-from-set! ::local/from ::obj)
    (inline local/from-key::long ::local/from)
    (inline local/from-user?::bool ::local/from)
    (inline local/from-user?-set! ::local/from ::bool)
    (inline local/from-occurrencew::long ::local/from)
    (inline local/from-occurrencew-set! ::local/from ::long)
    (inline local/from-occurrence::long ::local/from)
    (inline local/from-occurrence-set! ::local/from ::long)
    (inline local/from-removable::obj ::local/from)
    (inline local/from-removable-set! ::local/from ::obj)
    (inline local/from-fast-alpha::obj ::local/from)
    (inline local/from-fast-alpha-set! ::local/from ::obj)
    (inline local/from-access::obj ::local/from)
    (inline local/from-access-set! ::local/from ::obj)
    (inline local/from-value::value ::local/from)
    (inline local/from-value-set! ::local/from ::value)
    (inline local/from-type::type ::local/from)
    (inline local/from-type-set! ::local/from ::type)
    (inline local/from-name::obj ::local/from)
    (inline local/from-name-set! ::local/from ::obj)
    (inline local/from-id::symbol ::local/from))))

;; global/from
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-global/from::global/from id1141::symbol name1142::obj type1143::type value1144::value access1145::obj fast-alpha1146::obj removable1147::obj occurrence1148::long occurrencew1149::long user?1150::bool module1151::symbol import1152::obj evaluable?1153::bool eval?1154::bool library1155::obj pragma1156::obj src1157::obj jvm-type-name1158::bstring init1159::obj alias1160::obj from1161::obj)
    (inline global/from?::bool ::obj)
    (global/from-nil::global/from)
    (inline global/from-from::obj ::global/from)
    (inline global/from-from-set! ::global/from ::obj)
    (inline global/from-alias::obj ::global/from)
    (inline global/from-alias-set! ::global/from ::obj)
    (inline global/from-init::obj ::global/from)
    (inline global/from-init-set! ::global/from ::obj)
    (inline global/from-jvm-type-name::bstring ::global/from)
    (inline global/from-jvm-type-name-set! ::global/from ::bstring)
    (inline global/from-src::obj ::global/from)
    (inline global/from-src-set! ::global/from ::obj)
    (inline global/from-pragma::obj ::global/from)
    (inline global/from-pragma-set! ::global/from ::obj)
    (inline global/from-library::obj ::global/from)
    (inline global/from-library-set! ::global/from ::obj)
    (inline global/from-eval?::bool ::global/from)
    (inline global/from-eval?-set! ::global/from ::bool)
    (inline global/from-evaluable?::bool ::global/from)
    (inline global/from-evaluable?-set! ::global/from ::bool)
    (inline global/from-import::obj ::global/from)
    (inline global/from-import-set! ::global/from ::obj)
    (inline global/from-module::symbol ::global/from)
    (inline global/from-module-set! ::global/from ::symbol)
    (inline global/from-user?::bool ::global/from)
    (inline global/from-user?-set! ::global/from ::bool)
    (inline global/from-occurrencew::long ::global/from)
    (inline global/from-occurrencew-set! ::global/from ::long)
    (inline global/from-occurrence::long ::global/from)
    (inline global/from-occurrence-set! ::global/from ::long)
    (inline global/from-removable::obj ::global/from)
    (inline global/from-removable-set! ::global/from ::obj)
    (inline global/from-fast-alpha::obj ::global/from)
    (inline global/from-fast-alpha-set! ::global/from ::obj)
    (inline global/from-access::obj ::global/from)
    (inline global/from-access-set! ::global/from ::obj)
    (inline global/from-value::value ::global/from)
    (inline global/from-value-set! ::global/from ::value)
    (inline global/from-type::type ::global/from)
    (inline global/from-type-set! ::global/from ::type)
    (inline global/from-name::obj ::global/from)
    (inline global/from-name-set! ::global/from ::obj)
    (inline global/from-id::symbol ::global/from)))))

;; The definitions
(cond-expand (bigloo-class-sans
;; local/from
(define-inline (make-local/from::local/from id1163::symbol name1164::obj type1165::type value1166::value access1167::obj fast-alpha1168::obj removable1169::obj occurrence1170::long occurrencew1171::long user?1172::bool key1173::long from1174::obj) (instantiate::local/from (id id1163) (name name1164) (type type1165) (value value1166) (access access1167) (fast-alpha fast-alpha1168) (removable removable1169) (occurrence occurrence1170) (occurrencew occurrencew1171) (user? user?1172) (key key1173) (from from1174)))
(define-inline (local/from?::bool obj::obj) ((@ isa? __object) obj (@ local/from effect_cgraph)))
(define (local/from-nil::local/from) (class-nil (@ local/from effect_cgraph)))
(define-inline (local/from-from::obj o::local/from) (-> |#!bigloo_wallow| o from))
(define-inline (local/from-from-set! o::local/from v::obj) (set! (-> |#!bigloo_wallow| o from) v))
(define-inline (local/from-key::long o::local/from) (-> |#!bigloo_wallow| o key))
(define-inline (local/from-key-set! o::local/from v::long) (set! (-> |#!bigloo_wallow| o key) v))
(define-inline (local/from-user?::bool o::local/from) (-> |#!bigloo_wallow| o user?))
(define-inline (local/from-user?-set! o::local/from v::bool) (set! (-> |#!bigloo_wallow| o user?) v))
(define-inline (local/from-occurrencew::long o::local/from) (-> |#!bigloo_wallow| o occurrencew))
(define-inline (local/from-occurrencew-set! o::local/from v::long) (set! (-> |#!bigloo_wallow| o occurrencew) v))
(define-inline (local/from-occurrence::long o::local/from) (-> |#!bigloo_wallow| o occurrence))
(define-inline (local/from-occurrence-set! o::local/from v::long) (set! (-> |#!bigloo_wallow| o occurrence) v))
(define-inline (local/from-removable::obj o::local/from) (-> |#!bigloo_wallow| o removable))
(define-inline (local/from-removable-set! o::local/from v::obj) (set! (-> |#!bigloo_wallow| o removable) v))
(define-inline (local/from-fast-alpha::obj o::local/from) (-> |#!bigloo_wallow| o fast-alpha))
(define-inline (local/from-fast-alpha-set! o::local/from v::obj) (set! (-> |#!bigloo_wallow| o fast-alpha) v))
(define-inline (local/from-access::obj o::local/from) (-> |#!bigloo_wallow| o access))
(define-inline (local/from-access-set! o::local/from v::obj) (set! (-> |#!bigloo_wallow| o access) v))
(define-inline (local/from-value::value o::local/from) (-> |#!bigloo_wallow| o value))
(define-inline (local/from-value-set! o::local/from v::value) (set! (-> |#!bigloo_wallow| o value) v))
(define-inline (local/from-type::type o::local/from) (-> |#!bigloo_wallow| o type))
(define-inline (local/from-type-set! o::local/from v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (local/from-name::obj o::local/from) (-> |#!bigloo_wallow| o name))
(define-inline (local/from-name-set! o::local/from v::obj) (set! (-> |#!bigloo_wallow| o name) v))
(define-inline (local/from-id::symbol o::local/from) (-> |#!bigloo_wallow| o id))
(define-inline (local/from-id-set! o::local/from v::symbol) (set! (-> |#!bigloo_wallow| o id) v))

;; global/from
(define-inline (make-global/from::global/from id1141::symbol name1142::obj type1143::type value1144::value access1145::obj fast-alpha1146::obj removable1147::obj occurrence1148::long occurrencew1149::long user?1150::bool module1151::symbol import1152::obj evaluable?1153::bool eval?1154::bool library1155::obj pragma1156::obj src1157::obj jvm-type-name1158::bstring init1159::obj alias1160::obj from1161::obj) (instantiate::global/from (id id1141) (name name1142) (type type1143) (value value1144) (access access1145) (fast-alpha fast-alpha1146) (removable removable1147) (occurrence occurrence1148) (occurrencew occurrencew1149) (user? user?1150) (module module1151) (import import1152) (evaluable? evaluable?1153) (eval? eval?1154) (library library1155) (pragma pragma1156) (src src1157) (jvm-type-name jvm-type-name1158) (init init1159) (alias alias1160) (from from1161)))
(define-inline (global/from?::bool obj::obj) ((@ isa? __object) obj (@ global/from effect_cgraph)))
(define (global/from-nil::global/from) (class-nil (@ global/from effect_cgraph)))
(define-inline (global/from-from::obj o::global/from) (-> |#!bigloo_wallow| o from))
(define-inline (global/from-from-set! o::global/from v::obj) (set! (-> |#!bigloo_wallow| o from) v))
(define-inline (global/from-alias::obj o::global/from) (-> |#!bigloo_wallow| o alias))
(define-inline (global/from-alias-set! o::global/from v::obj) (set! (-> |#!bigloo_wallow| o alias) v))
(define-inline (global/from-init::obj o::global/from) (-> |#!bigloo_wallow| o init))
(define-inline (global/from-init-set! o::global/from v::obj) (set! (-> |#!bigloo_wallow| o init) v))
(define-inline (global/from-jvm-type-name::bstring o::global/from) (-> |#!bigloo_wallow| o jvm-type-name))
(define-inline (global/from-jvm-type-name-set! o::global/from v::bstring) (set! (-> |#!bigloo_wallow| o jvm-type-name) v))
(define-inline (global/from-src::obj o::global/from) (-> |#!bigloo_wallow| o src))
(define-inline (global/from-src-set! o::global/from v::obj) (set! (-> |#!bigloo_wallow| o src) v))
(define-inline (global/from-pragma::obj o::global/from) (-> |#!bigloo_wallow| o pragma))
(define-inline (global/from-pragma-set! o::global/from v::obj) (set! (-> |#!bigloo_wallow| o pragma) v))
(define-inline (global/from-library::obj o::global/from) (-> |#!bigloo_wallow| o library))
(define-inline (global/from-library-set! o::global/from v::obj) (set! (-> |#!bigloo_wallow| o library) v))
(define-inline (global/from-eval?::bool o::global/from) (-> |#!bigloo_wallow| o eval?))
(define-inline (global/from-eval?-set! o::global/from v::bool) (set! (-> |#!bigloo_wallow| o eval?) v))
(define-inline (global/from-evaluable?::bool o::global/from) (-> |#!bigloo_wallow| o evaluable?))
(define-inline (global/from-evaluable?-set! o::global/from v::bool) (set! (-> |#!bigloo_wallow| o evaluable?) v))
(define-inline (global/from-import::obj o::global/from) (-> |#!bigloo_wallow| o import))
(define-inline (global/from-import-set! o::global/from v::obj) (set! (-> |#!bigloo_wallow| o import) v))
(define-inline (global/from-module::symbol o::global/from) (-> |#!bigloo_wallow| o module))
(define-inline (global/from-module-set! o::global/from v::symbol) (set! (-> |#!bigloo_wallow| o module) v))
(define-inline (global/from-user?::bool o::global/from) (-> |#!bigloo_wallow| o user?))
(define-inline (global/from-user?-set! o::global/from v::bool) (set! (-> |#!bigloo_wallow| o user?) v))
(define-inline (global/from-occurrencew::long o::global/from) (-> |#!bigloo_wallow| o occurrencew))
(define-inline (global/from-occurrencew-set! o::global/from v::long) (set! (-> |#!bigloo_wallow| o occurrencew) v))
(define-inline (global/from-occurrence::long o::global/from) (-> |#!bigloo_wallow| o occurrence))
(define-inline (global/from-occurrence-set! o::global/from v::long) (set! (-> |#!bigloo_wallow| o occurrence) v))
(define-inline (global/from-removable::obj o::global/from) (-> |#!bigloo_wallow| o removable))
(define-inline (global/from-removable-set! o::global/from v::obj) (set! (-> |#!bigloo_wallow| o removable) v))
(define-inline (global/from-fast-alpha::obj o::global/from) (-> |#!bigloo_wallow| o fast-alpha))
(define-inline (global/from-fast-alpha-set! o::global/from v::obj) (set! (-> |#!bigloo_wallow| o fast-alpha) v))
(define-inline (global/from-access::obj o::global/from) (-> |#!bigloo_wallow| o access))
(define-inline (global/from-access-set! o::global/from v::obj) (set! (-> |#!bigloo_wallow| o access) v))
(define-inline (global/from-value::value o::global/from) (-> |#!bigloo_wallow| o value))
(define-inline (global/from-value-set! o::global/from v::value) (set! (-> |#!bigloo_wallow| o value) v))
(define-inline (global/from-type::type o::global/from) (-> |#!bigloo_wallow| o type))
(define-inline (global/from-type-set! o::global/from v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (global/from-name::obj o::global/from) (-> |#!bigloo_wallow| o name))
(define-inline (global/from-name-set! o::global/from v::obj) (set! (-> |#!bigloo_wallow| o name) v))
(define-inline (global/from-id::symbol o::global/from) (-> |#!bigloo_wallow| o id))
(define-inline (global/from-id-set! o::global/from v::symbol) (set! (-> |#!bigloo_wallow| o id) v))
))
