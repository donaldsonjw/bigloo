;; ==========================================================
;; Class accessors
;; Bigloo (3.7b)
;; Inria -- Sophia Antipolis     Mon Nov 14 17:23:21 CET 2011 
;; (bigloo.new -classgen Effect/cgraph.scm)
;; ==========================================================

;; The directives
(directives

;; local/from
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-local/from::local/from id1212::symbol name1213::obj type1214::type value1215::value access1216::obj fast-alpha1217::obj removable1218::obj occurrence1219::long occurrencew1220::long user?1221::bool key1222::long from1223::obj)
    (inline local/from?::bool ::obj)
    (local/from-nil::local/from)
    (inline local/from-from::obj ::local/from)
    (inline local/from-from-set! ::local/from ::obj)
    (inline local/from-key::long ::local/from)
    (inline local/from-user?::bool ::local/from)
    (inline local/from-user?-set! ::local/from ::bool)
    (inline local/from-occurrencew::long ::local/from)
    (inline local/from-occurrencew-set! ::local/from ::long)
    (inline local/from-occurrence::long ::local/from)
    (inline local/from-occurrence-set! ::local/from ::long)
    (inline local/from-removable::obj ::local/from)
    (inline local/from-removable-set! ::local/from ::obj)
    (inline local/from-fast-alpha::obj ::local/from)
    (inline local/from-fast-alpha-set! ::local/from ::obj)
    (inline local/from-access::obj ::local/from)
    (inline local/from-access-set! ::local/from ::obj)
    (inline local/from-value::value ::local/from)
    (inline local/from-value-set! ::local/from ::value)
    (inline local/from-type::type ::local/from)
    (inline local/from-type-set! ::local/from ::type)
    (inline local/from-name::obj ::local/from)
    (inline local/from-name-set! ::local/from ::obj)
    (inline local/from-id::symbol ::local/from))))

;; global/from
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-global/from::global/from id1191::symbol name1192::obj type1193::type value1194::value access1195::obj fast-alpha1196::obj removable1197::obj occurrence1198::long occurrencew1199::long user?1200::bool module1201::symbol import1202::obj evaluable?1203::bool eval?1204::bool library1205::obj pragma1206::obj src1207::obj jvm-type-name1208::bstring init1209::obj from1210::obj)
    (inline global/from?::bool ::obj)
    (global/from-nil::global/from)
    (inline global/from-from::obj ::global/from)
    (inline global/from-from-set! ::global/from ::obj)
    (inline global/from-init::obj ::global/from)
    (inline global/from-init-set! ::global/from ::obj)
    (inline global/from-jvm-type-name::bstring ::global/from)
    (inline global/from-jvm-type-name-set! ::global/from ::bstring)
    (inline global/from-src::obj ::global/from)
    (inline global/from-src-set! ::global/from ::obj)
    (inline global/from-pragma::obj ::global/from)
    (inline global/from-pragma-set! ::global/from ::obj)
    (inline global/from-library::obj ::global/from)
    (inline global/from-library-set! ::global/from ::obj)
    (inline global/from-eval?::bool ::global/from)
    (inline global/from-eval?-set! ::global/from ::bool)
    (inline global/from-evaluable?::bool ::global/from)
    (inline global/from-evaluable?-set! ::global/from ::bool)
    (inline global/from-import::obj ::global/from)
    (inline global/from-import-set! ::global/from ::obj)
    (inline global/from-module::symbol ::global/from)
    (inline global/from-module-set! ::global/from ::symbol)
    (inline global/from-user?::bool ::global/from)
    (inline global/from-user?-set! ::global/from ::bool)
    (inline global/from-occurrencew::long ::global/from)
    (inline global/from-occurrencew-set! ::global/from ::long)
    (inline global/from-occurrence::long ::global/from)
    (inline global/from-occurrence-set! ::global/from ::long)
    (inline global/from-removable::obj ::global/from)
    (inline global/from-removable-set! ::global/from ::obj)
    (inline global/from-fast-alpha::obj ::global/from)
    (inline global/from-fast-alpha-set! ::global/from ::obj)
    (inline global/from-access::obj ::global/from)
    (inline global/from-access-set! ::global/from ::obj)
    (inline global/from-value::value ::global/from)
    (inline global/from-value-set! ::global/from ::value)
    (inline global/from-type::type ::global/from)
    (inline global/from-type-set! ::global/from ::type)
    (inline global/from-name::obj ::global/from)
    (inline global/from-name-set! ::global/from ::obj)
    (inline global/from-id::symbol ::global/from)))))

;; The definitions
(cond-expand (bigloo-class-sans
;; local/from
(define-inline (make-local/from::local/from id1212::symbol name1213::obj type1214::type value1215::value access1216::obj fast-alpha1217::obj removable1218::obj occurrence1219::long occurrencew1220::long user?1221::bool key1222::long from1223::obj) (instantiate::local/from (id id1212) (name name1213) (type type1214) (value value1215) (access access1216) (fast-alpha fast-alpha1217) (removable removable1218) (occurrence occurrence1219) (occurrencew occurrencew1220) (user? user?1221) (key key1222) (from from1223)))
(define-inline (local/from?::bool obj::obj) ((@ isa? __object) obj (@ local/from effect_cgraph)))
(define (local/from-nil::local/from) (class-nil (@ local/from effect_cgraph)))
(define-inline (local/from-from::obj o::local/from) (with-access::local/from o (from) from))
(define-inline (local/from-from-set! o::local/from v::obj) (with-access::local/from o (from) (set! from v)))
(define-inline (local/from-key::long o::local/from) (with-access::local/from o (key) key))
(define-inline (local/from-key-set! o::local/from v::long) (with-access::local/from o (key) (set! key v)))
(define-inline (local/from-user?::bool o::local/from) (with-access::local/from o (user?) user?))
(define-inline (local/from-user?-set! o::local/from v::bool) (with-access::local/from o (user?) (set! user? v)))
(define-inline (local/from-occurrencew::long o::local/from) (with-access::local/from o (occurrencew) occurrencew))
(define-inline (local/from-occurrencew-set! o::local/from v::long) (with-access::local/from o (occurrencew) (set! occurrencew v)))
(define-inline (local/from-occurrence::long o::local/from) (with-access::local/from o (occurrence) occurrence))
(define-inline (local/from-occurrence-set! o::local/from v::long) (with-access::local/from o (occurrence) (set! occurrence v)))
(define-inline (local/from-removable::obj o::local/from) (with-access::local/from o (removable) removable))
(define-inline (local/from-removable-set! o::local/from v::obj) (with-access::local/from o (removable) (set! removable v)))
(define-inline (local/from-fast-alpha::obj o::local/from) (with-access::local/from o (fast-alpha) fast-alpha))
(define-inline (local/from-fast-alpha-set! o::local/from v::obj) (with-access::local/from o (fast-alpha) (set! fast-alpha v)))
(define-inline (local/from-access::obj o::local/from) (with-access::local/from o (access) access))
(define-inline (local/from-access-set! o::local/from v::obj) (with-access::local/from o (access) (set! access v)))
(define-inline (local/from-value::value o::local/from) (with-access::local/from o (value) value))
(define-inline (local/from-value-set! o::local/from v::value) (with-access::local/from o (value) (set! value v)))
(define-inline (local/from-type::type o::local/from) (with-access::local/from o (type) type))
(define-inline (local/from-type-set! o::local/from v::type) (with-access::local/from o (type) (set! type v)))
(define-inline (local/from-name::obj o::local/from) (with-access::local/from o (name) name))
(define-inline (local/from-name-set! o::local/from v::obj) (with-access::local/from o (name) (set! name v)))
(define-inline (local/from-id::symbol o::local/from) (with-access::local/from o (id) id))
(define-inline (local/from-id-set! o::local/from v::symbol) (with-access::local/from o (id) (set! id v)))

;; global/from
(define-inline (make-global/from::global/from id1191::symbol name1192::obj type1193::type value1194::value access1195::obj fast-alpha1196::obj removable1197::obj occurrence1198::long occurrencew1199::long user?1200::bool module1201::symbol import1202::obj evaluable?1203::bool eval?1204::bool library1205::obj pragma1206::obj src1207::obj jvm-type-name1208::bstring init1209::obj from1210::obj) (instantiate::global/from (id id1191) (name name1192) (type type1193) (value value1194) (access access1195) (fast-alpha fast-alpha1196) (removable removable1197) (occurrence occurrence1198) (occurrencew occurrencew1199) (user? user?1200) (module module1201) (import import1202) (evaluable? evaluable?1203) (eval? eval?1204) (library library1205) (pragma pragma1206) (src src1207) (jvm-type-name jvm-type-name1208) (init init1209) (from from1210)))
(define-inline (global/from?::bool obj::obj) ((@ isa? __object) obj (@ global/from effect_cgraph)))
(define (global/from-nil::global/from) (class-nil (@ global/from effect_cgraph)))
(define-inline (global/from-from::obj o::global/from) (with-access::global/from o (from) from))
(define-inline (global/from-from-set! o::global/from v::obj) (with-access::global/from o (from) (set! from v)))
(define-inline (global/from-init::obj o::global/from) (with-access::global/from o (init) init))
(define-inline (global/from-init-set! o::global/from v::obj) (with-access::global/from o (init) (set! init v)))
(define-inline (global/from-jvm-type-name::bstring o::global/from) (with-access::global/from o (jvm-type-name) jvm-type-name))
(define-inline (global/from-jvm-type-name-set! o::global/from v::bstring) (with-access::global/from o (jvm-type-name) (set! jvm-type-name v)))
(define-inline (global/from-src::obj o::global/from) (with-access::global/from o (src) src))
(define-inline (global/from-src-set! o::global/from v::obj) (with-access::global/from o (src) (set! src v)))
(define-inline (global/from-pragma::obj o::global/from) (with-access::global/from o (pragma) pragma))
(define-inline (global/from-pragma-set! o::global/from v::obj) (with-access::global/from o (pragma) (set! pragma v)))
(define-inline (global/from-library::obj o::global/from) (with-access::global/from o (library) library))
(define-inline (global/from-library-set! o::global/from v::obj) (with-access::global/from o (library) (set! library v)))
(define-inline (global/from-eval?::bool o::global/from) (with-access::global/from o (eval?) eval?))
(define-inline (global/from-eval?-set! o::global/from v::bool) (with-access::global/from o (eval?) (set! eval? v)))
(define-inline (global/from-evaluable?::bool o::global/from) (with-access::global/from o (evaluable?) evaluable?))
(define-inline (global/from-evaluable?-set! o::global/from v::bool) (with-access::global/from o (evaluable?) (set! evaluable? v)))
(define-inline (global/from-import::obj o::global/from) (with-access::global/from o (import) import))
(define-inline (global/from-import-set! o::global/from v::obj) (with-access::global/from o (import) (set! import v)))
(define-inline (global/from-module::symbol o::global/from) (with-access::global/from o (module) module))
(define-inline (global/from-module-set! o::global/from v::symbol) (with-access::global/from o (module) (set! module v)))
(define-inline (global/from-user?::bool o::global/from) (with-access::global/from o (user?) user?))
(define-inline (global/from-user?-set! o::global/from v::bool) (with-access::global/from o (user?) (set! user? v)))
(define-inline (global/from-occurrencew::long o::global/from) (with-access::global/from o (occurrencew) occurrencew))
(define-inline (global/from-occurrencew-set! o::global/from v::long) (with-access::global/from o (occurrencew) (set! occurrencew v)))
(define-inline (global/from-occurrence::long o::global/from) (with-access::global/from o (occurrence) occurrence))
(define-inline (global/from-occurrence-set! o::global/from v::long) (with-access::global/from o (occurrence) (set! occurrence v)))
(define-inline (global/from-removable::obj o::global/from) (with-access::global/from o (removable) removable))
(define-inline (global/from-removable-set! o::global/from v::obj) (with-access::global/from o (removable) (set! removable v)))
(define-inline (global/from-fast-alpha::obj o::global/from) (with-access::global/from o (fast-alpha) fast-alpha))
(define-inline (global/from-fast-alpha-set! o::global/from v::obj) (with-access::global/from o (fast-alpha) (set! fast-alpha v)))
(define-inline (global/from-access::obj o::global/from) (with-access::global/from o (access) access))
(define-inline (global/from-access-set! o::global/from v::obj) (with-access::global/from o (access) (set! access v)))
(define-inline (global/from-value::value o::global/from) (with-access::global/from o (value) value))
(define-inline (global/from-value-set! o::global/from v::value) (with-access::global/from o (value) (set! value v)))
(define-inline (global/from-type::type o::global/from) (with-access::global/from o (type) type))
(define-inline (global/from-type-set! o::global/from v::type) (with-access::global/from o (type) (set! type v)))
(define-inline (global/from-name::obj o::global/from) (with-access::global/from o (name) name))
(define-inline (global/from-name-set! o::global/from v::obj) (with-access::global/from o (name) (set! name v)))
(define-inline (global/from-id::symbol o::global/from) (with-access::global/from o (id) id))
(define-inline (global/from-id-set! o::global/from v::symbol) (with-access::global/from o (id) (set! id v)))
))
