;; ==========================================================
;; Class accessors
;; Bigloo (3.7b)
;; Inria -- Sophia Antipolis     Mon Nov 14 16:42:36 CET 2011 
;; (bigloo.new -classgen Foreign/ctype.scm)
;; ==========================================================

;; The directives
(directives

;; calias
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-calias::calias id1373::symbol name1374::obj size1375::obj class1376::obj coerce-to1377::obj parents1378::obj init?1379::bool magic?1380::bool $1381::obj alias1382::obj pointed-to-by1383::obj tvector1384::obj location1385::obj import-location1386::obj occurrence1387::int array?1388::bool)
    (inline calias?::bool ::obj)
    (calias-nil::calias)
    (inline calias-array?::bool ::calias)
    (inline calias-array?-set! ::calias ::bool)
    (inline calias-occurrence::int ::calias)
    (inline calias-occurrence-set! ::calias ::int)
    (inline calias-import-location::obj ::calias)
    (inline calias-import-location-set! ::calias ::obj)
    (inline calias-location::obj ::calias)
    (inline calias-location-set! ::calias ::obj)
    (inline calias-tvector::obj ::calias)
    (inline calias-tvector-set! ::calias ::obj)
    (inline calias-pointed-to-by::obj ::calias)
    (inline calias-pointed-to-by-set! ::calias ::obj)
    (inline calias-alias::obj ::calias)
    (inline calias-alias-set! ::calias ::obj)
    (inline calias-$::obj ::calias)
    (inline calias-$-set! ::calias ::obj)
    (inline calias-magic?::bool ::calias)
    (inline calias-magic?-set! ::calias ::bool)
    (inline calias-init?::bool ::calias)
    (inline calias-init?-set! ::calias ::bool)
    (inline calias-parents::obj ::calias)
    (inline calias-parents-set! ::calias ::obj)
    (inline calias-coerce-to::obj ::calias)
    (inline calias-coerce-to-set! ::calias ::obj)
    (inline calias-class::obj ::calias)
    (inline calias-class-set! ::calias ::obj)
    (inline calias-size::obj ::calias)
    (inline calias-size-set! ::calias ::obj)
    (inline calias-name::obj ::calias)
    (inline calias-name-set! ::calias ::obj)
    (inline calias-id::symbol ::calias))))

;; cenum
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-cenum::cenum id1355::symbol name1356::obj size1357::obj class1358::obj coerce-to1359::obj parents1360::obj init?1361::bool magic?1362::bool $1363::obj alias1364::obj pointed-to-by1365::obj tvector1366::obj location1367::obj import-location1368::obj occurrence1369::int btype1370::type literals1371::obj)
    (inline cenum?::bool ::obj)
    (cenum-nil::cenum)
    (inline cenum-literals::obj ::cenum)
    (inline cenum-btype::type ::cenum)
    (inline cenum-occurrence::int ::cenum)
    (inline cenum-occurrence-set! ::cenum ::int)
    (inline cenum-import-location::obj ::cenum)
    (inline cenum-import-location-set! ::cenum ::obj)
    (inline cenum-location::obj ::cenum)
    (inline cenum-location-set! ::cenum ::obj)
    (inline cenum-tvector::obj ::cenum)
    (inline cenum-tvector-set! ::cenum ::obj)
    (inline cenum-pointed-to-by::obj ::cenum)
    (inline cenum-pointed-to-by-set! ::cenum ::obj)
    (inline cenum-alias::obj ::cenum)
    (inline cenum-alias-set! ::cenum ::obj)
    (inline cenum-$::obj ::cenum)
    (inline cenum-$-set! ::cenum ::obj)
    (inline cenum-magic?::bool ::cenum)
    (inline cenum-magic?-set! ::cenum ::bool)
    (inline cenum-init?::bool ::cenum)
    (inline cenum-init?-set! ::cenum ::bool)
    (inline cenum-parents::obj ::cenum)
    (inline cenum-parents-set! ::cenum ::obj)
    (inline cenum-coerce-to::obj ::cenum)
    (inline cenum-coerce-to-set! ::cenum ::obj)
    (inline cenum-class::obj ::cenum)
    (inline cenum-class-set! ::cenum ::obj)
    (inline cenum-size::obj ::cenum)
    (inline cenum-size-set! ::cenum ::obj)
    (inline cenum-name::obj ::cenum)
    (inline cenum-name-set! ::cenum ::obj)
    (inline cenum-id::symbol ::cenum))))

;; copaque
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-copaque::copaque id1338::symbol name1339::obj size1340::obj class1341::obj coerce-to1342::obj parents1343::obj init?1344::bool magic?1345::bool $1346::obj alias1347::obj pointed-to-by1348::obj tvector1349::obj location1350::obj import-location1351::obj occurrence1352::int btype1353::type)
    (inline copaque?::bool ::obj)
    (copaque-nil::copaque)
    (inline copaque-btype::type ::copaque)
    (inline copaque-occurrence::int ::copaque)
    (inline copaque-occurrence-set! ::copaque ::int)
    (inline copaque-import-location::obj ::copaque)
    (inline copaque-import-location-set! ::copaque ::obj)
    (inline copaque-location::obj ::copaque)
    (inline copaque-location-set! ::copaque ::obj)
    (inline copaque-tvector::obj ::copaque)
    (inline copaque-tvector-set! ::copaque ::obj)
    (inline copaque-pointed-to-by::obj ::copaque)
    (inline copaque-pointed-to-by-set! ::copaque ::obj)
    (inline copaque-alias::obj ::copaque)
    (inline copaque-alias-set! ::copaque ::obj)
    (inline copaque-$::obj ::copaque)
    (inline copaque-$-set! ::copaque ::obj)
    (inline copaque-magic?::bool ::copaque)
    (inline copaque-magic?-set! ::copaque ::bool)
    (inline copaque-init?::bool ::copaque)
    (inline copaque-init?-set! ::copaque ::bool)
    (inline copaque-parents::obj ::copaque)
    (inline copaque-parents-set! ::copaque ::obj)
    (inline copaque-coerce-to::obj ::copaque)
    (inline copaque-coerce-to-set! ::copaque ::obj)
    (inline copaque-class::obj ::copaque)
    (inline copaque-class-set! ::copaque ::obj)
    (inline copaque-size::obj ::copaque)
    (inline copaque-size-set! ::copaque ::obj)
    (inline copaque-name::obj ::copaque)
    (inline copaque-name-set! ::copaque ::obj)
    (inline copaque-id::symbol ::copaque))))

;; cfunction
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-cfunction::cfunction id1318::symbol name1319::obj size1320::obj class1321::obj coerce-to1322::obj parents1323::obj init?1324::bool magic?1325::bool $1326::obj alias1327::obj pointed-to-by1328::obj tvector1329::obj location1330::obj import-location1331::obj occurrence1332::int btype1333::type arity1334::long type-res1335::type type-args1336::obj)
    (inline cfunction?::bool ::obj)
    (cfunction-nil::cfunction)
    (inline cfunction-type-args::obj ::cfunction)
    (inline cfunction-type-res::type ::cfunction)
    (inline cfunction-arity::long ::cfunction)
    (inline cfunction-btype::type ::cfunction)
    (inline cfunction-occurrence::int ::cfunction)
    (inline cfunction-occurrence-set! ::cfunction ::int)
    (inline cfunction-import-location::obj ::cfunction)
    (inline cfunction-import-location-set! ::cfunction ::obj)
    (inline cfunction-location::obj ::cfunction)
    (inline cfunction-location-set! ::cfunction ::obj)
    (inline cfunction-tvector::obj ::cfunction)
    (inline cfunction-tvector-set! ::cfunction ::obj)
    (inline cfunction-pointed-to-by::obj ::cfunction)
    (inline cfunction-pointed-to-by-set! ::cfunction ::obj)
    (inline cfunction-alias::obj ::cfunction)
    (inline cfunction-alias-set! ::cfunction ::obj)
    (inline cfunction-$::obj ::cfunction)
    (inline cfunction-$-set! ::cfunction ::obj)
    (inline cfunction-magic?::bool ::cfunction)
    (inline cfunction-magic?-set! ::cfunction ::bool)
    (inline cfunction-init?::bool ::cfunction)
    (inline cfunction-init?-set! ::cfunction ::bool)
    (inline cfunction-parents::obj ::cfunction)
    (inline cfunction-parents-set! ::cfunction ::obj)
    (inline cfunction-coerce-to::obj ::cfunction)
    (inline cfunction-coerce-to-set! ::cfunction ::obj)
    (inline cfunction-class::obj ::cfunction)
    (inline cfunction-class-set! ::cfunction ::obj)
    (inline cfunction-size::obj ::cfunction)
    (inline cfunction-size-set! ::cfunction ::obj)
    (inline cfunction-name::obj ::cfunction)
    (inline cfunction-name-set! ::cfunction ::obj)
    (inline cfunction-id::symbol ::cfunction))))

;; cptr
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-cptr::cptr id1299::symbol name1300::obj size1301::obj class1302::obj coerce-to1303::obj parents1304::obj init?1305::bool magic?1306::bool $1307::obj alias1308::obj pointed-to-by1309::obj tvector1310::obj location1311::obj import-location1312::obj occurrence1313::int btype1314::type point-to1315::type array?1316::bool)
    (inline cptr?::bool ::obj)
    (cptr-nil::cptr)
    (inline cptr-array?::bool ::cptr)
    (inline cptr-point-to::type ::cptr)
    (inline cptr-btype::type ::cptr)
    (inline cptr-occurrence::int ::cptr)
    (inline cptr-occurrence-set! ::cptr ::int)
    (inline cptr-import-location::obj ::cptr)
    (inline cptr-import-location-set! ::cptr ::obj)
    (inline cptr-location::obj ::cptr)
    (inline cptr-location-set! ::cptr ::obj)
    (inline cptr-tvector::obj ::cptr)
    (inline cptr-tvector-set! ::cptr ::obj)
    (inline cptr-pointed-to-by::obj ::cptr)
    (inline cptr-pointed-to-by-set! ::cptr ::obj)
    (inline cptr-alias::obj ::cptr)
    (inline cptr-alias-set! ::cptr ::obj)
    (inline cptr-$::obj ::cptr)
    (inline cptr-$-set! ::cptr ::obj)
    (inline cptr-magic?::bool ::cptr)
    (inline cptr-magic?-set! ::cptr ::bool)
    (inline cptr-init?::bool ::cptr)
    (inline cptr-init?-set! ::cptr ::bool)
    (inline cptr-parents::obj ::cptr)
    (inline cptr-parents-set! ::cptr ::obj)
    (inline cptr-coerce-to::obj ::cptr)
    (inline cptr-coerce-to-set! ::cptr ::obj)
    (inline cptr-class::obj ::cptr)
    (inline cptr-class-set! ::cptr ::obj)
    (inline cptr-size::obj ::cptr)
    (inline cptr-size-set! ::cptr ::obj)
    (inline cptr-name::obj ::cptr)
    (inline cptr-name-set! ::cptr ::obj)
    (inline cptr-id::symbol ::cptr))))

;; cstruct
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-cstruct::cstruct id1280::symbol name1281::obj size1282::obj class1283::obj coerce-to1284::obj parents1285::obj init?1286::bool magic?1287::bool $1288::obj alias1289::obj pointed-to-by1290::obj tvector1291::obj location1292::obj import-location1293::obj occurrence1294::int struct?1295::bool fields1296::obj cstruct*1297::obj)
    (inline cstruct?::bool ::obj)
    (cstruct-nil::cstruct)
    (inline cstruct-cstruct*::obj ::cstruct)
    (inline cstruct-cstruct*-set! ::cstruct ::obj)
    (inline cstruct-fields::obj ::cstruct)
    (inline cstruct-struct?::bool ::cstruct)
    (inline cstruct-occurrence::int ::cstruct)
    (inline cstruct-occurrence-set! ::cstruct ::int)
    (inline cstruct-import-location::obj ::cstruct)
    (inline cstruct-import-location-set! ::cstruct ::obj)
    (inline cstruct-location::obj ::cstruct)
    (inline cstruct-location-set! ::cstruct ::obj)
    (inline cstruct-tvector::obj ::cstruct)
    (inline cstruct-tvector-set! ::cstruct ::obj)
    (inline cstruct-pointed-to-by::obj ::cstruct)
    (inline cstruct-pointed-to-by-set! ::cstruct ::obj)
    (inline cstruct-alias::obj ::cstruct)
    (inline cstruct-alias-set! ::cstruct ::obj)
    (inline cstruct-$::obj ::cstruct)
    (inline cstruct-$-set! ::cstruct ::obj)
    (inline cstruct-magic?::bool ::cstruct)
    (inline cstruct-magic?-set! ::cstruct ::bool)
    (inline cstruct-init?::bool ::cstruct)
    (inline cstruct-init?-set! ::cstruct ::bool)
    (inline cstruct-parents::obj ::cstruct)
    (inline cstruct-parents-set! ::cstruct ::obj)
    (inline cstruct-coerce-to::obj ::cstruct)
    (inline cstruct-coerce-to-set! ::cstruct ::obj)
    (inline cstruct-class::obj ::cstruct)
    (inline cstruct-class-set! ::cstruct ::obj)
    (inline cstruct-size::obj ::cstruct)
    (inline cstruct-size-set! ::cstruct ::obj)
    (inline cstruct-name::obj ::cstruct)
    (inline cstruct-name-set! ::cstruct ::obj)
    (inline cstruct-id::symbol ::cstruct))))

;; cstruct*
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-cstruct*::cstruct* id1262::symbol name1263::obj size1264::obj class1265::obj coerce-to1266::obj parents1267::obj init?1268::bool magic?1269::bool $1270::obj alias1271::obj pointed-to-by1272::obj tvector1273::obj location1274::obj import-location1275::obj occurrence1276::int btype1277::type cstruct1278::cstruct)
    (inline cstruct*?::bool ::obj)
    (cstruct*-nil::cstruct*)
    (inline cstruct*-cstruct::cstruct ::cstruct*)
    (inline cstruct*-btype::type ::cstruct*)
    (inline cstruct*-occurrence::int ::cstruct*)
    (inline cstruct*-occurrence-set! ::cstruct* ::int)
    (inline cstruct*-import-location::obj ::cstruct*)
    (inline cstruct*-import-location-set! ::cstruct* ::obj)
    (inline cstruct*-location::obj ::cstruct*)
    (inline cstruct*-location-set! ::cstruct* ::obj)
    (inline cstruct*-tvector::obj ::cstruct*)
    (inline cstruct*-tvector-set! ::cstruct* ::obj)
    (inline cstruct*-pointed-to-by::obj ::cstruct*)
    (inline cstruct*-pointed-to-by-set! ::cstruct* ::obj)
    (inline cstruct*-alias::obj ::cstruct*)
    (inline cstruct*-alias-set! ::cstruct* ::obj)
    (inline cstruct*-$::obj ::cstruct*)
    (inline cstruct*-$-set! ::cstruct* ::obj)
    (inline cstruct*-magic?::bool ::cstruct*)
    (inline cstruct*-magic?-set! ::cstruct* ::bool)
    (inline cstruct*-init?::bool ::cstruct*)
    (inline cstruct*-init?-set! ::cstruct* ::bool)
    (inline cstruct*-parents::obj ::cstruct*)
    (inline cstruct*-parents-set! ::cstruct* ::obj)
    (inline cstruct*-coerce-to::obj ::cstruct*)
    (inline cstruct*-coerce-to-set! ::cstruct* ::obj)
    (inline cstruct*-class::obj ::cstruct*)
    (inline cstruct*-class-set! ::cstruct* ::obj)
    (inline cstruct*-size::obj ::cstruct*)
    (inline cstruct*-size-set! ::cstruct* ::obj)
    (inline cstruct*-name::obj ::cstruct*)
    (inline cstruct*-name-set! ::cstruct* ::obj)
    (inline cstruct*-id::symbol ::cstruct*)))))

;; The definitions
(cond-expand (bigloo-class-sans
;; calias
(define-inline (make-calias::calias id1373::symbol name1374::obj size1375::obj class1376::obj coerce-to1377::obj parents1378::obj init?1379::bool magic?1380::bool $1381::obj alias1382::obj pointed-to-by1383::obj tvector1384::obj location1385::obj import-location1386::obj occurrence1387::int array?1388::bool) (instantiate::calias (id id1373) (name name1374) (size size1375) (class class1376) (coerce-to coerce-to1377) (parents parents1378) (init? init?1379) (magic? magic?1380) ($ $1381) (alias alias1382) (pointed-to-by pointed-to-by1383) (tvector tvector1384) (location location1385) (import-location import-location1386) (occurrence occurrence1387) (array? array?1388)))
(define-inline (calias?::bool obj::obj) ((@ isa? __object) obj (@ calias foreign_ctype)))
(define (calias-nil::calias) (class-nil (@ calias foreign_ctype)))
(define-inline (calias-array?::bool o::calias) (with-access::calias o (array?) array?))
(define-inline (calias-array?-set! o::calias v::bool) (with-access::calias o (array?) (set! array? v)))
(define-inline (calias-occurrence::int o::calias) (with-access::calias o (occurrence) occurrence))
(define-inline (calias-occurrence-set! o::calias v::int) (with-access::calias o (occurrence) (set! occurrence v)))
(define-inline (calias-import-location::obj o::calias) (with-access::calias o (import-location) import-location))
(define-inline (calias-import-location-set! o::calias v::obj) (with-access::calias o (import-location) (set! import-location v)))
(define-inline (calias-location::obj o::calias) (with-access::calias o (location) location))
(define-inline (calias-location-set! o::calias v::obj) (with-access::calias o (location) (set! location v)))
(define-inline (calias-tvector::obj o::calias) (with-access::calias o (tvector) tvector))
(define-inline (calias-tvector-set! o::calias v::obj) (with-access::calias o (tvector) (set! tvector v)))
(define-inline (calias-pointed-to-by::obj o::calias) (with-access::calias o (pointed-to-by) pointed-to-by))
(define-inline (calias-pointed-to-by-set! o::calias v::obj) (with-access::calias o (pointed-to-by) (set! pointed-to-by v)))
(define-inline (calias-alias::obj o::calias) (with-access::calias o (alias) alias))
(define-inline (calias-alias-set! o::calias v::obj) (with-access::calias o (alias) (set! alias v)))
(define-inline (calias-$::obj o::calias) (with-access::calias o ($) $))
(define-inline (calias-$-set! o::calias v::obj) (with-access::calias o ($) (set! $ v)))
(define-inline (calias-magic?::bool o::calias) (with-access::calias o (magic?) magic?))
(define-inline (calias-magic?-set! o::calias v::bool) (with-access::calias o (magic?) (set! magic? v)))
(define-inline (calias-init?::bool o::calias) (with-access::calias o (init?) init?))
(define-inline (calias-init?-set! o::calias v::bool) (with-access::calias o (init?) (set! init? v)))
(define-inline (calias-parents::obj o::calias) (with-access::calias o (parents) parents))
(define-inline (calias-parents-set! o::calias v::obj) (with-access::calias o (parents) (set! parents v)))
(define-inline (calias-coerce-to::obj o::calias) (with-access::calias o (coerce-to) coerce-to))
(define-inline (calias-coerce-to-set! o::calias v::obj) (with-access::calias o (coerce-to) (set! coerce-to v)))
(define-inline (calias-class::obj o::calias) (with-access::calias o (class) class))
(define-inline (calias-class-set! o::calias v::obj) (with-access::calias o (class) (set! class v)))
(define-inline (calias-size::obj o::calias) (with-access::calias o (size) size))
(define-inline (calias-size-set! o::calias v::obj) (with-access::calias o (size) (set! size v)))
(define-inline (calias-name::obj o::calias) (with-access::calias o (name) name))
(define-inline (calias-name-set! o::calias v::obj) (with-access::calias o (name) (set! name v)))
(define-inline (calias-id::symbol o::calias) (with-access::calias o (id) id))
(define-inline (calias-id-set! o::calias v::symbol) (with-access::calias o (id) (set! id v)))

;; cenum
(define-inline (make-cenum::cenum id1355::symbol name1356::obj size1357::obj class1358::obj coerce-to1359::obj parents1360::obj init?1361::bool magic?1362::bool $1363::obj alias1364::obj pointed-to-by1365::obj tvector1366::obj location1367::obj import-location1368::obj occurrence1369::int btype1370::type literals1371::obj) (instantiate::cenum (id id1355) (name name1356) (size size1357) (class class1358) (coerce-to coerce-to1359) (parents parents1360) (init? init?1361) (magic? magic?1362) ($ $1363) (alias alias1364) (pointed-to-by pointed-to-by1365) (tvector tvector1366) (location location1367) (import-location import-location1368) (occurrence occurrence1369) (btype btype1370) (literals literals1371)))
(define-inline (cenum?::bool obj::obj) ((@ isa? __object) obj (@ cenum foreign_ctype)))
(define (cenum-nil::cenum) (class-nil (@ cenum foreign_ctype)))
(define-inline (cenum-literals::obj o::cenum) (with-access::cenum o (literals) literals))
(define-inline (cenum-literals-set! o::cenum v::obj) (with-access::cenum o (literals) (set! literals v)))
(define-inline (cenum-btype::type o::cenum) (with-access::cenum o (btype) btype))
(define-inline (cenum-btype-set! o::cenum v::type) (with-access::cenum o (btype) (set! btype v)))
(define-inline (cenum-occurrence::int o::cenum) (with-access::cenum o (occurrence) occurrence))
(define-inline (cenum-occurrence-set! o::cenum v::int) (with-access::cenum o (occurrence) (set! occurrence v)))
(define-inline (cenum-import-location::obj o::cenum) (with-access::cenum o (import-location) import-location))
(define-inline (cenum-import-location-set! o::cenum v::obj) (with-access::cenum o (import-location) (set! import-location v)))
(define-inline (cenum-location::obj o::cenum) (with-access::cenum o (location) location))
(define-inline (cenum-location-set! o::cenum v::obj) (with-access::cenum o (location) (set! location v)))
(define-inline (cenum-tvector::obj o::cenum) (with-access::cenum o (tvector) tvector))
(define-inline (cenum-tvector-set! o::cenum v::obj) (with-access::cenum o (tvector) (set! tvector v)))
(define-inline (cenum-pointed-to-by::obj o::cenum) (with-access::cenum o (pointed-to-by) pointed-to-by))
(define-inline (cenum-pointed-to-by-set! o::cenum v::obj) (with-access::cenum o (pointed-to-by) (set! pointed-to-by v)))
(define-inline (cenum-alias::obj o::cenum) (with-access::cenum o (alias) alias))
(define-inline (cenum-alias-set! o::cenum v::obj) (with-access::cenum o (alias) (set! alias v)))
(define-inline (cenum-$::obj o::cenum) (with-access::cenum o ($) $))
(define-inline (cenum-$-set! o::cenum v::obj) (with-access::cenum o ($) (set! $ v)))
(define-inline (cenum-magic?::bool o::cenum) (with-access::cenum o (magic?) magic?))
(define-inline (cenum-magic?-set! o::cenum v::bool) (with-access::cenum o (magic?) (set! magic? v)))
(define-inline (cenum-init?::bool o::cenum) (with-access::cenum o (init?) init?))
(define-inline (cenum-init?-set! o::cenum v::bool) (with-access::cenum o (init?) (set! init? v)))
(define-inline (cenum-parents::obj o::cenum) (with-access::cenum o (parents) parents))
(define-inline (cenum-parents-set! o::cenum v::obj) (with-access::cenum o (parents) (set! parents v)))
(define-inline (cenum-coerce-to::obj o::cenum) (with-access::cenum o (coerce-to) coerce-to))
(define-inline (cenum-coerce-to-set! o::cenum v::obj) (with-access::cenum o (coerce-to) (set! coerce-to v)))
(define-inline (cenum-class::obj o::cenum) (with-access::cenum o (class) class))
(define-inline (cenum-class-set! o::cenum v::obj) (with-access::cenum o (class) (set! class v)))
(define-inline (cenum-size::obj o::cenum) (with-access::cenum o (size) size))
(define-inline (cenum-size-set! o::cenum v::obj) (with-access::cenum o (size) (set! size v)))
(define-inline (cenum-name::obj o::cenum) (with-access::cenum o (name) name))
(define-inline (cenum-name-set! o::cenum v::obj) (with-access::cenum o (name) (set! name v)))
(define-inline (cenum-id::symbol o::cenum) (with-access::cenum o (id) id))
(define-inline (cenum-id-set! o::cenum v::symbol) (with-access::cenum o (id) (set! id v)))

;; copaque
(define-inline (make-copaque::copaque id1338::symbol name1339::obj size1340::obj class1341::obj coerce-to1342::obj parents1343::obj init?1344::bool magic?1345::bool $1346::obj alias1347::obj pointed-to-by1348::obj tvector1349::obj location1350::obj import-location1351::obj occurrence1352::int btype1353::type) (instantiate::copaque (id id1338) (name name1339) (size size1340) (class class1341) (coerce-to coerce-to1342) (parents parents1343) (init? init?1344) (magic? magic?1345) ($ $1346) (alias alias1347) (pointed-to-by pointed-to-by1348) (tvector tvector1349) (location location1350) (import-location import-location1351) (occurrence occurrence1352) (btype btype1353)))
(define-inline (copaque?::bool obj::obj) ((@ isa? __object) obj (@ copaque foreign_ctype)))
(define (copaque-nil::copaque) (class-nil (@ copaque foreign_ctype)))
(define-inline (copaque-btype::type o::copaque) (with-access::copaque o (btype) btype))
(define-inline (copaque-btype-set! o::copaque v::type) (with-access::copaque o (btype) (set! btype v)))
(define-inline (copaque-occurrence::int o::copaque) (with-access::copaque o (occurrence) occurrence))
(define-inline (copaque-occurrence-set! o::copaque v::int) (with-access::copaque o (occurrence) (set! occurrence v)))
(define-inline (copaque-import-location::obj o::copaque) (with-access::copaque o (import-location) import-location))
(define-inline (copaque-import-location-set! o::copaque v::obj) (with-access::copaque o (import-location) (set! import-location v)))
(define-inline (copaque-location::obj o::copaque) (with-access::copaque o (location) location))
(define-inline (copaque-location-set! o::copaque v::obj) (with-access::copaque o (location) (set! location v)))
(define-inline (copaque-tvector::obj o::copaque) (with-access::copaque o (tvector) tvector))
(define-inline (copaque-tvector-set! o::copaque v::obj) (with-access::copaque o (tvector) (set! tvector v)))
(define-inline (copaque-pointed-to-by::obj o::copaque) (with-access::copaque o (pointed-to-by) pointed-to-by))
(define-inline (copaque-pointed-to-by-set! o::copaque v::obj) (with-access::copaque o (pointed-to-by) (set! pointed-to-by v)))
(define-inline (copaque-alias::obj o::copaque) (with-access::copaque o (alias) alias))
(define-inline (copaque-alias-set! o::copaque v::obj) (with-access::copaque o (alias) (set! alias v)))
(define-inline (copaque-$::obj o::copaque) (with-access::copaque o ($) $))
(define-inline (copaque-$-set! o::copaque v::obj) (with-access::copaque o ($) (set! $ v)))
(define-inline (copaque-magic?::bool o::copaque) (with-access::copaque o (magic?) magic?))
(define-inline (copaque-magic?-set! o::copaque v::bool) (with-access::copaque o (magic?) (set! magic? v)))
(define-inline (copaque-init?::bool o::copaque) (with-access::copaque o (init?) init?))
(define-inline (copaque-init?-set! o::copaque v::bool) (with-access::copaque o (init?) (set! init? v)))
(define-inline (copaque-parents::obj o::copaque) (with-access::copaque o (parents) parents))
(define-inline (copaque-parents-set! o::copaque v::obj) (with-access::copaque o (parents) (set! parents v)))
(define-inline (copaque-coerce-to::obj o::copaque) (with-access::copaque o (coerce-to) coerce-to))
(define-inline (copaque-coerce-to-set! o::copaque v::obj) (with-access::copaque o (coerce-to) (set! coerce-to v)))
(define-inline (copaque-class::obj o::copaque) (with-access::copaque o (class) class))
(define-inline (copaque-class-set! o::copaque v::obj) (with-access::copaque o (class) (set! class v)))
(define-inline (copaque-size::obj o::copaque) (with-access::copaque o (size) size))
(define-inline (copaque-size-set! o::copaque v::obj) (with-access::copaque o (size) (set! size v)))
(define-inline (copaque-name::obj o::copaque) (with-access::copaque o (name) name))
(define-inline (copaque-name-set! o::copaque v::obj) (with-access::copaque o (name) (set! name v)))
(define-inline (copaque-id::symbol o::copaque) (with-access::copaque o (id) id))
(define-inline (copaque-id-set! o::copaque v::symbol) (with-access::copaque o (id) (set! id v)))

;; cfunction
(define-inline (make-cfunction::cfunction id1318::symbol name1319::obj size1320::obj class1321::obj coerce-to1322::obj parents1323::obj init?1324::bool magic?1325::bool $1326::obj alias1327::obj pointed-to-by1328::obj tvector1329::obj location1330::obj import-location1331::obj occurrence1332::int btype1333::type arity1334::long type-res1335::type type-args1336::obj) (instantiate::cfunction (id id1318) (name name1319) (size size1320) (class class1321) (coerce-to coerce-to1322) (parents parents1323) (init? init?1324) (magic? magic?1325) ($ $1326) (alias alias1327) (pointed-to-by pointed-to-by1328) (tvector tvector1329) (location location1330) (import-location import-location1331) (occurrence occurrence1332) (btype btype1333) (arity arity1334) (type-res type-res1335) (type-args type-args1336)))
(define-inline (cfunction?::bool obj::obj) ((@ isa? __object) obj (@ cfunction foreign_ctype)))
(define (cfunction-nil::cfunction) (class-nil (@ cfunction foreign_ctype)))
(define-inline (cfunction-type-args::obj o::cfunction) (with-access::cfunction o (type-args) type-args))
(define-inline (cfunction-type-args-set! o::cfunction v::obj) (with-access::cfunction o (type-args) (set! type-args v)))
(define-inline (cfunction-type-res::type o::cfunction) (with-access::cfunction o (type-res) type-res))
(define-inline (cfunction-type-res-set! o::cfunction v::type) (with-access::cfunction o (type-res) (set! type-res v)))
(define-inline (cfunction-arity::long o::cfunction) (with-access::cfunction o (arity) arity))
(define-inline (cfunction-arity-set! o::cfunction v::long) (with-access::cfunction o (arity) (set! arity v)))
(define-inline (cfunction-btype::type o::cfunction) (with-access::cfunction o (btype) btype))
(define-inline (cfunction-btype-set! o::cfunction v::type) (with-access::cfunction o (btype) (set! btype v)))
(define-inline (cfunction-occurrence::int o::cfunction) (with-access::cfunction o (occurrence) occurrence))
(define-inline (cfunction-occurrence-set! o::cfunction v::int) (with-access::cfunction o (occurrence) (set! occurrence v)))
(define-inline (cfunction-import-location::obj o::cfunction) (with-access::cfunction o (import-location) import-location))
(define-inline (cfunction-import-location-set! o::cfunction v::obj) (with-access::cfunction o (import-location) (set! import-location v)))
(define-inline (cfunction-location::obj o::cfunction) (with-access::cfunction o (location) location))
(define-inline (cfunction-location-set! o::cfunction v::obj) (with-access::cfunction o (location) (set! location v)))
(define-inline (cfunction-tvector::obj o::cfunction) (with-access::cfunction o (tvector) tvector))
(define-inline (cfunction-tvector-set! o::cfunction v::obj) (with-access::cfunction o (tvector) (set! tvector v)))
(define-inline (cfunction-pointed-to-by::obj o::cfunction) (with-access::cfunction o (pointed-to-by) pointed-to-by))
(define-inline (cfunction-pointed-to-by-set! o::cfunction v::obj) (with-access::cfunction o (pointed-to-by) (set! pointed-to-by v)))
(define-inline (cfunction-alias::obj o::cfunction) (with-access::cfunction o (alias) alias))
(define-inline (cfunction-alias-set! o::cfunction v::obj) (with-access::cfunction o (alias) (set! alias v)))
(define-inline (cfunction-$::obj o::cfunction) (with-access::cfunction o ($) $))
(define-inline (cfunction-$-set! o::cfunction v::obj) (with-access::cfunction o ($) (set! $ v)))
(define-inline (cfunction-magic?::bool o::cfunction) (with-access::cfunction o (magic?) magic?))
(define-inline (cfunction-magic?-set! o::cfunction v::bool) (with-access::cfunction o (magic?) (set! magic? v)))
(define-inline (cfunction-init?::bool o::cfunction) (with-access::cfunction o (init?) init?))
(define-inline (cfunction-init?-set! o::cfunction v::bool) (with-access::cfunction o (init?) (set! init? v)))
(define-inline (cfunction-parents::obj o::cfunction) (with-access::cfunction o (parents) parents))
(define-inline (cfunction-parents-set! o::cfunction v::obj) (with-access::cfunction o (parents) (set! parents v)))
(define-inline (cfunction-coerce-to::obj o::cfunction) (with-access::cfunction o (coerce-to) coerce-to))
(define-inline (cfunction-coerce-to-set! o::cfunction v::obj) (with-access::cfunction o (coerce-to) (set! coerce-to v)))
(define-inline (cfunction-class::obj o::cfunction) (with-access::cfunction o (class) class))
(define-inline (cfunction-class-set! o::cfunction v::obj) (with-access::cfunction o (class) (set! class v)))
(define-inline (cfunction-size::obj o::cfunction) (with-access::cfunction o (size) size))
(define-inline (cfunction-size-set! o::cfunction v::obj) (with-access::cfunction o (size) (set! size v)))
(define-inline (cfunction-name::obj o::cfunction) (with-access::cfunction o (name) name))
(define-inline (cfunction-name-set! o::cfunction v::obj) (with-access::cfunction o (name) (set! name v)))
(define-inline (cfunction-id::symbol o::cfunction) (with-access::cfunction o (id) id))
(define-inline (cfunction-id-set! o::cfunction v::symbol) (with-access::cfunction o (id) (set! id v)))

;; cptr
(define-inline (make-cptr::cptr id1299::symbol name1300::obj size1301::obj class1302::obj coerce-to1303::obj parents1304::obj init?1305::bool magic?1306::bool $1307::obj alias1308::obj pointed-to-by1309::obj tvector1310::obj location1311::obj import-location1312::obj occurrence1313::int btype1314::type point-to1315::type array?1316::bool) (instantiate::cptr (id id1299) (name name1300) (size size1301) (class class1302) (coerce-to coerce-to1303) (parents parents1304) (init? init?1305) (magic? magic?1306) ($ $1307) (alias alias1308) (pointed-to-by pointed-to-by1309) (tvector tvector1310) (location location1311) (import-location import-location1312) (occurrence occurrence1313) (btype btype1314) (point-to point-to1315) (array? array?1316)))
(define-inline (cptr?::bool obj::obj) ((@ isa? __object) obj (@ cptr foreign_ctype)))
(define (cptr-nil::cptr) (class-nil (@ cptr foreign_ctype)))
(define-inline (cptr-array?::bool o::cptr) (with-access::cptr o (array?) array?))
(define-inline (cptr-array?-set! o::cptr v::bool) (with-access::cptr o (array?) (set! array? v)))
(define-inline (cptr-point-to::type o::cptr) (with-access::cptr o (point-to) point-to))
(define-inline (cptr-point-to-set! o::cptr v::type) (with-access::cptr o (point-to) (set! point-to v)))
(define-inline (cptr-btype::type o::cptr) (with-access::cptr o (btype) btype))
(define-inline (cptr-btype-set! o::cptr v::type) (with-access::cptr o (btype) (set! btype v)))
(define-inline (cptr-occurrence::int o::cptr) (with-access::cptr o (occurrence) occurrence))
(define-inline (cptr-occurrence-set! o::cptr v::int) (with-access::cptr o (occurrence) (set! occurrence v)))
(define-inline (cptr-import-location::obj o::cptr) (with-access::cptr o (import-location) import-location))
(define-inline (cptr-import-location-set! o::cptr v::obj) (with-access::cptr o (import-location) (set! import-location v)))
(define-inline (cptr-location::obj o::cptr) (with-access::cptr o (location) location))
(define-inline (cptr-location-set! o::cptr v::obj) (with-access::cptr o (location) (set! location v)))
(define-inline (cptr-tvector::obj o::cptr) (with-access::cptr o (tvector) tvector))
(define-inline (cptr-tvector-set! o::cptr v::obj) (with-access::cptr o (tvector) (set! tvector v)))
(define-inline (cptr-pointed-to-by::obj o::cptr) (with-access::cptr o (pointed-to-by) pointed-to-by))
(define-inline (cptr-pointed-to-by-set! o::cptr v::obj) (with-access::cptr o (pointed-to-by) (set! pointed-to-by v)))
(define-inline (cptr-alias::obj o::cptr) (with-access::cptr o (alias) alias))
(define-inline (cptr-alias-set! o::cptr v::obj) (with-access::cptr o (alias) (set! alias v)))
(define-inline (cptr-$::obj o::cptr) (with-access::cptr o ($) $))
(define-inline (cptr-$-set! o::cptr v::obj) (with-access::cptr o ($) (set! $ v)))
(define-inline (cptr-magic?::bool o::cptr) (with-access::cptr o (magic?) magic?))
(define-inline (cptr-magic?-set! o::cptr v::bool) (with-access::cptr o (magic?) (set! magic? v)))
(define-inline (cptr-init?::bool o::cptr) (with-access::cptr o (init?) init?))
(define-inline (cptr-init?-set! o::cptr v::bool) (with-access::cptr o (init?) (set! init? v)))
(define-inline (cptr-parents::obj o::cptr) (with-access::cptr o (parents) parents))
(define-inline (cptr-parents-set! o::cptr v::obj) (with-access::cptr o (parents) (set! parents v)))
(define-inline (cptr-coerce-to::obj o::cptr) (with-access::cptr o (coerce-to) coerce-to))
(define-inline (cptr-coerce-to-set! o::cptr v::obj) (with-access::cptr o (coerce-to) (set! coerce-to v)))
(define-inline (cptr-class::obj o::cptr) (with-access::cptr o (class) class))
(define-inline (cptr-class-set! o::cptr v::obj) (with-access::cptr o (class) (set! class v)))
(define-inline (cptr-size::obj o::cptr) (with-access::cptr o (size) size))
(define-inline (cptr-size-set! o::cptr v::obj) (with-access::cptr o (size) (set! size v)))
(define-inline (cptr-name::obj o::cptr) (with-access::cptr o (name) name))
(define-inline (cptr-name-set! o::cptr v::obj) (with-access::cptr o (name) (set! name v)))
(define-inline (cptr-id::symbol o::cptr) (with-access::cptr o (id) id))
(define-inline (cptr-id-set! o::cptr v::symbol) (with-access::cptr o (id) (set! id v)))

;; cstruct
(define-inline (make-cstruct::cstruct id1280::symbol name1281::obj size1282::obj class1283::obj coerce-to1284::obj parents1285::obj init?1286::bool magic?1287::bool $1288::obj alias1289::obj pointed-to-by1290::obj tvector1291::obj location1292::obj import-location1293::obj occurrence1294::int struct?1295::bool fields1296::obj cstruct*1297::obj) (instantiate::cstruct (id id1280) (name name1281) (size size1282) (class class1283) (coerce-to coerce-to1284) (parents parents1285) (init? init?1286) (magic? magic?1287) ($ $1288) (alias alias1289) (pointed-to-by pointed-to-by1290) (tvector tvector1291) (location location1292) (import-location import-location1293) (occurrence occurrence1294) (struct? struct?1295) (fields fields1296) (cstruct* cstruct*1297)))
(define-inline (cstruct?::bool obj::obj) ((@ isa? __object) obj (@ cstruct foreign_ctype)))
(define (cstruct-nil::cstruct) (class-nil (@ cstruct foreign_ctype)))
(define-inline (cstruct-cstruct*::obj o::cstruct) (with-access::cstruct o (cstruct*) cstruct*))
(define-inline (cstruct-cstruct*-set! o::cstruct v::obj) (with-access::cstruct o (cstruct*) (set! cstruct* v)))
(define-inline (cstruct-fields::obj o::cstruct) (with-access::cstruct o (fields) fields))
(define-inline (cstruct-fields-set! o::cstruct v::obj) (with-access::cstruct o (fields) (set! fields v)))
(define-inline (cstruct-struct?::bool o::cstruct) (with-access::cstruct o (struct?) struct?))
(define-inline (cstruct-struct?-set! o::cstruct v::bool) (with-access::cstruct o (struct?) (set! struct? v)))
(define-inline (cstruct-occurrence::int o::cstruct) (with-access::cstruct o (occurrence) occurrence))
(define-inline (cstruct-occurrence-set! o::cstruct v::int) (with-access::cstruct o (occurrence) (set! occurrence v)))
(define-inline (cstruct-import-location::obj o::cstruct) (with-access::cstruct o (import-location) import-location))
(define-inline (cstruct-import-location-set! o::cstruct v::obj) (with-access::cstruct o (import-location) (set! import-location v)))
(define-inline (cstruct-location::obj o::cstruct) (with-access::cstruct o (location) location))
(define-inline (cstruct-location-set! o::cstruct v::obj) (with-access::cstruct o (location) (set! location v)))
(define-inline (cstruct-tvector::obj o::cstruct) (with-access::cstruct o (tvector) tvector))
(define-inline (cstruct-tvector-set! o::cstruct v::obj) (with-access::cstruct o (tvector) (set! tvector v)))
(define-inline (cstruct-pointed-to-by::obj o::cstruct) (with-access::cstruct o (pointed-to-by) pointed-to-by))
(define-inline (cstruct-pointed-to-by-set! o::cstruct v::obj) (with-access::cstruct o (pointed-to-by) (set! pointed-to-by v)))
(define-inline (cstruct-alias::obj o::cstruct) (with-access::cstruct o (alias) alias))
(define-inline (cstruct-alias-set! o::cstruct v::obj) (with-access::cstruct o (alias) (set! alias v)))
(define-inline (cstruct-$::obj o::cstruct) (with-access::cstruct o ($) $))
(define-inline (cstruct-$-set! o::cstruct v::obj) (with-access::cstruct o ($) (set! $ v)))
(define-inline (cstruct-magic?::bool o::cstruct) (with-access::cstruct o (magic?) magic?))
(define-inline (cstruct-magic?-set! o::cstruct v::bool) (with-access::cstruct o (magic?) (set! magic? v)))
(define-inline (cstruct-init?::bool o::cstruct) (with-access::cstruct o (init?) init?))
(define-inline (cstruct-init?-set! o::cstruct v::bool) (with-access::cstruct o (init?) (set! init? v)))
(define-inline (cstruct-parents::obj o::cstruct) (with-access::cstruct o (parents) parents))
(define-inline (cstruct-parents-set! o::cstruct v::obj) (with-access::cstruct o (parents) (set! parents v)))
(define-inline (cstruct-coerce-to::obj o::cstruct) (with-access::cstruct o (coerce-to) coerce-to))
(define-inline (cstruct-coerce-to-set! o::cstruct v::obj) (with-access::cstruct o (coerce-to) (set! coerce-to v)))
(define-inline (cstruct-class::obj o::cstruct) (with-access::cstruct o (class) class))
(define-inline (cstruct-class-set! o::cstruct v::obj) (with-access::cstruct o (class) (set! class v)))
(define-inline (cstruct-size::obj o::cstruct) (with-access::cstruct o (size) size))
(define-inline (cstruct-size-set! o::cstruct v::obj) (with-access::cstruct o (size) (set! size v)))
(define-inline (cstruct-name::obj o::cstruct) (with-access::cstruct o (name) name))
(define-inline (cstruct-name-set! o::cstruct v::obj) (with-access::cstruct o (name) (set! name v)))
(define-inline (cstruct-id::symbol o::cstruct) (with-access::cstruct o (id) id))
(define-inline (cstruct-id-set! o::cstruct v::symbol) (with-access::cstruct o (id) (set! id v)))

;; cstruct*
(define-inline (make-cstruct*::cstruct* id1262::symbol name1263::obj size1264::obj class1265::obj coerce-to1266::obj parents1267::obj init?1268::bool magic?1269::bool $1270::obj alias1271::obj pointed-to-by1272::obj tvector1273::obj location1274::obj import-location1275::obj occurrence1276::int btype1277::type cstruct1278::cstruct) (instantiate::cstruct* (id id1262) (name name1263) (size size1264) (class class1265) (coerce-to coerce-to1266) (parents parents1267) (init? init?1268) (magic? magic?1269) ($ $1270) (alias alias1271) (pointed-to-by pointed-to-by1272) (tvector tvector1273) (location location1274) (import-location import-location1275) (occurrence occurrence1276) (btype btype1277) (cstruct cstruct1278)))
(define-inline (cstruct*?::bool obj::obj) ((@ isa? __object) obj (@ cstruct* foreign_ctype)))
(define (cstruct*-nil::cstruct*) (class-nil (@ cstruct* foreign_ctype)))
(define-inline (cstruct*-cstruct::cstruct o::cstruct*) (with-access::cstruct* o (cstruct) cstruct))
(define-inline (cstruct*-cstruct-set! o::cstruct* v::cstruct) (with-access::cstruct* o (cstruct) (set! cstruct v)))
(define-inline (cstruct*-btype::type o::cstruct*) (with-access::cstruct* o (btype) btype))
(define-inline (cstruct*-btype-set! o::cstruct* v::type) (with-access::cstruct* o (btype) (set! btype v)))
(define-inline (cstruct*-occurrence::int o::cstruct*) (with-access::cstruct* o (occurrence) occurrence))
(define-inline (cstruct*-occurrence-set! o::cstruct* v::int) (with-access::cstruct* o (occurrence) (set! occurrence v)))
(define-inline (cstruct*-import-location::obj o::cstruct*) (with-access::cstruct* o (import-location) import-location))
(define-inline (cstruct*-import-location-set! o::cstruct* v::obj) (with-access::cstruct* o (import-location) (set! import-location v)))
(define-inline (cstruct*-location::obj o::cstruct*) (with-access::cstruct* o (location) location))
(define-inline (cstruct*-location-set! o::cstruct* v::obj) (with-access::cstruct* o (location) (set! location v)))
(define-inline (cstruct*-tvector::obj o::cstruct*) (with-access::cstruct* o (tvector) tvector))
(define-inline (cstruct*-tvector-set! o::cstruct* v::obj) (with-access::cstruct* o (tvector) (set! tvector v)))
(define-inline (cstruct*-pointed-to-by::obj o::cstruct*) (with-access::cstruct* o (pointed-to-by) pointed-to-by))
(define-inline (cstruct*-pointed-to-by-set! o::cstruct* v::obj) (with-access::cstruct* o (pointed-to-by) (set! pointed-to-by v)))
(define-inline (cstruct*-alias::obj o::cstruct*) (with-access::cstruct* o (alias) alias))
(define-inline (cstruct*-alias-set! o::cstruct* v::obj) (with-access::cstruct* o (alias) (set! alias v)))
(define-inline (cstruct*-$::obj o::cstruct*) (with-access::cstruct* o ($) $))
(define-inline (cstruct*-$-set! o::cstruct* v::obj) (with-access::cstruct* o ($) (set! $ v)))
(define-inline (cstruct*-magic?::bool o::cstruct*) (with-access::cstruct* o (magic?) magic?))
(define-inline (cstruct*-magic?-set! o::cstruct* v::bool) (with-access::cstruct* o (magic?) (set! magic? v)))
(define-inline (cstruct*-init?::bool o::cstruct*) (with-access::cstruct* o (init?) init?))
(define-inline (cstruct*-init?-set! o::cstruct* v::bool) (with-access::cstruct* o (init?) (set! init? v)))
(define-inline (cstruct*-parents::obj o::cstruct*) (with-access::cstruct* o (parents) parents))
(define-inline (cstruct*-parents-set! o::cstruct* v::obj) (with-access::cstruct* o (parents) (set! parents v)))
(define-inline (cstruct*-coerce-to::obj o::cstruct*) (with-access::cstruct* o (coerce-to) coerce-to))
(define-inline (cstruct*-coerce-to-set! o::cstruct* v::obj) (with-access::cstruct* o (coerce-to) (set! coerce-to v)))
(define-inline (cstruct*-class::obj o::cstruct*) (with-access::cstruct* o (class) class))
(define-inline (cstruct*-class-set! o::cstruct* v::obj) (with-access::cstruct* o (class) (set! class v)))
(define-inline (cstruct*-size::obj o::cstruct*) (with-access::cstruct* o (size) size))
(define-inline (cstruct*-size-set! o::cstruct* v::obj) (with-access::cstruct* o (size) (set! size v)))
(define-inline (cstruct*-name::obj o::cstruct*) (with-access::cstruct* o (name) name))
(define-inline (cstruct*-name-set! o::cstruct* v::obj) (with-access::cstruct* o (name) (set! name v)))
(define-inline (cstruct*-id::symbol o::cstruct*) (with-access::cstruct* o (id) id))
(define-inline (cstruct*-id-set! o::cstruct* v::symbol) (with-access::cstruct* o (id) (set! id v)))
))
