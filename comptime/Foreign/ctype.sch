;; ==========================================================
;; Class accessors
;; Bigloo (4.2c)
;; Inria -- Sophia Antipolis     Fri Nov 6 10:55:25 CET 2015 
;; (bigloo.new -classgen Foreign/ctype.scm)
;; ==========================================================

;; The directives
(directives

;; calias
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-calias::calias id1323::symbol name1324::obj size1325::obj class1326::obj coerce-to1327::obj parents1328::obj init?1329::bool magic?1330::bool $1331::obj alias1332::obj pointed-to-by1333::obj tvector1334::obj location1335::obj import-location1336::obj occurrence1337::int array?1338::bool)
    (inline calias?::bool ::obj)
    (calias-nil::calias)
    (inline calias-array?::bool ::calias)
    (inline calias-array?-set! ::calias ::bool)
    (inline calias-occurrence::int ::calias)
    (inline calias-occurrence-set! ::calias ::int)
    (inline calias-import-location::obj ::calias)
    (inline calias-import-location-set! ::calias ::obj)
    (inline calias-location::obj ::calias)
    (inline calias-location-set! ::calias ::obj)
    (inline calias-tvector::obj ::calias)
    (inline calias-tvector-set! ::calias ::obj)
    (inline calias-pointed-to-by::obj ::calias)
    (inline calias-pointed-to-by-set! ::calias ::obj)
    (inline calias-alias::obj ::calias)
    (inline calias-alias-set! ::calias ::obj)
    (inline calias-$::obj ::calias)
    (inline calias-$-set! ::calias ::obj)
    (inline calias-magic?::bool ::calias)
    (inline calias-magic?-set! ::calias ::bool)
    (inline calias-init?::bool ::calias)
    (inline calias-init?-set! ::calias ::bool)
    (inline calias-parents::obj ::calias)
    (inline calias-parents-set! ::calias ::obj)
    (inline calias-coerce-to::obj ::calias)
    (inline calias-coerce-to-set! ::calias ::obj)
    (inline calias-class::obj ::calias)
    (inline calias-class-set! ::calias ::obj)
    (inline calias-size::obj ::calias)
    (inline calias-size-set! ::calias ::obj)
    (inline calias-name::obj ::calias)
    (inline calias-name-set! ::calias ::obj)
    (inline calias-id::symbol ::calias))))

;; cenum
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-cenum::cenum id1305::symbol name1306::obj size1307::obj class1308::obj coerce-to1309::obj parents1310::obj init?1311::bool magic?1312::bool $1313::obj alias1314::obj pointed-to-by1315::obj tvector1316::obj location1317::obj import-location1318::obj occurrence1319::int btype1320::type literals1321::obj)
    (inline cenum?::bool ::obj)
    (cenum-nil::cenum)
    (inline cenum-literals::obj ::cenum)
    (inline cenum-btype::type ::cenum)
    (inline cenum-occurrence::int ::cenum)
    (inline cenum-occurrence-set! ::cenum ::int)
    (inline cenum-import-location::obj ::cenum)
    (inline cenum-import-location-set! ::cenum ::obj)
    (inline cenum-location::obj ::cenum)
    (inline cenum-location-set! ::cenum ::obj)
    (inline cenum-tvector::obj ::cenum)
    (inline cenum-tvector-set! ::cenum ::obj)
    (inline cenum-pointed-to-by::obj ::cenum)
    (inline cenum-pointed-to-by-set! ::cenum ::obj)
    (inline cenum-alias::obj ::cenum)
    (inline cenum-alias-set! ::cenum ::obj)
    (inline cenum-$::obj ::cenum)
    (inline cenum-$-set! ::cenum ::obj)
    (inline cenum-magic?::bool ::cenum)
    (inline cenum-magic?-set! ::cenum ::bool)
    (inline cenum-init?::bool ::cenum)
    (inline cenum-init?-set! ::cenum ::bool)
    (inline cenum-parents::obj ::cenum)
    (inline cenum-parents-set! ::cenum ::obj)
    (inline cenum-coerce-to::obj ::cenum)
    (inline cenum-coerce-to-set! ::cenum ::obj)
    (inline cenum-class::obj ::cenum)
    (inline cenum-class-set! ::cenum ::obj)
    (inline cenum-size::obj ::cenum)
    (inline cenum-size-set! ::cenum ::obj)
    (inline cenum-name::obj ::cenum)
    (inline cenum-name-set! ::cenum ::obj)
    (inline cenum-id::symbol ::cenum))))

;; copaque
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-copaque::copaque id1288::symbol name1289::obj size1290::obj class1291::obj coerce-to1292::obj parents1293::obj init?1294::bool magic?1295::bool $1296::obj alias1297::obj pointed-to-by1298::obj tvector1299::obj location1300::obj import-location1301::obj occurrence1302::int btype1303::type)
    (inline copaque?::bool ::obj)
    (copaque-nil::copaque)
    (inline copaque-btype::type ::copaque)
    (inline copaque-occurrence::int ::copaque)
    (inline copaque-occurrence-set! ::copaque ::int)
    (inline copaque-import-location::obj ::copaque)
    (inline copaque-import-location-set! ::copaque ::obj)
    (inline copaque-location::obj ::copaque)
    (inline copaque-location-set! ::copaque ::obj)
    (inline copaque-tvector::obj ::copaque)
    (inline copaque-tvector-set! ::copaque ::obj)
    (inline copaque-pointed-to-by::obj ::copaque)
    (inline copaque-pointed-to-by-set! ::copaque ::obj)
    (inline copaque-alias::obj ::copaque)
    (inline copaque-alias-set! ::copaque ::obj)
    (inline copaque-$::obj ::copaque)
    (inline copaque-$-set! ::copaque ::obj)
    (inline copaque-magic?::bool ::copaque)
    (inline copaque-magic?-set! ::copaque ::bool)
    (inline copaque-init?::bool ::copaque)
    (inline copaque-init?-set! ::copaque ::bool)
    (inline copaque-parents::obj ::copaque)
    (inline copaque-parents-set! ::copaque ::obj)
    (inline copaque-coerce-to::obj ::copaque)
    (inline copaque-coerce-to-set! ::copaque ::obj)
    (inline copaque-class::obj ::copaque)
    (inline copaque-class-set! ::copaque ::obj)
    (inline copaque-size::obj ::copaque)
    (inline copaque-size-set! ::copaque ::obj)
    (inline copaque-name::obj ::copaque)
    (inline copaque-name-set! ::copaque ::obj)
    (inline copaque-id::symbol ::copaque))))

;; cfunction
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-cfunction::cfunction id1268::symbol name1269::obj size1270::obj class1271::obj coerce-to1272::obj parents1273::obj init?1274::bool magic?1275::bool $1276::obj alias1277::obj pointed-to-by1278::obj tvector1279::obj location1280::obj import-location1281::obj occurrence1282::int btype1283::type arity1284::long type-res1285::type type-args1286::obj)
    (inline cfunction?::bool ::obj)
    (cfunction-nil::cfunction)
    (inline cfunction-type-args::obj ::cfunction)
    (inline cfunction-type-res::type ::cfunction)
    (inline cfunction-arity::long ::cfunction)
    (inline cfunction-btype::type ::cfunction)
    (inline cfunction-occurrence::int ::cfunction)
    (inline cfunction-occurrence-set! ::cfunction ::int)
    (inline cfunction-import-location::obj ::cfunction)
    (inline cfunction-import-location-set! ::cfunction ::obj)
    (inline cfunction-location::obj ::cfunction)
    (inline cfunction-location-set! ::cfunction ::obj)
    (inline cfunction-tvector::obj ::cfunction)
    (inline cfunction-tvector-set! ::cfunction ::obj)
    (inline cfunction-pointed-to-by::obj ::cfunction)
    (inline cfunction-pointed-to-by-set! ::cfunction ::obj)
    (inline cfunction-alias::obj ::cfunction)
    (inline cfunction-alias-set! ::cfunction ::obj)
    (inline cfunction-$::obj ::cfunction)
    (inline cfunction-$-set! ::cfunction ::obj)
    (inline cfunction-magic?::bool ::cfunction)
    (inline cfunction-magic?-set! ::cfunction ::bool)
    (inline cfunction-init?::bool ::cfunction)
    (inline cfunction-init?-set! ::cfunction ::bool)
    (inline cfunction-parents::obj ::cfunction)
    (inline cfunction-parents-set! ::cfunction ::obj)
    (inline cfunction-coerce-to::obj ::cfunction)
    (inline cfunction-coerce-to-set! ::cfunction ::obj)
    (inline cfunction-class::obj ::cfunction)
    (inline cfunction-class-set! ::cfunction ::obj)
    (inline cfunction-size::obj ::cfunction)
    (inline cfunction-size-set! ::cfunction ::obj)
    (inline cfunction-name::obj ::cfunction)
    (inline cfunction-name-set! ::cfunction ::obj)
    (inline cfunction-id::symbol ::cfunction))))

;; cptr
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-cptr::cptr id1249::symbol name1250::obj size1251::obj class1252::obj coerce-to1253::obj parents1254::obj init?1255::bool magic?1256::bool $1257::obj alias1258::obj pointed-to-by1259::obj tvector1260::obj location1261::obj import-location1262::obj occurrence1263::int btype1264::type point-to1265::type array?1266::bool)
    (inline cptr?::bool ::obj)
    (cptr-nil::cptr)
    (inline cptr-array?::bool ::cptr)
    (inline cptr-point-to::type ::cptr)
    (inline cptr-btype::type ::cptr)
    (inline cptr-occurrence::int ::cptr)
    (inline cptr-occurrence-set! ::cptr ::int)
    (inline cptr-import-location::obj ::cptr)
    (inline cptr-import-location-set! ::cptr ::obj)
    (inline cptr-location::obj ::cptr)
    (inline cptr-location-set! ::cptr ::obj)
    (inline cptr-tvector::obj ::cptr)
    (inline cptr-tvector-set! ::cptr ::obj)
    (inline cptr-pointed-to-by::obj ::cptr)
    (inline cptr-pointed-to-by-set! ::cptr ::obj)
    (inline cptr-alias::obj ::cptr)
    (inline cptr-alias-set! ::cptr ::obj)
    (inline cptr-$::obj ::cptr)
    (inline cptr-$-set! ::cptr ::obj)
    (inline cptr-magic?::bool ::cptr)
    (inline cptr-magic?-set! ::cptr ::bool)
    (inline cptr-init?::bool ::cptr)
    (inline cptr-init?-set! ::cptr ::bool)
    (inline cptr-parents::obj ::cptr)
    (inline cptr-parents-set! ::cptr ::obj)
    (inline cptr-coerce-to::obj ::cptr)
    (inline cptr-coerce-to-set! ::cptr ::obj)
    (inline cptr-class::obj ::cptr)
    (inline cptr-class-set! ::cptr ::obj)
    (inline cptr-size::obj ::cptr)
    (inline cptr-size-set! ::cptr ::obj)
    (inline cptr-name::obj ::cptr)
    (inline cptr-name-set! ::cptr ::obj)
    (inline cptr-id::symbol ::cptr))))

;; cstruct
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-cstruct::cstruct id1230::symbol name1231::obj size1232::obj class1233::obj coerce-to1234::obj parents1235::obj init?1236::bool magic?1237::bool $1238::obj alias1239::obj pointed-to-by1240::obj tvector1241::obj location1242::obj import-location1243::obj occurrence1244::int struct?1245::bool fields1246::obj cstruct*1247::obj)
    (inline cstruct?::bool ::obj)
    (cstruct-nil::cstruct)
    (inline cstruct-cstruct*::obj ::cstruct)
    (inline cstruct-cstruct*-set! ::cstruct ::obj)
    (inline cstruct-fields::obj ::cstruct)
    (inline cstruct-struct?::bool ::cstruct)
    (inline cstruct-occurrence::int ::cstruct)
    (inline cstruct-occurrence-set! ::cstruct ::int)
    (inline cstruct-import-location::obj ::cstruct)
    (inline cstruct-import-location-set! ::cstruct ::obj)
    (inline cstruct-location::obj ::cstruct)
    (inline cstruct-location-set! ::cstruct ::obj)
    (inline cstruct-tvector::obj ::cstruct)
    (inline cstruct-tvector-set! ::cstruct ::obj)
    (inline cstruct-pointed-to-by::obj ::cstruct)
    (inline cstruct-pointed-to-by-set! ::cstruct ::obj)
    (inline cstruct-alias::obj ::cstruct)
    (inline cstruct-alias-set! ::cstruct ::obj)
    (inline cstruct-$::obj ::cstruct)
    (inline cstruct-$-set! ::cstruct ::obj)
    (inline cstruct-magic?::bool ::cstruct)
    (inline cstruct-magic?-set! ::cstruct ::bool)
    (inline cstruct-init?::bool ::cstruct)
    (inline cstruct-init?-set! ::cstruct ::bool)
    (inline cstruct-parents::obj ::cstruct)
    (inline cstruct-parents-set! ::cstruct ::obj)
    (inline cstruct-coerce-to::obj ::cstruct)
    (inline cstruct-coerce-to-set! ::cstruct ::obj)
    (inline cstruct-class::obj ::cstruct)
    (inline cstruct-class-set! ::cstruct ::obj)
    (inline cstruct-size::obj ::cstruct)
    (inline cstruct-size-set! ::cstruct ::obj)
    (inline cstruct-name::obj ::cstruct)
    (inline cstruct-name-set! ::cstruct ::obj)
    (inline cstruct-id::symbol ::cstruct))))

;; cstruct*
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-cstruct*::cstruct* id1212::symbol name1213::obj size1214::obj class1215::obj coerce-to1216::obj parents1217::obj init?1218::bool magic?1219::bool $1220::obj alias1221::obj pointed-to-by1222::obj tvector1223::obj location1224::obj import-location1225::obj occurrence1226::int btype1227::type cstruct1228::cstruct)
    (inline cstruct*?::bool ::obj)
    (cstruct*-nil::cstruct*)
    (inline cstruct*-cstruct::cstruct ::cstruct*)
    (inline cstruct*-btype::type ::cstruct*)
    (inline cstruct*-occurrence::int ::cstruct*)
    (inline cstruct*-occurrence-set! ::cstruct* ::int)
    (inline cstruct*-import-location::obj ::cstruct*)
    (inline cstruct*-import-location-set! ::cstruct* ::obj)
    (inline cstruct*-location::obj ::cstruct*)
    (inline cstruct*-location-set! ::cstruct* ::obj)
    (inline cstruct*-tvector::obj ::cstruct*)
    (inline cstruct*-tvector-set! ::cstruct* ::obj)
    (inline cstruct*-pointed-to-by::obj ::cstruct*)
    (inline cstruct*-pointed-to-by-set! ::cstruct* ::obj)
    (inline cstruct*-alias::obj ::cstruct*)
    (inline cstruct*-alias-set! ::cstruct* ::obj)
    (inline cstruct*-$::obj ::cstruct*)
    (inline cstruct*-$-set! ::cstruct* ::obj)
    (inline cstruct*-magic?::bool ::cstruct*)
    (inline cstruct*-magic?-set! ::cstruct* ::bool)
    (inline cstruct*-init?::bool ::cstruct*)
    (inline cstruct*-init?-set! ::cstruct* ::bool)
    (inline cstruct*-parents::obj ::cstruct*)
    (inline cstruct*-parents-set! ::cstruct* ::obj)
    (inline cstruct*-coerce-to::obj ::cstruct*)
    (inline cstruct*-coerce-to-set! ::cstruct* ::obj)
    (inline cstruct*-class::obj ::cstruct*)
    (inline cstruct*-class-set! ::cstruct* ::obj)
    (inline cstruct*-size::obj ::cstruct*)
    (inline cstruct*-size-set! ::cstruct* ::obj)
    (inline cstruct*-name::obj ::cstruct*)
    (inline cstruct*-name-set! ::cstruct* ::obj)
    (inline cstruct*-id::symbol ::cstruct*)))))

;; The definitions
(cond-expand (bigloo-class-sans
;; calias
(define-inline (make-calias::calias id1323::symbol name1324::obj size1325::obj class1326::obj coerce-to1327::obj parents1328::obj init?1329::bool magic?1330::bool $1331::obj alias1332::obj pointed-to-by1333::obj tvector1334::obj location1335::obj import-location1336::obj occurrence1337::int array?1338::bool) (instantiate::calias (id id1323) (name name1324) (size size1325) (class class1326) (coerce-to coerce-to1327) (parents parents1328) (init? init?1329) (magic? magic?1330) ($ $1331) (alias alias1332) (pointed-to-by pointed-to-by1333) (tvector tvector1334) (location location1335) (import-location import-location1336) (occurrence occurrence1337) (array? array?1338)))
(define-inline (calias?::bool obj::obj) ((@ isa? __object) obj (@ calias foreign_ctype)))
(define (calias-nil::calias) (class-nil (@ calias foreign_ctype)))
(define-inline (calias-array?::bool o::calias) (-> |#!bigloo_wallow| o array?))
(define-inline (calias-array?-set! o::calias v::bool) (set! (-> |#!bigloo_wallow| o array?) v))
(define-inline (calias-occurrence::int o::calias) (-> |#!bigloo_wallow| o occurrence))
(define-inline (calias-occurrence-set! o::calias v::int) (set! (-> |#!bigloo_wallow| o occurrence) v))
(define-inline (calias-import-location::obj o::calias) (-> |#!bigloo_wallow| o import-location))
(define-inline (calias-import-location-set! o::calias v::obj) (set! (-> |#!bigloo_wallow| o import-location) v))
(define-inline (calias-location::obj o::calias) (-> |#!bigloo_wallow| o location))
(define-inline (calias-location-set! o::calias v::obj) (set! (-> |#!bigloo_wallow| o location) v))
(define-inline (calias-tvector::obj o::calias) (-> |#!bigloo_wallow| o tvector))
(define-inline (calias-tvector-set! o::calias v::obj) (set! (-> |#!bigloo_wallow| o tvector) v))
(define-inline (calias-pointed-to-by::obj o::calias) (-> |#!bigloo_wallow| o pointed-to-by))
(define-inline (calias-pointed-to-by-set! o::calias v::obj) (set! (-> |#!bigloo_wallow| o pointed-to-by) v))
(define-inline (calias-alias::obj o::calias) (-> |#!bigloo_wallow| o alias))
(define-inline (calias-alias-set! o::calias v::obj) (set! (-> |#!bigloo_wallow| o alias) v))
(define-inline (calias-$::obj o::calias) (-> |#!bigloo_wallow| o $))
(define-inline (calias-$-set! o::calias v::obj) (set! (-> |#!bigloo_wallow| o $) v))
(define-inline (calias-magic?::bool o::calias) (-> |#!bigloo_wallow| o magic?))
(define-inline (calias-magic?-set! o::calias v::bool) (set! (-> |#!bigloo_wallow| o magic?) v))
(define-inline (calias-init?::bool o::calias) (-> |#!bigloo_wallow| o init?))
(define-inline (calias-init?-set! o::calias v::bool) (set! (-> |#!bigloo_wallow| o init?) v))
(define-inline (calias-parents::obj o::calias) (-> |#!bigloo_wallow| o parents))
(define-inline (calias-parents-set! o::calias v::obj) (set! (-> |#!bigloo_wallow| o parents) v))
(define-inline (calias-coerce-to::obj o::calias) (-> |#!bigloo_wallow| o coerce-to))
(define-inline (calias-coerce-to-set! o::calias v::obj) (set! (-> |#!bigloo_wallow| o coerce-to) v))
(define-inline (calias-class::obj o::calias) (-> |#!bigloo_wallow| o class))
(define-inline (calias-class-set! o::calias v::obj) (set! (-> |#!bigloo_wallow| o class) v))
(define-inline (calias-size::obj o::calias) (-> |#!bigloo_wallow| o size))
(define-inline (calias-size-set! o::calias v::obj) (set! (-> |#!bigloo_wallow| o size) v))
(define-inline (calias-name::obj o::calias) (-> |#!bigloo_wallow| o name))
(define-inline (calias-name-set! o::calias v::obj) (set! (-> |#!bigloo_wallow| o name) v))
(define-inline (calias-id::symbol o::calias) (-> |#!bigloo_wallow| o id))
(define-inline (calias-id-set! o::calias v::symbol) (set! (-> |#!bigloo_wallow| o id) v))

;; cenum
(define-inline (make-cenum::cenum id1305::symbol name1306::obj size1307::obj class1308::obj coerce-to1309::obj parents1310::obj init?1311::bool magic?1312::bool $1313::obj alias1314::obj pointed-to-by1315::obj tvector1316::obj location1317::obj import-location1318::obj occurrence1319::int btype1320::type literals1321::obj) (instantiate::cenum (id id1305) (name name1306) (size size1307) (class class1308) (coerce-to coerce-to1309) (parents parents1310) (init? init?1311) (magic? magic?1312) ($ $1313) (alias alias1314) (pointed-to-by pointed-to-by1315) (tvector tvector1316) (location location1317) (import-location import-location1318) (occurrence occurrence1319) (btype btype1320) (literals literals1321)))
(define-inline (cenum?::bool obj::obj) ((@ isa? __object) obj (@ cenum foreign_ctype)))
(define (cenum-nil::cenum) (class-nil (@ cenum foreign_ctype)))
(define-inline (cenum-literals::obj o::cenum) (-> |#!bigloo_wallow| o literals))
(define-inline (cenum-literals-set! o::cenum v::obj) (set! (-> |#!bigloo_wallow| o literals) v))
(define-inline (cenum-btype::type o::cenum) (-> |#!bigloo_wallow| o btype))
(define-inline (cenum-btype-set! o::cenum v::type) (set! (-> |#!bigloo_wallow| o btype) v))
(define-inline (cenum-occurrence::int o::cenum) (-> |#!bigloo_wallow| o occurrence))
(define-inline (cenum-occurrence-set! o::cenum v::int) (set! (-> |#!bigloo_wallow| o occurrence) v))
(define-inline (cenum-import-location::obj o::cenum) (-> |#!bigloo_wallow| o import-location))
(define-inline (cenum-import-location-set! o::cenum v::obj) (set! (-> |#!bigloo_wallow| o import-location) v))
(define-inline (cenum-location::obj o::cenum) (-> |#!bigloo_wallow| o location))
(define-inline (cenum-location-set! o::cenum v::obj) (set! (-> |#!bigloo_wallow| o location) v))
(define-inline (cenum-tvector::obj o::cenum) (-> |#!bigloo_wallow| o tvector))
(define-inline (cenum-tvector-set! o::cenum v::obj) (set! (-> |#!bigloo_wallow| o tvector) v))
(define-inline (cenum-pointed-to-by::obj o::cenum) (-> |#!bigloo_wallow| o pointed-to-by))
(define-inline (cenum-pointed-to-by-set! o::cenum v::obj) (set! (-> |#!bigloo_wallow| o pointed-to-by) v))
(define-inline (cenum-alias::obj o::cenum) (-> |#!bigloo_wallow| o alias))
(define-inline (cenum-alias-set! o::cenum v::obj) (set! (-> |#!bigloo_wallow| o alias) v))
(define-inline (cenum-$::obj o::cenum) (-> |#!bigloo_wallow| o $))
(define-inline (cenum-$-set! o::cenum v::obj) (set! (-> |#!bigloo_wallow| o $) v))
(define-inline (cenum-magic?::bool o::cenum) (-> |#!bigloo_wallow| o magic?))
(define-inline (cenum-magic?-set! o::cenum v::bool) (set! (-> |#!bigloo_wallow| o magic?) v))
(define-inline (cenum-init?::bool o::cenum) (-> |#!bigloo_wallow| o init?))
(define-inline (cenum-init?-set! o::cenum v::bool) (set! (-> |#!bigloo_wallow| o init?) v))
(define-inline (cenum-parents::obj o::cenum) (-> |#!bigloo_wallow| o parents))
(define-inline (cenum-parents-set! o::cenum v::obj) (set! (-> |#!bigloo_wallow| o parents) v))
(define-inline (cenum-coerce-to::obj o::cenum) (-> |#!bigloo_wallow| o coerce-to))
(define-inline (cenum-coerce-to-set! o::cenum v::obj) (set! (-> |#!bigloo_wallow| o coerce-to) v))
(define-inline (cenum-class::obj o::cenum) (-> |#!bigloo_wallow| o class))
(define-inline (cenum-class-set! o::cenum v::obj) (set! (-> |#!bigloo_wallow| o class) v))
(define-inline (cenum-size::obj o::cenum) (-> |#!bigloo_wallow| o size))
(define-inline (cenum-size-set! o::cenum v::obj) (set! (-> |#!bigloo_wallow| o size) v))
(define-inline (cenum-name::obj o::cenum) (-> |#!bigloo_wallow| o name))
(define-inline (cenum-name-set! o::cenum v::obj) (set! (-> |#!bigloo_wallow| o name) v))
(define-inline (cenum-id::symbol o::cenum) (-> |#!bigloo_wallow| o id))
(define-inline (cenum-id-set! o::cenum v::symbol) (set! (-> |#!bigloo_wallow| o id) v))

;; copaque
(define-inline (make-copaque::copaque id1288::symbol name1289::obj size1290::obj class1291::obj coerce-to1292::obj parents1293::obj init?1294::bool magic?1295::bool $1296::obj alias1297::obj pointed-to-by1298::obj tvector1299::obj location1300::obj import-location1301::obj occurrence1302::int btype1303::type) (instantiate::copaque (id id1288) (name name1289) (size size1290) (class class1291) (coerce-to coerce-to1292) (parents parents1293) (init? init?1294) (magic? magic?1295) ($ $1296) (alias alias1297) (pointed-to-by pointed-to-by1298) (tvector tvector1299) (location location1300) (import-location import-location1301) (occurrence occurrence1302) (btype btype1303)))
(define-inline (copaque?::bool obj::obj) ((@ isa? __object) obj (@ copaque foreign_ctype)))
(define (copaque-nil::copaque) (class-nil (@ copaque foreign_ctype)))
(define-inline (copaque-btype::type o::copaque) (-> |#!bigloo_wallow| o btype))
(define-inline (copaque-btype-set! o::copaque v::type) (set! (-> |#!bigloo_wallow| o btype) v))
(define-inline (copaque-occurrence::int o::copaque) (-> |#!bigloo_wallow| o occurrence))
(define-inline (copaque-occurrence-set! o::copaque v::int) (set! (-> |#!bigloo_wallow| o occurrence) v))
(define-inline (copaque-import-location::obj o::copaque) (-> |#!bigloo_wallow| o import-location))
(define-inline (copaque-import-location-set! o::copaque v::obj) (set! (-> |#!bigloo_wallow| o import-location) v))
(define-inline (copaque-location::obj o::copaque) (-> |#!bigloo_wallow| o location))
(define-inline (copaque-location-set! o::copaque v::obj) (set! (-> |#!bigloo_wallow| o location) v))
(define-inline (copaque-tvector::obj o::copaque) (-> |#!bigloo_wallow| o tvector))
(define-inline (copaque-tvector-set! o::copaque v::obj) (set! (-> |#!bigloo_wallow| o tvector) v))
(define-inline (copaque-pointed-to-by::obj o::copaque) (-> |#!bigloo_wallow| o pointed-to-by))
(define-inline (copaque-pointed-to-by-set! o::copaque v::obj) (set! (-> |#!bigloo_wallow| o pointed-to-by) v))
(define-inline (copaque-alias::obj o::copaque) (-> |#!bigloo_wallow| o alias))
(define-inline (copaque-alias-set! o::copaque v::obj) (set! (-> |#!bigloo_wallow| o alias) v))
(define-inline (copaque-$::obj o::copaque) (-> |#!bigloo_wallow| o $))
(define-inline (copaque-$-set! o::copaque v::obj) (set! (-> |#!bigloo_wallow| o $) v))
(define-inline (copaque-magic?::bool o::copaque) (-> |#!bigloo_wallow| o magic?))
(define-inline (copaque-magic?-set! o::copaque v::bool) (set! (-> |#!bigloo_wallow| o magic?) v))
(define-inline (copaque-init?::bool o::copaque) (-> |#!bigloo_wallow| o init?))
(define-inline (copaque-init?-set! o::copaque v::bool) (set! (-> |#!bigloo_wallow| o init?) v))
(define-inline (copaque-parents::obj o::copaque) (-> |#!bigloo_wallow| o parents))
(define-inline (copaque-parents-set! o::copaque v::obj) (set! (-> |#!bigloo_wallow| o parents) v))
(define-inline (copaque-coerce-to::obj o::copaque) (-> |#!bigloo_wallow| o coerce-to))
(define-inline (copaque-coerce-to-set! o::copaque v::obj) (set! (-> |#!bigloo_wallow| o coerce-to) v))
(define-inline (copaque-class::obj o::copaque) (-> |#!bigloo_wallow| o class))
(define-inline (copaque-class-set! o::copaque v::obj) (set! (-> |#!bigloo_wallow| o class) v))
(define-inline (copaque-size::obj o::copaque) (-> |#!bigloo_wallow| o size))
(define-inline (copaque-size-set! o::copaque v::obj) (set! (-> |#!bigloo_wallow| o size) v))
(define-inline (copaque-name::obj o::copaque) (-> |#!bigloo_wallow| o name))
(define-inline (copaque-name-set! o::copaque v::obj) (set! (-> |#!bigloo_wallow| o name) v))
(define-inline (copaque-id::symbol o::copaque) (-> |#!bigloo_wallow| o id))
(define-inline (copaque-id-set! o::copaque v::symbol) (set! (-> |#!bigloo_wallow| o id) v))

;; cfunction
(define-inline (make-cfunction::cfunction id1268::symbol name1269::obj size1270::obj class1271::obj coerce-to1272::obj parents1273::obj init?1274::bool magic?1275::bool $1276::obj alias1277::obj pointed-to-by1278::obj tvector1279::obj location1280::obj import-location1281::obj occurrence1282::int btype1283::type arity1284::long type-res1285::type type-args1286::obj) (instantiate::cfunction (id id1268) (name name1269) (size size1270) (class class1271) (coerce-to coerce-to1272) (parents parents1273) (init? init?1274) (magic? magic?1275) ($ $1276) (alias alias1277) (pointed-to-by pointed-to-by1278) (tvector tvector1279) (location location1280) (import-location import-location1281) (occurrence occurrence1282) (btype btype1283) (arity arity1284) (type-res type-res1285) (type-args type-args1286)))
(define-inline (cfunction?::bool obj::obj) ((@ isa? __object) obj (@ cfunction foreign_ctype)))
(define (cfunction-nil::cfunction) (class-nil (@ cfunction foreign_ctype)))
(define-inline (cfunction-type-args::obj o::cfunction) (-> |#!bigloo_wallow| o type-args))
(define-inline (cfunction-type-args-set! o::cfunction v::obj) (set! (-> |#!bigloo_wallow| o type-args) v))
(define-inline (cfunction-type-res::type o::cfunction) (-> |#!bigloo_wallow| o type-res))
(define-inline (cfunction-type-res-set! o::cfunction v::type) (set! (-> |#!bigloo_wallow| o type-res) v))
(define-inline (cfunction-arity::long o::cfunction) (-> |#!bigloo_wallow| o arity))
(define-inline (cfunction-arity-set! o::cfunction v::long) (set! (-> |#!bigloo_wallow| o arity) v))
(define-inline (cfunction-btype::type o::cfunction) (-> |#!bigloo_wallow| o btype))
(define-inline (cfunction-btype-set! o::cfunction v::type) (set! (-> |#!bigloo_wallow| o btype) v))
(define-inline (cfunction-occurrence::int o::cfunction) (-> |#!bigloo_wallow| o occurrence))
(define-inline (cfunction-occurrence-set! o::cfunction v::int) (set! (-> |#!bigloo_wallow| o occurrence) v))
(define-inline (cfunction-import-location::obj o::cfunction) (-> |#!bigloo_wallow| o import-location))
(define-inline (cfunction-import-location-set! o::cfunction v::obj) (set! (-> |#!bigloo_wallow| o import-location) v))
(define-inline (cfunction-location::obj o::cfunction) (-> |#!bigloo_wallow| o location))
(define-inline (cfunction-location-set! o::cfunction v::obj) (set! (-> |#!bigloo_wallow| o location) v))
(define-inline (cfunction-tvector::obj o::cfunction) (-> |#!bigloo_wallow| o tvector))
(define-inline (cfunction-tvector-set! o::cfunction v::obj) (set! (-> |#!bigloo_wallow| o tvector) v))
(define-inline (cfunction-pointed-to-by::obj o::cfunction) (-> |#!bigloo_wallow| o pointed-to-by))
(define-inline (cfunction-pointed-to-by-set! o::cfunction v::obj) (set! (-> |#!bigloo_wallow| o pointed-to-by) v))
(define-inline (cfunction-alias::obj o::cfunction) (-> |#!bigloo_wallow| o alias))
(define-inline (cfunction-alias-set! o::cfunction v::obj) (set! (-> |#!bigloo_wallow| o alias) v))
(define-inline (cfunction-$::obj o::cfunction) (-> |#!bigloo_wallow| o $))
(define-inline (cfunction-$-set! o::cfunction v::obj) (set! (-> |#!bigloo_wallow| o $) v))
(define-inline (cfunction-magic?::bool o::cfunction) (-> |#!bigloo_wallow| o magic?))
(define-inline (cfunction-magic?-set! o::cfunction v::bool) (set! (-> |#!bigloo_wallow| o magic?) v))
(define-inline (cfunction-init?::bool o::cfunction) (-> |#!bigloo_wallow| o init?))
(define-inline (cfunction-init?-set! o::cfunction v::bool) (set! (-> |#!bigloo_wallow| o init?) v))
(define-inline (cfunction-parents::obj o::cfunction) (-> |#!bigloo_wallow| o parents))
(define-inline (cfunction-parents-set! o::cfunction v::obj) (set! (-> |#!bigloo_wallow| o parents) v))
(define-inline (cfunction-coerce-to::obj o::cfunction) (-> |#!bigloo_wallow| o coerce-to))
(define-inline (cfunction-coerce-to-set! o::cfunction v::obj) (set! (-> |#!bigloo_wallow| o coerce-to) v))
(define-inline (cfunction-class::obj o::cfunction) (-> |#!bigloo_wallow| o class))
(define-inline (cfunction-class-set! o::cfunction v::obj) (set! (-> |#!bigloo_wallow| o class) v))
(define-inline (cfunction-size::obj o::cfunction) (-> |#!bigloo_wallow| o size))
(define-inline (cfunction-size-set! o::cfunction v::obj) (set! (-> |#!bigloo_wallow| o size) v))
(define-inline (cfunction-name::obj o::cfunction) (-> |#!bigloo_wallow| o name))
(define-inline (cfunction-name-set! o::cfunction v::obj) (set! (-> |#!bigloo_wallow| o name) v))
(define-inline (cfunction-id::symbol o::cfunction) (-> |#!bigloo_wallow| o id))
(define-inline (cfunction-id-set! o::cfunction v::symbol) (set! (-> |#!bigloo_wallow| o id) v))

;; cptr
(define-inline (make-cptr::cptr id1249::symbol name1250::obj size1251::obj class1252::obj coerce-to1253::obj parents1254::obj init?1255::bool magic?1256::bool $1257::obj alias1258::obj pointed-to-by1259::obj tvector1260::obj location1261::obj import-location1262::obj occurrence1263::int btype1264::type point-to1265::type array?1266::bool) (instantiate::cptr (id id1249) (name name1250) (size size1251) (class class1252) (coerce-to coerce-to1253) (parents parents1254) (init? init?1255) (magic? magic?1256) ($ $1257) (alias alias1258) (pointed-to-by pointed-to-by1259) (tvector tvector1260) (location location1261) (import-location import-location1262) (occurrence occurrence1263) (btype btype1264) (point-to point-to1265) (array? array?1266)))
(define-inline (cptr?::bool obj::obj) ((@ isa? __object) obj (@ cptr foreign_ctype)))
(define (cptr-nil::cptr) (class-nil (@ cptr foreign_ctype)))
(define-inline (cptr-array?::bool o::cptr) (-> |#!bigloo_wallow| o array?))
(define-inline (cptr-array?-set! o::cptr v::bool) (set! (-> |#!bigloo_wallow| o array?) v))
(define-inline (cptr-point-to::type o::cptr) (-> |#!bigloo_wallow| o point-to))
(define-inline (cptr-point-to-set! o::cptr v::type) (set! (-> |#!bigloo_wallow| o point-to) v))
(define-inline (cptr-btype::type o::cptr) (-> |#!bigloo_wallow| o btype))
(define-inline (cptr-btype-set! o::cptr v::type) (set! (-> |#!bigloo_wallow| o btype) v))
(define-inline (cptr-occurrence::int o::cptr) (-> |#!bigloo_wallow| o occurrence))
(define-inline (cptr-occurrence-set! o::cptr v::int) (set! (-> |#!bigloo_wallow| o occurrence) v))
(define-inline (cptr-import-location::obj o::cptr) (-> |#!bigloo_wallow| o import-location))
(define-inline (cptr-import-location-set! o::cptr v::obj) (set! (-> |#!bigloo_wallow| o import-location) v))
(define-inline (cptr-location::obj o::cptr) (-> |#!bigloo_wallow| o location))
(define-inline (cptr-location-set! o::cptr v::obj) (set! (-> |#!bigloo_wallow| o location) v))
(define-inline (cptr-tvector::obj o::cptr) (-> |#!bigloo_wallow| o tvector))
(define-inline (cptr-tvector-set! o::cptr v::obj) (set! (-> |#!bigloo_wallow| o tvector) v))
(define-inline (cptr-pointed-to-by::obj o::cptr) (-> |#!bigloo_wallow| o pointed-to-by))
(define-inline (cptr-pointed-to-by-set! o::cptr v::obj) (set! (-> |#!bigloo_wallow| o pointed-to-by) v))
(define-inline (cptr-alias::obj o::cptr) (-> |#!bigloo_wallow| o alias))
(define-inline (cptr-alias-set! o::cptr v::obj) (set! (-> |#!bigloo_wallow| o alias) v))
(define-inline (cptr-$::obj o::cptr) (-> |#!bigloo_wallow| o $))
(define-inline (cptr-$-set! o::cptr v::obj) (set! (-> |#!bigloo_wallow| o $) v))
(define-inline (cptr-magic?::bool o::cptr) (-> |#!bigloo_wallow| o magic?))
(define-inline (cptr-magic?-set! o::cptr v::bool) (set! (-> |#!bigloo_wallow| o magic?) v))
(define-inline (cptr-init?::bool o::cptr) (-> |#!bigloo_wallow| o init?))
(define-inline (cptr-init?-set! o::cptr v::bool) (set! (-> |#!bigloo_wallow| o init?) v))
(define-inline (cptr-parents::obj o::cptr) (-> |#!bigloo_wallow| o parents))
(define-inline (cptr-parents-set! o::cptr v::obj) (set! (-> |#!bigloo_wallow| o parents) v))
(define-inline (cptr-coerce-to::obj o::cptr) (-> |#!bigloo_wallow| o coerce-to))
(define-inline (cptr-coerce-to-set! o::cptr v::obj) (set! (-> |#!bigloo_wallow| o coerce-to) v))
(define-inline (cptr-class::obj o::cptr) (-> |#!bigloo_wallow| o class))
(define-inline (cptr-class-set! o::cptr v::obj) (set! (-> |#!bigloo_wallow| o class) v))
(define-inline (cptr-size::obj o::cptr) (-> |#!bigloo_wallow| o size))
(define-inline (cptr-size-set! o::cptr v::obj) (set! (-> |#!bigloo_wallow| o size) v))
(define-inline (cptr-name::obj o::cptr) (-> |#!bigloo_wallow| o name))
(define-inline (cptr-name-set! o::cptr v::obj) (set! (-> |#!bigloo_wallow| o name) v))
(define-inline (cptr-id::symbol o::cptr) (-> |#!bigloo_wallow| o id))
(define-inline (cptr-id-set! o::cptr v::symbol) (set! (-> |#!bigloo_wallow| o id) v))

;; cstruct
(define-inline (make-cstruct::cstruct id1230::symbol name1231::obj size1232::obj class1233::obj coerce-to1234::obj parents1235::obj init?1236::bool magic?1237::bool $1238::obj alias1239::obj pointed-to-by1240::obj tvector1241::obj location1242::obj import-location1243::obj occurrence1244::int struct?1245::bool fields1246::obj cstruct*1247::obj) (instantiate::cstruct (id id1230) (name name1231) (size size1232) (class class1233) (coerce-to coerce-to1234) (parents parents1235) (init? init?1236) (magic? magic?1237) ($ $1238) (alias alias1239) (pointed-to-by pointed-to-by1240) (tvector tvector1241) (location location1242) (import-location import-location1243) (occurrence occurrence1244) (struct? struct?1245) (fields fields1246) (cstruct* cstruct*1247)))
(define-inline (cstruct?::bool obj::obj) ((@ isa? __object) obj (@ cstruct foreign_ctype)))
(define (cstruct-nil::cstruct) (class-nil (@ cstruct foreign_ctype)))
(define-inline (cstruct-cstruct*::obj o::cstruct) (-> |#!bigloo_wallow| o cstruct*))
(define-inline (cstruct-cstruct*-set! o::cstruct v::obj) (set! (-> |#!bigloo_wallow| o cstruct*) v))
(define-inline (cstruct-fields::obj o::cstruct) (-> |#!bigloo_wallow| o fields))
(define-inline (cstruct-fields-set! o::cstruct v::obj) (set! (-> |#!bigloo_wallow| o fields) v))
(define-inline (cstruct-struct?::bool o::cstruct) (-> |#!bigloo_wallow| o struct?))
(define-inline (cstruct-struct?-set! o::cstruct v::bool) (set! (-> |#!bigloo_wallow| o struct?) v))
(define-inline (cstruct-occurrence::int o::cstruct) (-> |#!bigloo_wallow| o occurrence))
(define-inline (cstruct-occurrence-set! o::cstruct v::int) (set! (-> |#!bigloo_wallow| o occurrence) v))
(define-inline (cstruct-import-location::obj o::cstruct) (-> |#!bigloo_wallow| o import-location))
(define-inline (cstruct-import-location-set! o::cstruct v::obj) (set! (-> |#!bigloo_wallow| o import-location) v))
(define-inline (cstruct-location::obj o::cstruct) (-> |#!bigloo_wallow| o location))
(define-inline (cstruct-location-set! o::cstruct v::obj) (set! (-> |#!bigloo_wallow| o location) v))
(define-inline (cstruct-tvector::obj o::cstruct) (-> |#!bigloo_wallow| o tvector))
(define-inline (cstruct-tvector-set! o::cstruct v::obj) (set! (-> |#!bigloo_wallow| o tvector) v))
(define-inline (cstruct-pointed-to-by::obj o::cstruct) (-> |#!bigloo_wallow| o pointed-to-by))
(define-inline (cstruct-pointed-to-by-set! o::cstruct v::obj) (set! (-> |#!bigloo_wallow| o pointed-to-by) v))
(define-inline (cstruct-alias::obj o::cstruct) (-> |#!bigloo_wallow| o alias))
(define-inline (cstruct-alias-set! o::cstruct v::obj) (set! (-> |#!bigloo_wallow| o alias) v))
(define-inline (cstruct-$::obj o::cstruct) (-> |#!bigloo_wallow| o $))
(define-inline (cstruct-$-set! o::cstruct v::obj) (set! (-> |#!bigloo_wallow| o $) v))
(define-inline (cstruct-magic?::bool o::cstruct) (-> |#!bigloo_wallow| o magic?))
(define-inline (cstruct-magic?-set! o::cstruct v::bool) (set! (-> |#!bigloo_wallow| o magic?) v))
(define-inline (cstruct-init?::bool o::cstruct) (-> |#!bigloo_wallow| o init?))
(define-inline (cstruct-init?-set! o::cstruct v::bool) (set! (-> |#!bigloo_wallow| o init?) v))
(define-inline (cstruct-parents::obj o::cstruct) (-> |#!bigloo_wallow| o parents))
(define-inline (cstruct-parents-set! o::cstruct v::obj) (set! (-> |#!bigloo_wallow| o parents) v))
(define-inline (cstruct-coerce-to::obj o::cstruct) (-> |#!bigloo_wallow| o coerce-to))
(define-inline (cstruct-coerce-to-set! o::cstruct v::obj) (set! (-> |#!bigloo_wallow| o coerce-to) v))
(define-inline (cstruct-class::obj o::cstruct) (-> |#!bigloo_wallow| o class))
(define-inline (cstruct-class-set! o::cstruct v::obj) (set! (-> |#!bigloo_wallow| o class) v))
(define-inline (cstruct-size::obj o::cstruct) (-> |#!bigloo_wallow| o size))
(define-inline (cstruct-size-set! o::cstruct v::obj) (set! (-> |#!bigloo_wallow| o size) v))
(define-inline (cstruct-name::obj o::cstruct) (-> |#!bigloo_wallow| o name))
(define-inline (cstruct-name-set! o::cstruct v::obj) (set! (-> |#!bigloo_wallow| o name) v))
(define-inline (cstruct-id::symbol o::cstruct) (-> |#!bigloo_wallow| o id))
(define-inline (cstruct-id-set! o::cstruct v::symbol) (set! (-> |#!bigloo_wallow| o id) v))

;; cstruct*
(define-inline (make-cstruct*::cstruct* id1212::symbol name1213::obj size1214::obj class1215::obj coerce-to1216::obj parents1217::obj init?1218::bool magic?1219::bool $1220::obj alias1221::obj pointed-to-by1222::obj tvector1223::obj location1224::obj import-location1225::obj occurrence1226::int btype1227::type cstruct1228::cstruct) (instantiate::cstruct* (id id1212) (name name1213) (size size1214) (class class1215) (coerce-to coerce-to1216) (parents parents1217) (init? init?1218) (magic? magic?1219) ($ $1220) (alias alias1221) (pointed-to-by pointed-to-by1222) (tvector tvector1223) (location location1224) (import-location import-location1225) (occurrence occurrence1226) (btype btype1227) (cstruct cstruct1228)))
(define-inline (cstruct*?::bool obj::obj) ((@ isa? __object) obj (@ cstruct* foreign_ctype)))
(define (cstruct*-nil::cstruct*) (class-nil (@ cstruct* foreign_ctype)))
(define-inline (cstruct*-cstruct::cstruct o::cstruct*) (-> |#!bigloo_wallow| o cstruct))
(define-inline (cstruct*-cstruct-set! o::cstruct* v::cstruct) (set! (-> |#!bigloo_wallow| o cstruct) v))
(define-inline (cstruct*-btype::type o::cstruct*) (-> |#!bigloo_wallow| o btype))
(define-inline (cstruct*-btype-set! o::cstruct* v::type) (set! (-> |#!bigloo_wallow| o btype) v))
(define-inline (cstruct*-occurrence::int o::cstruct*) (-> |#!bigloo_wallow| o occurrence))
(define-inline (cstruct*-occurrence-set! o::cstruct* v::int) (set! (-> |#!bigloo_wallow| o occurrence) v))
(define-inline (cstruct*-import-location::obj o::cstruct*) (-> |#!bigloo_wallow| o import-location))
(define-inline (cstruct*-import-location-set! o::cstruct* v::obj) (set! (-> |#!bigloo_wallow| o import-location) v))
(define-inline (cstruct*-location::obj o::cstruct*) (-> |#!bigloo_wallow| o location))
(define-inline (cstruct*-location-set! o::cstruct* v::obj) (set! (-> |#!bigloo_wallow| o location) v))
(define-inline (cstruct*-tvector::obj o::cstruct*) (-> |#!bigloo_wallow| o tvector))
(define-inline (cstruct*-tvector-set! o::cstruct* v::obj) (set! (-> |#!bigloo_wallow| o tvector) v))
(define-inline (cstruct*-pointed-to-by::obj o::cstruct*) (-> |#!bigloo_wallow| o pointed-to-by))
(define-inline (cstruct*-pointed-to-by-set! o::cstruct* v::obj) (set! (-> |#!bigloo_wallow| o pointed-to-by) v))
(define-inline (cstruct*-alias::obj o::cstruct*) (-> |#!bigloo_wallow| o alias))
(define-inline (cstruct*-alias-set! o::cstruct* v::obj) (set! (-> |#!bigloo_wallow| o alias) v))
(define-inline (cstruct*-$::obj o::cstruct*) (-> |#!bigloo_wallow| o $))
(define-inline (cstruct*-$-set! o::cstruct* v::obj) (set! (-> |#!bigloo_wallow| o $) v))
(define-inline (cstruct*-magic?::bool o::cstruct*) (-> |#!bigloo_wallow| o magic?))
(define-inline (cstruct*-magic?-set! o::cstruct* v::bool) (set! (-> |#!bigloo_wallow| o magic?) v))
(define-inline (cstruct*-init?::bool o::cstruct*) (-> |#!bigloo_wallow| o init?))
(define-inline (cstruct*-init?-set! o::cstruct* v::bool) (set! (-> |#!bigloo_wallow| o init?) v))
(define-inline (cstruct*-parents::obj o::cstruct*) (-> |#!bigloo_wallow| o parents))
(define-inline (cstruct*-parents-set! o::cstruct* v::obj) (set! (-> |#!bigloo_wallow| o parents) v))
(define-inline (cstruct*-coerce-to::obj o::cstruct*) (-> |#!bigloo_wallow| o coerce-to))
(define-inline (cstruct*-coerce-to-set! o::cstruct* v::obj) (set! (-> |#!bigloo_wallow| o coerce-to) v))
(define-inline (cstruct*-class::obj o::cstruct*) (-> |#!bigloo_wallow| o class))
(define-inline (cstruct*-class-set! o::cstruct* v::obj) (set! (-> |#!bigloo_wallow| o class) v))
(define-inline (cstruct*-size::obj o::cstruct*) (-> |#!bigloo_wallow| o size))
(define-inline (cstruct*-size-set! o::cstruct* v::obj) (set! (-> |#!bigloo_wallow| o size) v))
(define-inline (cstruct*-name::obj o::cstruct*) (-> |#!bigloo_wallow| o name))
(define-inline (cstruct*-name-set! o::cstruct* v::obj) (set! (-> |#!bigloo_wallow| o name) v))
(define-inline (cstruct*-id::symbol o::cstruct*) (-> |#!bigloo_wallow| o id))
(define-inline (cstruct*-id-set! o::cstruct* v::symbol) (set! (-> |#!bigloo_wallow| o id) v))
))
