;; ==========================================================
;; Class accessors
;; Bigloo (3.7b)
;; Inria -- Sophia Antipolis     Mon Nov 14 16:42:36 CET 2011 
;; (bigloo.new -classgen Foreign/jtype.scm)
;; ==========================================================

;; The directives
(directives

;; jarray
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-jarray::jarray id1128::symbol name1129::obj size1130::obj class1131::obj coerce-to1132::obj parents1133::obj init?1134::bool magic?1135::bool $1136::obj alias1137::obj pointed-to-by1138::obj tvector1139::obj location1140::obj import-location1141::obj occurrence1142::int item-type1143::type)
    (inline jarray?::bool ::obj)
    (jarray-nil::jarray)
    (inline jarray-item-type::type ::jarray)
    (inline jarray-occurrence::int ::jarray)
    (inline jarray-occurrence-set! ::jarray ::int)
    (inline jarray-import-location::obj ::jarray)
    (inline jarray-import-location-set! ::jarray ::obj)
    (inline jarray-location::obj ::jarray)
    (inline jarray-location-set! ::jarray ::obj)
    (inline jarray-tvector::obj ::jarray)
    (inline jarray-tvector-set! ::jarray ::obj)
    (inline jarray-pointed-to-by::obj ::jarray)
    (inline jarray-pointed-to-by-set! ::jarray ::obj)
    (inline jarray-alias::obj ::jarray)
    (inline jarray-alias-set! ::jarray ::obj)
    (inline jarray-$::obj ::jarray)
    (inline jarray-$-set! ::jarray ::obj)
    (inline jarray-magic?::bool ::jarray)
    (inline jarray-magic?-set! ::jarray ::bool)
    (inline jarray-init?::bool ::jarray)
    (inline jarray-init?-set! ::jarray ::bool)
    (inline jarray-parents::obj ::jarray)
    (inline jarray-parents-set! ::jarray ::obj)
    (inline jarray-coerce-to::obj ::jarray)
    (inline jarray-coerce-to-set! ::jarray ::obj)
    (inline jarray-class::obj ::jarray)
    (inline jarray-class-set! ::jarray ::obj)
    (inline jarray-size::obj ::jarray)
    (inline jarray-size-set! ::jarray ::obj)
    (inline jarray-name::obj ::jarray)
    (inline jarray-name-set! ::jarray ::obj)
    (inline jarray-id::symbol ::jarray)))))

;; The definitions
(cond-expand (bigloo-class-sans
;; jarray
(define-inline (make-jarray::jarray id1128::symbol name1129::obj size1130::obj class1131::obj coerce-to1132::obj parents1133::obj init?1134::bool magic?1135::bool $1136::obj alias1137::obj pointed-to-by1138::obj tvector1139::obj location1140::obj import-location1141::obj occurrence1142::int item-type1143::type) (instantiate::jarray (id id1128) (name name1129) (size size1130) (class class1131) (coerce-to coerce-to1132) (parents parents1133) (init? init?1134) (magic? magic?1135) ($ $1136) (alias alias1137) (pointed-to-by pointed-to-by1138) (tvector tvector1139) (location location1140) (import-location import-location1141) (occurrence occurrence1142) (item-type item-type1143)))
(define-inline (jarray?::bool obj::obj) ((@ isa? __object) obj (@ jarray foreign_jtype)))
(define (jarray-nil::jarray) (class-nil (@ jarray foreign_jtype)))
(define-inline (jarray-item-type::type o::jarray) (with-access::jarray o (item-type) item-type))
(define-inline (jarray-item-type-set! o::jarray v::type) (with-access::jarray o (item-type) (set! item-type v)))
(define-inline (jarray-occurrence::int o::jarray) (with-access::jarray o (occurrence) occurrence))
(define-inline (jarray-occurrence-set! o::jarray v::int) (with-access::jarray o (occurrence) (set! occurrence v)))
(define-inline (jarray-import-location::obj o::jarray) (with-access::jarray o (import-location) import-location))
(define-inline (jarray-import-location-set! o::jarray v::obj) (with-access::jarray o (import-location) (set! import-location v)))
(define-inline (jarray-location::obj o::jarray) (with-access::jarray o (location) location))
(define-inline (jarray-location-set! o::jarray v::obj) (with-access::jarray o (location) (set! location v)))
(define-inline (jarray-tvector::obj o::jarray) (with-access::jarray o (tvector) tvector))
(define-inline (jarray-tvector-set! o::jarray v::obj) (with-access::jarray o (tvector) (set! tvector v)))
(define-inline (jarray-pointed-to-by::obj o::jarray) (with-access::jarray o (pointed-to-by) pointed-to-by))
(define-inline (jarray-pointed-to-by-set! o::jarray v::obj) (with-access::jarray o (pointed-to-by) (set! pointed-to-by v)))
(define-inline (jarray-alias::obj o::jarray) (with-access::jarray o (alias) alias))
(define-inline (jarray-alias-set! o::jarray v::obj) (with-access::jarray o (alias) (set! alias v)))
(define-inline (jarray-$::obj o::jarray) (with-access::jarray o ($) $))
(define-inline (jarray-$-set! o::jarray v::obj) (with-access::jarray o ($) (set! $ v)))
(define-inline (jarray-magic?::bool o::jarray) (with-access::jarray o (magic?) magic?))
(define-inline (jarray-magic?-set! o::jarray v::bool) (with-access::jarray o (magic?) (set! magic? v)))
(define-inline (jarray-init?::bool o::jarray) (with-access::jarray o (init?) init?))
(define-inline (jarray-init?-set! o::jarray v::bool) (with-access::jarray o (init?) (set! init? v)))
(define-inline (jarray-parents::obj o::jarray) (with-access::jarray o (parents) parents))
(define-inline (jarray-parents-set! o::jarray v::obj) (with-access::jarray o (parents) (set! parents v)))
(define-inline (jarray-coerce-to::obj o::jarray) (with-access::jarray o (coerce-to) coerce-to))
(define-inline (jarray-coerce-to-set! o::jarray v::obj) (with-access::jarray o (coerce-to) (set! coerce-to v)))
(define-inline (jarray-class::obj o::jarray) (with-access::jarray o (class) class))
(define-inline (jarray-class-set! o::jarray v::obj) (with-access::jarray o (class) (set! class v)))
(define-inline (jarray-size::obj o::jarray) (with-access::jarray o (size) size))
(define-inline (jarray-size-set! o::jarray v::obj) (with-access::jarray o (size) (set! size v)))
(define-inline (jarray-name::obj o::jarray) (with-access::jarray o (name) name))
(define-inline (jarray-name-set! o::jarray v::obj) (with-access::jarray o (name) (set! name v)))
(define-inline (jarray-id::symbol o::jarray) (with-access::jarray o (id) id))
(define-inline (jarray-id-set! o::jarray v::symbol) (with-access::jarray o (id) (set! id v)))
))
