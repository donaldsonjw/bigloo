;; ==========================================================
;; Class accessors
;; Bigloo (3.7b)
;; Inria -- Sophia Antipolis     Mon Nov 14 16:42:36 CET 2011 
;; (bigloo.new -classgen Globalize/ginfo.scm)
;; ==========================================================

;; The directives
(directives

;; sfun/Ginfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-sfun/Ginfo::sfun/Ginfo arity1309::long side-effect1310::obj predicate-of1311::obj stack-allocator1312::obj top?1313::bool the-closure1314::obj effect1315::obj property1316::obj args1317::obj args-name1318::obj body1319::obj class1320::obj dsssl-keywords1321::obj loc1322::obj optionals1323::obj keys1324::obj the-closure-global1325::obj strength1326::symbol G?1327::bool cfrom1328::obj cfrom*1329::obj cto1330::obj cto*1331::obj efunctions1332::obj integrator1333::obj imark1334::obj owner1335::obj integrated1336::obj plugged-in1337::obj mark1338::long free-mark1339::obj the-global1340::obj kaptured1341::obj new-body1342::obj bmark1343::long umark1344::long free1345::obj bound1346::obj)
    (inline sfun/Ginfo?::bool ::obj)
    (sfun/Ginfo-nil::sfun/Ginfo)
    (inline sfun/Ginfo-bound::obj ::sfun/Ginfo)
    (inline sfun/Ginfo-bound-set! ::sfun/Ginfo ::obj)
    (inline sfun/Ginfo-free::obj ::sfun/Ginfo)
    (inline sfun/Ginfo-free-set! ::sfun/Ginfo ::obj)
    (inline sfun/Ginfo-umark::long ::sfun/Ginfo)
    (inline sfun/Ginfo-umark-set! ::sfun/Ginfo ::long)
    (inline sfun/Ginfo-bmark::long ::sfun/Ginfo)
    (inline sfun/Ginfo-bmark-set! ::sfun/Ginfo ::long)
    (inline sfun/Ginfo-new-body::obj ::sfun/Ginfo)
    (inline sfun/Ginfo-new-body-set! ::sfun/Ginfo ::obj)
    (inline sfun/Ginfo-kaptured::obj ::sfun/Ginfo)
    (inline sfun/Ginfo-kaptured-set! ::sfun/Ginfo ::obj)
    (inline sfun/Ginfo-the-global::obj ::sfun/Ginfo)
    (inline sfun/Ginfo-the-global-set! ::sfun/Ginfo ::obj)
    (inline sfun/Ginfo-free-mark::obj ::sfun/Ginfo)
    (inline sfun/Ginfo-free-mark-set! ::sfun/Ginfo ::obj)
    (inline sfun/Ginfo-mark::long ::sfun/Ginfo)
    (inline sfun/Ginfo-mark-set! ::sfun/Ginfo ::long)
    (inline sfun/Ginfo-plugged-in::obj ::sfun/Ginfo)
    (inline sfun/Ginfo-plugged-in-set! ::sfun/Ginfo ::obj)
    (inline sfun/Ginfo-integrated::obj ::sfun/Ginfo)
    (inline sfun/Ginfo-integrated-set! ::sfun/Ginfo ::obj)
    (inline sfun/Ginfo-owner::obj ::sfun/Ginfo)
    (inline sfun/Ginfo-owner-set! ::sfun/Ginfo ::obj)
    (inline sfun/Ginfo-imark::obj ::sfun/Ginfo)
    (inline sfun/Ginfo-imark-set! ::sfun/Ginfo ::obj)
    (inline sfun/Ginfo-integrator::obj ::sfun/Ginfo)
    (inline sfun/Ginfo-integrator-set! ::sfun/Ginfo ::obj)
    (inline sfun/Ginfo-efunctions::obj ::sfun/Ginfo)
    (inline sfun/Ginfo-efunctions-set! ::sfun/Ginfo ::obj)
    (inline sfun/Ginfo-cto*::obj ::sfun/Ginfo)
    (inline sfun/Ginfo-cto*-set! ::sfun/Ginfo ::obj)
    (inline sfun/Ginfo-cto::obj ::sfun/Ginfo)
    (inline sfun/Ginfo-cto-set! ::sfun/Ginfo ::obj)
    (inline sfun/Ginfo-cfrom*::obj ::sfun/Ginfo)
    (inline sfun/Ginfo-cfrom*-set! ::sfun/Ginfo ::obj)
    (inline sfun/Ginfo-cfrom::obj ::sfun/Ginfo)
    (inline sfun/Ginfo-cfrom-set! ::sfun/Ginfo ::obj)
    (inline sfun/Ginfo-G?::bool ::sfun/Ginfo)
    (inline sfun/Ginfo-G?-set! ::sfun/Ginfo ::bool)
    (inline sfun/Ginfo-strength::symbol ::sfun/Ginfo)
    (inline sfun/Ginfo-strength-set! ::sfun/Ginfo ::symbol)
    (inline sfun/Ginfo-the-closure-global::obj ::sfun/Ginfo)
    (inline sfun/Ginfo-the-closure-global-set! ::sfun/Ginfo ::obj)
    (inline sfun/Ginfo-keys::obj ::sfun/Ginfo)
    (inline sfun/Ginfo-optionals::obj ::sfun/Ginfo)
    (inline sfun/Ginfo-loc::obj ::sfun/Ginfo)
    (inline sfun/Ginfo-loc-set! ::sfun/Ginfo ::obj)
    (inline sfun/Ginfo-dsssl-keywords::obj ::sfun/Ginfo)
    (inline sfun/Ginfo-dsssl-keywords-set! ::sfun/Ginfo ::obj)
    (inline sfun/Ginfo-class::obj ::sfun/Ginfo)
    (inline sfun/Ginfo-class-set! ::sfun/Ginfo ::obj)
    (inline sfun/Ginfo-body::obj ::sfun/Ginfo)
    (inline sfun/Ginfo-body-set! ::sfun/Ginfo ::obj)
    (inline sfun/Ginfo-args-name::obj ::sfun/Ginfo)
    (inline sfun/Ginfo-args::obj ::sfun/Ginfo)
    (inline sfun/Ginfo-args-set! ::sfun/Ginfo ::obj)
    (inline sfun/Ginfo-property::obj ::sfun/Ginfo)
    (inline sfun/Ginfo-property-set! ::sfun/Ginfo ::obj)
    (inline sfun/Ginfo-effect::obj ::sfun/Ginfo)
    (inline sfun/Ginfo-effect-set! ::sfun/Ginfo ::obj)
    (inline sfun/Ginfo-the-closure::obj ::sfun/Ginfo)
    (inline sfun/Ginfo-the-closure-set! ::sfun/Ginfo ::obj)
    (inline sfun/Ginfo-top?::bool ::sfun/Ginfo)
    (inline sfun/Ginfo-top?-set! ::sfun/Ginfo ::bool)
    (inline sfun/Ginfo-stack-allocator::obj ::sfun/Ginfo)
    (inline sfun/Ginfo-stack-allocator-set! ::sfun/Ginfo ::obj)
    (inline sfun/Ginfo-predicate-of::obj ::sfun/Ginfo)
    (inline sfun/Ginfo-predicate-of-set! ::sfun/Ginfo ::obj)
    (inline sfun/Ginfo-side-effect::obj ::sfun/Ginfo)
    (inline sfun/Ginfo-side-effect-set! ::sfun/Ginfo ::obj)
    (inline sfun/Ginfo-arity::long ::sfun/Ginfo))))

;; svar/Ginfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-svar/Ginfo::svar/Ginfo loc1303::obj kaptured?1304::bool free-mark1305::long mark1306::long celled?1307::bool)
    (inline svar/Ginfo?::bool ::obj)
    (svar/Ginfo-nil::svar/Ginfo)
    (inline svar/Ginfo-celled?::bool ::svar/Ginfo)
    (inline svar/Ginfo-celled?-set! ::svar/Ginfo ::bool)
    (inline svar/Ginfo-mark::long ::svar/Ginfo)
    (inline svar/Ginfo-mark-set! ::svar/Ginfo ::long)
    (inline svar/Ginfo-free-mark::long ::svar/Ginfo)
    (inline svar/Ginfo-free-mark-set! ::svar/Ginfo ::long)
    (inline svar/Ginfo-kaptured?::bool ::svar/Ginfo)
    (inline svar/Ginfo-kaptured?-set! ::svar/Ginfo ::bool)
    (inline svar/Ginfo-loc::obj ::svar/Ginfo)
    (inline svar/Ginfo-loc-set! ::svar/Ginfo ::obj))))

;; sexit/Ginfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-sexit/Ginfo::sexit/Ginfo handler1296::obj detached?1297::bool G?1298::bool kaptured?1299::bool free-mark1300::long mark1301::long)
    (inline sexit/Ginfo?::bool ::obj)
    (sexit/Ginfo-nil::sexit/Ginfo)
    (inline sexit/Ginfo-mark::long ::sexit/Ginfo)
    (inline sexit/Ginfo-mark-set! ::sexit/Ginfo ::long)
    (inline sexit/Ginfo-free-mark::long ::sexit/Ginfo)
    (inline sexit/Ginfo-free-mark-set! ::sexit/Ginfo ::long)
    (inline sexit/Ginfo-kaptured?::bool ::sexit/Ginfo)
    (inline sexit/Ginfo-kaptured?-set! ::sexit/Ginfo ::bool)
    (inline sexit/Ginfo-G?::bool ::sexit/Ginfo)
    (inline sexit/Ginfo-G?-set! ::sexit/Ginfo ::bool)
    (inline sexit/Ginfo-detached?::bool ::sexit/Ginfo)
    (inline sexit/Ginfo-detached?-set! ::sexit/Ginfo ::bool)
    (inline sexit/Ginfo-handler::obj ::sexit/Ginfo)
    (inline sexit/Ginfo-handler-set! ::sexit/Ginfo ::obj))))

;; local/Ginfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-local/Ginfo::local/Ginfo id1282::symbol name1283::obj type1284::type value1285::value access1286::obj fast-alpha1287::obj removable1288::obj occurrence1289::long occurrencew1290::long user?1291::bool key1292::long escape?1293::bool globalized?1294::bool)
    (inline local/Ginfo?::bool ::obj)
    (local/Ginfo-nil::local/Ginfo)
    (inline local/Ginfo-globalized?::bool ::local/Ginfo)
    (inline local/Ginfo-globalized?-set! ::local/Ginfo ::bool)
    (inline local/Ginfo-escape?::bool ::local/Ginfo)
    (inline local/Ginfo-escape?-set! ::local/Ginfo ::bool)
    (inline local/Ginfo-key::long ::local/Ginfo)
    (inline local/Ginfo-user?::bool ::local/Ginfo)
    (inline local/Ginfo-user?-set! ::local/Ginfo ::bool)
    (inline local/Ginfo-occurrencew::long ::local/Ginfo)
    (inline local/Ginfo-occurrencew-set! ::local/Ginfo ::long)
    (inline local/Ginfo-occurrence::long ::local/Ginfo)
    (inline local/Ginfo-occurrence-set! ::local/Ginfo ::long)
    (inline local/Ginfo-removable::obj ::local/Ginfo)
    (inline local/Ginfo-removable-set! ::local/Ginfo ::obj)
    (inline local/Ginfo-fast-alpha::obj ::local/Ginfo)
    (inline local/Ginfo-fast-alpha-set! ::local/Ginfo ::obj)
    (inline local/Ginfo-access::obj ::local/Ginfo)
    (inline local/Ginfo-access-set! ::local/Ginfo ::obj)
    (inline local/Ginfo-value::value ::local/Ginfo)
    (inline local/Ginfo-value-set! ::local/Ginfo ::value)
    (inline local/Ginfo-type::type ::local/Ginfo)
    (inline local/Ginfo-type-set! ::local/Ginfo ::type)
    (inline local/Ginfo-name::obj ::local/Ginfo)
    (inline local/Ginfo-name-set! ::local/Ginfo ::obj)
    (inline local/Ginfo-id::symbol ::local/Ginfo))))

;; global/Ginfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-global/Ginfo::global/Ginfo id1260::symbol name1261::obj type1262::type value1263::value access1264::obj fast-alpha1265::obj removable1266::obj occurrence1267::long occurrencew1268::long user?1269::bool module1270::symbol import1271::obj evaluable?1272::bool eval?1273::bool library1274::obj pragma1275::obj src1276::obj jvm-type-name1277::bstring init1278::obj escape?1279::bool global-closure1280::obj)
    (inline global/Ginfo?::bool ::obj)
    (global/Ginfo-nil::global/Ginfo)
    (inline global/Ginfo-global-closure::obj ::global/Ginfo)
    (inline global/Ginfo-global-closure-set! ::global/Ginfo ::obj)
    (inline global/Ginfo-escape?::bool ::global/Ginfo)
    (inline global/Ginfo-escape?-set! ::global/Ginfo ::bool)
    (inline global/Ginfo-init::obj ::global/Ginfo)
    (inline global/Ginfo-init-set! ::global/Ginfo ::obj)
    (inline global/Ginfo-jvm-type-name::bstring ::global/Ginfo)
    (inline global/Ginfo-jvm-type-name-set! ::global/Ginfo ::bstring)
    (inline global/Ginfo-src::obj ::global/Ginfo)
    (inline global/Ginfo-src-set! ::global/Ginfo ::obj)
    (inline global/Ginfo-pragma::obj ::global/Ginfo)
    (inline global/Ginfo-pragma-set! ::global/Ginfo ::obj)
    (inline global/Ginfo-library::obj ::global/Ginfo)
    (inline global/Ginfo-library-set! ::global/Ginfo ::obj)
    (inline global/Ginfo-eval?::bool ::global/Ginfo)
    (inline global/Ginfo-eval?-set! ::global/Ginfo ::bool)
    (inline global/Ginfo-evaluable?::bool ::global/Ginfo)
    (inline global/Ginfo-evaluable?-set! ::global/Ginfo ::bool)
    (inline global/Ginfo-import::obj ::global/Ginfo)
    (inline global/Ginfo-import-set! ::global/Ginfo ::obj)
    (inline global/Ginfo-module::symbol ::global/Ginfo)
    (inline global/Ginfo-module-set! ::global/Ginfo ::symbol)
    (inline global/Ginfo-user?::bool ::global/Ginfo)
    (inline global/Ginfo-user?-set! ::global/Ginfo ::bool)
    (inline global/Ginfo-occurrencew::long ::global/Ginfo)
    (inline global/Ginfo-occurrencew-set! ::global/Ginfo ::long)
    (inline global/Ginfo-occurrence::long ::global/Ginfo)
    (inline global/Ginfo-occurrence-set! ::global/Ginfo ::long)
    (inline global/Ginfo-removable::obj ::global/Ginfo)
    (inline global/Ginfo-removable-set! ::global/Ginfo ::obj)
    (inline global/Ginfo-fast-alpha::obj ::global/Ginfo)
    (inline global/Ginfo-fast-alpha-set! ::global/Ginfo ::obj)
    (inline global/Ginfo-access::obj ::global/Ginfo)
    (inline global/Ginfo-access-set! ::global/Ginfo ::obj)
    (inline global/Ginfo-value::value ::global/Ginfo)
    (inline global/Ginfo-value-set! ::global/Ginfo ::value)
    (inline global/Ginfo-type::type ::global/Ginfo)
    (inline global/Ginfo-type-set! ::global/Ginfo ::type)
    (inline global/Ginfo-name::obj ::global/Ginfo)
    (inline global/Ginfo-name-set! ::global/Ginfo ::obj)
    (inline global/Ginfo-id::symbol ::global/Ginfo)))))

;; The definitions
(cond-expand (bigloo-class-sans
;; sfun/Ginfo
(define-inline (make-sfun/Ginfo::sfun/Ginfo arity1309::long side-effect1310::obj predicate-of1311::obj stack-allocator1312::obj top?1313::bool the-closure1314::obj effect1315::obj property1316::obj args1317::obj args-name1318::obj body1319::obj class1320::obj dsssl-keywords1321::obj loc1322::obj optionals1323::obj keys1324::obj the-closure-global1325::obj strength1326::symbol G?1327::bool cfrom1328::obj cfrom*1329::obj cto1330::obj cto*1331::obj efunctions1332::obj integrator1333::obj imark1334::obj owner1335::obj integrated1336::obj plugged-in1337::obj mark1338::long free-mark1339::obj the-global1340::obj kaptured1341::obj new-body1342::obj bmark1343::long umark1344::long free1345::obj bound1346::obj) (instantiate::sfun/Ginfo (arity arity1309) (side-effect side-effect1310) (predicate-of predicate-of1311) (stack-allocator stack-allocator1312) (top? top?1313) (the-closure the-closure1314) (effect effect1315) (property property1316) (args args1317) (args-name args-name1318) (body body1319) (class class1320) (dsssl-keywords dsssl-keywords1321) (loc loc1322) (optionals optionals1323) (keys keys1324) (the-closure-global the-closure-global1325) (strength strength1326) (G? G?1327) (cfrom cfrom1328) (cfrom* cfrom*1329) (cto cto1330) (cto* cto*1331) (efunctions efunctions1332) (integrator integrator1333) (imark imark1334) (owner owner1335) (integrated integrated1336) (plugged-in plugged-in1337) (mark mark1338) (free-mark free-mark1339) (the-global the-global1340) (kaptured kaptured1341) (new-body new-body1342) (bmark bmark1343) (umark umark1344) (free free1345) (bound bound1346)))
(define-inline (sfun/Ginfo?::bool obj::obj) ((@ isa? __object) obj (@ sfun/Ginfo globalize_ginfo)))
(define (sfun/Ginfo-nil::sfun/Ginfo) (class-nil (@ sfun/Ginfo globalize_ginfo)))
(define-inline (sfun/Ginfo-bound::obj o::sfun/Ginfo) (with-access::sfun/Ginfo o (bound) bound))
(define-inline (sfun/Ginfo-bound-set! o::sfun/Ginfo v::obj) (with-access::sfun/Ginfo o (bound) (set! bound v)))
(define-inline (sfun/Ginfo-free::obj o::sfun/Ginfo) (with-access::sfun/Ginfo o (free) free))
(define-inline (sfun/Ginfo-free-set! o::sfun/Ginfo v::obj) (with-access::sfun/Ginfo o (free) (set! free v)))
(define-inline (sfun/Ginfo-umark::long o::sfun/Ginfo) (with-access::sfun/Ginfo o (umark) umark))
(define-inline (sfun/Ginfo-umark-set! o::sfun/Ginfo v::long) (with-access::sfun/Ginfo o (umark) (set! umark v)))
(define-inline (sfun/Ginfo-bmark::long o::sfun/Ginfo) (with-access::sfun/Ginfo o (bmark) bmark))
(define-inline (sfun/Ginfo-bmark-set! o::sfun/Ginfo v::long) (with-access::sfun/Ginfo o (bmark) (set! bmark v)))
(define-inline (sfun/Ginfo-new-body::obj o::sfun/Ginfo) (with-access::sfun/Ginfo o (new-body) new-body))
(define-inline (sfun/Ginfo-new-body-set! o::sfun/Ginfo v::obj) (with-access::sfun/Ginfo o (new-body) (set! new-body v)))
(define-inline (sfun/Ginfo-kaptured::obj o::sfun/Ginfo) (with-access::sfun/Ginfo o (kaptured) kaptured))
(define-inline (sfun/Ginfo-kaptured-set! o::sfun/Ginfo v::obj) (with-access::sfun/Ginfo o (kaptured) (set! kaptured v)))
(define-inline (sfun/Ginfo-the-global::obj o::sfun/Ginfo) (with-access::sfun/Ginfo o (the-global) the-global))
(define-inline (sfun/Ginfo-the-global-set! o::sfun/Ginfo v::obj) (with-access::sfun/Ginfo o (the-global) (set! the-global v)))
(define-inline (sfun/Ginfo-free-mark::obj o::sfun/Ginfo) (with-access::sfun/Ginfo o (free-mark) free-mark))
(define-inline (sfun/Ginfo-free-mark-set! o::sfun/Ginfo v::obj) (with-access::sfun/Ginfo o (free-mark) (set! free-mark v)))
(define-inline (sfun/Ginfo-mark::long o::sfun/Ginfo) (with-access::sfun/Ginfo o (mark) mark))
(define-inline (sfun/Ginfo-mark-set! o::sfun/Ginfo v::long) (with-access::sfun/Ginfo o (mark) (set! mark v)))
(define-inline (sfun/Ginfo-plugged-in::obj o::sfun/Ginfo) (with-access::sfun/Ginfo o (plugged-in) plugged-in))
(define-inline (sfun/Ginfo-plugged-in-set! o::sfun/Ginfo v::obj) (with-access::sfun/Ginfo o (plugged-in) (set! plugged-in v)))
(define-inline (sfun/Ginfo-integrated::obj o::sfun/Ginfo) (with-access::sfun/Ginfo o (integrated) integrated))
(define-inline (sfun/Ginfo-integrated-set! o::sfun/Ginfo v::obj) (with-access::sfun/Ginfo o (integrated) (set! integrated v)))
(define-inline (sfun/Ginfo-owner::obj o::sfun/Ginfo) (with-access::sfun/Ginfo o (owner) owner))
(define-inline (sfun/Ginfo-owner-set! o::sfun/Ginfo v::obj) (with-access::sfun/Ginfo o (owner) (set! owner v)))
(define-inline (sfun/Ginfo-imark::obj o::sfun/Ginfo) (with-access::sfun/Ginfo o (imark) imark))
(define-inline (sfun/Ginfo-imark-set! o::sfun/Ginfo v::obj) (with-access::sfun/Ginfo o (imark) (set! imark v)))
(define-inline (sfun/Ginfo-integrator::obj o::sfun/Ginfo) (with-access::sfun/Ginfo o (integrator) integrator))
(define-inline (sfun/Ginfo-integrator-set! o::sfun/Ginfo v::obj) (with-access::sfun/Ginfo o (integrator) (set! integrator v)))
(define-inline (sfun/Ginfo-efunctions::obj o::sfun/Ginfo) (with-access::sfun/Ginfo o (efunctions) efunctions))
(define-inline (sfun/Ginfo-efunctions-set! o::sfun/Ginfo v::obj) (with-access::sfun/Ginfo o (efunctions) (set! efunctions v)))
(define-inline (sfun/Ginfo-cto*::obj o::sfun/Ginfo) (with-access::sfun/Ginfo o (cto*) cto*))
(define-inline (sfun/Ginfo-cto*-set! o::sfun/Ginfo v::obj) (with-access::sfun/Ginfo o (cto*) (set! cto* v)))
(define-inline (sfun/Ginfo-cto::obj o::sfun/Ginfo) (with-access::sfun/Ginfo o (cto) cto))
(define-inline (sfun/Ginfo-cto-set! o::sfun/Ginfo v::obj) (with-access::sfun/Ginfo o (cto) (set! cto v)))
(define-inline (sfun/Ginfo-cfrom*::obj o::sfun/Ginfo) (with-access::sfun/Ginfo o (cfrom*) cfrom*))
(define-inline (sfun/Ginfo-cfrom*-set! o::sfun/Ginfo v::obj) (with-access::sfun/Ginfo o (cfrom*) (set! cfrom* v)))
(define-inline (sfun/Ginfo-cfrom::obj o::sfun/Ginfo) (with-access::sfun/Ginfo o (cfrom) cfrom))
(define-inline (sfun/Ginfo-cfrom-set! o::sfun/Ginfo v::obj) (with-access::sfun/Ginfo o (cfrom) (set! cfrom v)))
(define-inline (sfun/Ginfo-G?::bool o::sfun/Ginfo) (with-access::sfun/Ginfo o (G?) G?))
(define-inline (sfun/Ginfo-G?-set! o::sfun/Ginfo v::bool) (with-access::sfun/Ginfo o (G?) (set! G? v)))
(define-inline (sfun/Ginfo-strength::symbol o::sfun/Ginfo) (with-access::sfun/Ginfo o (strength) strength))
(define-inline (sfun/Ginfo-strength-set! o::sfun/Ginfo v::symbol) (with-access::sfun/Ginfo o (strength) (set! strength v)))
(define-inline (sfun/Ginfo-the-closure-global::obj o::sfun/Ginfo) (with-access::sfun/Ginfo o (the-closure-global) the-closure-global))
(define-inline (sfun/Ginfo-the-closure-global-set! o::sfun/Ginfo v::obj) (with-access::sfun/Ginfo o (the-closure-global) (set! the-closure-global v)))
(define-inline (sfun/Ginfo-keys::obj o::sfun/Ginfo) (with-access::sfun/Ginfo o (keys) keys))
(define-inline (sfun/Ginfo-keys-set! o::sfun/Ginfo v::obj) (with-access::sfun/Ginfo o (keys) (set! keys v)))
(define-inline (sfun/Ginfo-optionals::obj o::sfun/Ginfo) (with-access::sfun/Ginfo o (optionals) optionals))
(define-inline (sfun/Ginfo-optionals-set! o::sfun/Ginfo v::obj) (with-access::sfun/Ginfo o (optionals) (set! optionals v)))
(define-inline (sfun/Ginfo-loc::obj o::sfun/Ginfo) (with-access::sfun/Ginfo o (loc) loc))
(define-inline (sfun/Ginfo-loc-set! o::sfun/Ginfo v::obj) (with-access::sfun/Ginfo o (loc) (set! loc v)))
(define-inline (sfun/Ginfo-dsssl-keywords::obj o::sfun/Ginfo) (with-access::sfun/Ginfo o (dsssl-keywords) dsssl-keywords))
(define-inline (sfun/Ginfo-dsssl-keywords-set! o::sfun/Ginfo v::obj) (with-access::sfun/Ginfo o (dsssl-keywords) (set! dsssl-keywords v)))
(define-inline (sfun/Ginfo-class::obj o::sfun/Ginfo) (with-access::sfun/Ginfo o (class) class))
(define-inline (sfun/Ginfo-class-set! o::sfun/Ginfo v::obj) (with-access::sfun/Ginfo o (class) (set! class v)))
(define-inline (sfun/Ginfo-body::obj o::sfun/Ginfo) (with-access::sfun/Ginfo o (body) body))
(define-inline (sfun/Ginfo-body-set! o::sfun/Ginfo v::obj) (with-access::sfun/Ginfo o (body) (set! body v)))
(define-inline (sfun/Ginfo-args-name::obj o::sfun/Ginfo) (with-access::sfun/Ginfo o (args-name) args-name))
(define-inline (sfun/Ginfo-args-name-set! o::sfun/Ginfo v::obj) (with-access::sfun/Ginfo o (args-name) (set! args-name v)))
(define-inline (sfun/Ginfo-args::obj o::sfun/Ginfo) (with-access::sfun/Ginfo o (args) args))
(define-inline (sfun/Ginfo-args-set! o::sfun/Ginfo v::obj) (with-access::sfun/Ginfo o (args) (set! args v)))
(define-inline (sfun/Ginfo-property::obj o::sfun/Ginfo) (with-access::sfun/Ginfo o (property) property))
(define-inline (sfun/Ginfo-property-set! o::sfun/Ginfo v::obj) (with-access::sfun/Ginfo o (property) (set! property v)))
(define-inline (sfun/Ginfo-effect::obj o::sfun/Ginfo) (with-access::sfun/Ginfo o (effect) effect))
(define-inline (sfun/Ginfo-effect-set! o::sfun/Ginfo v::obj) (with-access::sfun/Ginfo o (effect) (set! effect v)))
(define-inline (sfun/Ginfo-the-closure::obj o::sfun/Ginfo) (with-access::sfun/Ginfo o (the-closure) the-closure))
(define-inline (sfun/Ginfo-the-closure-set! o::sfun/Ginfo v::obj) (with-access::sfun/Ginfo o (the-closure) (set! the-closure v)))
(define-inline (sfun/Ginfo-top?::bool o::sfun/Ginfo) (with-access::sfun/Ginfo o (top?) top?))
(define-inline (sfun/Ginfo-top?-set! o::sfun/Ginfo v::bool) (with-access::sfun/Ginfo o (top?) (set! top? v)))
(define-inline (sfun/Ginfo-stack-allocator::obj o::sfun/Ginfo) (with-access::sfun/Ginfo o (stack-allocator) stack-allocator))
(define-inline (sfun/Ginfo-stack-allocator-set! o::sfun/Ginfo v::obj) (with-access::sfun/Ginfo o (stack-allocator) (set! stack-allocator v)))
(define-inline (sfun/Ginfo-predicate-of::obj o::sfun/Ginfo) (with-access::sfun/Ginfo o (predicate-of) predicate-of))
(define-inline (sfun/Ginfo-predicate-of-set! o::sfun/Ginfo v::obj) (with-access::sfun/Ginfo o (predicate-of) (set! predicate-of v)))
(define-inline (sfun/Ginfo-side-effect::obj o::sfun/Ginfo) (with-access::sfun/Ginfo o (side-effect) side-effect))
(define-inline (sfun/Ginfo-side-effect-set! o::sfun/Ginfo v::obj) (with-access::sfun/Ginfo o (side-effect) (set! side-effect v)))
(define-inline (sfun/Ginfo-arity::long o::sfun/Ginfo) (with-access::sfun/Ginfo o (arity) arity))
(define-inline (sfun/Ginfo-arity-set! o::sfun/Ginfo v::long) (with-access::sfun/Ginfo o (arity) (set! arity v)))

;; svar/Ginfo
(define-inline (make-svar/Ginfo::svar/Ginfo loc1303::obj kaptured?1304::bool free-mark1305::long mark1306::long celled?1307::bool) (instantiate::svar/Ginfo (loc loc1303) (kaptured? kaptured?1304) (free-mark free-mark1305) (mark mark1306) (celled? celled?1307)))
(define-inline (svar/Ginfo?::bool obj::obj) ((@ isa? __object) obj (@ svar/Ginfo globalize_ginfo)))
(define (svar/Ginfo-nil::svar/Ginfo) (class-nil (@ svar/Ginfo globalize_ginfo)))
(define-inline (svar/Ginfo-celled?::bool o::svar/Ginfo) (with-access::svar/Ginfo o (celled?) celled?))
(define-inline (svar/Ginfo-celled?-set! o::svar/Ginfo v::bool) (with-access::svar/Ginfo o (celled?) (set! celled? v)))
(define-inline (svar/Ginfo-mark::long o::svar/Ginfo) (with-access::svar/Ginfo o (mark) mark))
(define-inline (svar/Ginfo-mark-set! o::svar/Ginfo v::long) (with-access::svar/Ginfo o (mark) (set! mark v)))
(define-inline (svar/Ginfo-free-mark::long o::svar/Ginfo) (with-access::svar/Ginfo o (free-mark) free-mark))
(define-inline (svar/Ginfo-free-mark-set! o::svar/Ginfo v::long) (with-access::svar/Ginfo o (free-mark) (set! free-mark v)))
(define-inline (svar/Ginfo-kaptured?::bool o::svar/Ginfo) (with-access::svar/Ginfo o (kaptured?) kaptured?))
(define-inline (svar/Ginfo-kaptured?-set! o::svar/Ginfo v::bool) (with-access::svar/Ginfo o (kaptured?) (set! kaptured? v)))
(define-inline (svar/Ginfo-loc::obj o::svar/Ginfo) (with-access::svar/Ginfo o (loc) loc))
(define-inline (svar/Ginfo-loc-set! o::svar/Ginfo v::obj) (with-access::svar/Ginfo o (loc) (set! loc v)))

;; sexit/Ginfo
(define-inline (make-sexit/Ginfo::sexit/Ginfo handler1296::obj detached?1297::bool G?1298::bool kaptured?1299::bool free-mark1300::long mark1301::long) (instantiate::sexit/Ginfo (handler handler1296) (detached? detached?1297) (G? G?1298) (kaptured? kaptured?1299) (free-mark free-mark1300) (mark mark1301)))
(define-inline (sexit/Ginfo?::bool obj::obj) ((@ isa? __object) obj (@ sexit/Ginfo globalize_ginfo)))
(define (sexit/Ginfo-nil::sexit/Ginfo) (class-nil (@ sexit/Ginfo globalize_ginfo)))
(define-inline (sexit/Ginfo-mark::long o::sexit/Ginfo) (with-access::sexit/Ginfo o (mark) mark))
(define-inline (sexit/Ginfo-mark-set! o::sexit/Ginfo v::long) (with-access::sexit/Ginfo o (mark) (set! mark v)))
(define-inline (sexit/Ginfo-free-mark::long o::sexit/Ginfo) (with-access::sexit/Ginfo o (free-mark) free-mark))
(define-inline (sexit/Ginfo-free-mark-set! o::sexit/Ginfo v::long) (with-access::sexit/Ginfo o (free-mark) (set! free-mark v)))
(define-inline (sexit/Ginfo-kaptured?::bool o::sexit/Ginfo) (with-access::sexit/Ginfo o (kaptured?) kaptured?))
(define-inline (sexit/Ginfo-kaptured?-set! o::sexit/Ginfo v::bool) (with-access::sexit/Ginfo o (kaptured?) (set! kaptured? v)))
(define-inline (sexit/Ginfo-G?::bool o::sexit/Ginfo) (with-access::sexit/Ginfo o (G?) G?))
(define-inline (sexit/Ginfo-G?-set! o::sexit/Ginfo v::bool) (with-access::sexit/Ginfo o (G?) (set! G? v)))
(define-inline (sexit/Ginfo-detached?::bool o::sexit/Ginfo) (with-access::sexit/Ginfo o (detached?) detached?))
(define-inline (sexit/Ginfo-detached?-set! o::sexit/Ginfo v::bool) (with-access::sexit/Ginfo o (detached?) (set! detached? v)))
(define-inline (sexit/Ginfo-handler::obj o::sexit/Ginfo) (with-access::sexit/Ginfo o (handler) handler))
(define-inline (sexit/Ginfo-handler-set! o::sexit/Ginfo v::obj) (with-access::sexit/Ginfo o (handler) (set! handler v)))

;; local/Ginfo
(define-inline (make-local/Ginfo::local/Ginfo id1282::symbol name1283::obj type1284::type value1285::value access1286::obj fast-alpha1287::obj removable1288::obj occurrence1289::long occurrencew1290::long user?1291::bool key1292::long escape?1293::bool globalized?1294::bool) (instantiate::local/Ginfo (id id1282) (name name1283) (type type1284) (value value1285) (access access1286) (fast-alpha fast-alpha1287) (removable removable1288) (occurrence occurrence1289) (occurrencew occurrencew1290) (user? user?1291) (key key1292) (escape? escape?1293) (globalized? globalized?1294)))
(define-inline (local/Ginfo?::bool obj::obj) ((@ isa? __object) obj (@ local/Ginfo globalize_ginfo)))
(define (local/Ginfo-nil::local/Ginfo) (class-nil (@ local/Ginfo globalize_ginfo)))
(define-inline (local/Ginfo-globalized?::bool o::local/Ginfo) (with-access::local/Ginfo o (globalized?) globalized?))
(define-inline (local/Ginfo-globalized?-set! o::local/Ginfo v::bool) (with-access::local/Ginfo o (globalized?) (set! globalized? v)))
(define-inline (local/Ginfo-escape?::bool o::local/Ginfo) (with-access::local/Ginfo o (escape?) escape?))
(define-inline (local/Ginfo-escape?-set! o::local/Ginfo v::bool) (with-access::local/Ginfo o (escape?) (set! escape? v)))
(define-inline (local/Ginfo-key::long o::local/Ginfo) (with-access::local/Ginfo o (key) key))
(define-inline (local/Ginfo-key-set! o::local/Ginfo v::long) (with-access::local/Ginfo o (key) (set! key v)))
(define-inline (local/Ginfo-user?::bool o::local/Ginfo) (with-access::local/Ginfo o (user?) user?))
(define-inline (local/Ginfo-user?-set! o::local/Ginfo v::bool) (with-access::local/Ginfo o (user?) (set! user? v)))
(define-inline (local/Ginfo-occurrencew::long o::local/Ginfo) (with-access::local/Ginfo o (occurrencew) occurrencew))
(define-inline (local/Ginfo-occurrencew-set! o::local/Ginfo v::long) (with-access::local/Ginfo o (occurrencew) (set! occurrencew v)))
(define-inline (local/Ginfo-occurrence::long o::local/Ginfo) (with-access::local/Ginfo o (occurrence) occurrence))
(define-inline (local/Ginfo-occurrence-set! o::local/Ginfo v::long) (with-access::local/Ginfo o (occurrence) (set! occurrence v)))
(define-inline (local/Ginfo-removable::obj o::local/Ginfo) (with-access::local/Ginfo o (removable) removable))
(define-inline (local/Ginfo-removable-set! o::local/Ginfo v::obj) (with-access::local/Ginfo o (removable) (set! removable v)))
(define-inline (local/Ginfo-fast-alpha::obj o::local/Ginfo) (with-access::local/Ginfo o (fast-alpha) fast-alpha))
(define-inline (local/Ginfo-fast-alpha-set! o::local/Ginfo v::obj) (with-access::local/Ginfo o (fast-alpha) (set! fast-alpha v)))
(define-inline (local/Ginfo-access::obj o::local/Ginfo) (with-access::local/Ginfo o (access) access))
(define-inline (local/Ginfo-access-set! o::local/Ginfo v::obj) (with-access::local/Ginfo o (access) (set! access v)))
(define-inline (local/Ginfo-value::value o::local/Ginfo) (with-access::local/Ginfo o (value) value))
(define-inline (local/Ginfo-value-set! o::local/Ginfo v::value) (with-access::local/Ginfo o (value) (set! value v)))
(define-inline (local/Ginfo-type::type o::local/Ginfo) (with-access::local/Ginfo o (type) type))
(define-inline (local/Ginfo-type-set! o::local/Ginfo v::type) (with-access::local/Ginfo o (type) (set! type v)))
(define-inline (local/Ginfo-name::obj o::local/Ginfo) (with-access::local/Ginfo o (name) name))
(define-inline (local/Ginfo-name-set! o::local/Ginfo v::obj) (with-access::local/Ginfo o (name) (set! name v)))
(define-inline (local/Ginfo-id::symbol o::local/Ginfo) (with-access::local/Ginfo o (id) id))
(define-inline (local/Ginfo-id-set! o::local/Ginfo v::symbol) (with-access::local/Ginfo o (id) (set! id v)))

;; global/Ginfo
(define-inline (make-global/Ginfo::global/Ginfo id1260::symbol name1261::obj type1262::type value1263::value access1264::obj fast-alpha1265::obj removable1266::obj occurrence1267::long occurrencew1268::long user?1269::bool module1270::symbol import1271::obj evaluable?1272::bool eval?1273::bool library1274::obj pragma1275::obj src1276::obj jvm-type-name1277::bstring init1278::obj escape?1279::bool global-closure1280::obj) (instantiate::global/Ginfo (id id1260) (name name1261) (type type1262) (value value1263) (access access1264) (fast-alpha fast-alpha1265) (removable removable1266) (occurrence occurrence1267) (occurrencew occurrencew1268) (user? user?1269) (module module1270) (import import1271) (evaluable? evaluable?1272) (eval? eval?1273) (library library1274) (pragma pragma1275) (src src1276) (jvm-type-name jvm-type-name1277) (init init1278) (escape? escape?1279) (global-closure global-closure1280)))
(define-inline (global/Ginfo?::bool obj::obj) ((@ isa? __object) obj (@ global/Ginfo globalize_ginfo)))
(define (global/Ginfo-nil::global/Ginfo) (class-nil (@ global/Ginfo globalize_ginfo)))
(define-inline (global/Ginfo-global-closure::obj o::global/Ginfo) (with-access::global/Ginfo o (global-closure) global-closure))
(define-inline (global/Ginfo-global-closure-set! o::global/Ginfo v::obj) (with-access::global/Ginfo o (global-closure) (set! global-closure v)))
(define-inline (global/Ginfo-escape?::bool o::global/Ginfo) (with-access::global/Ginfo o (escape?) escape?))
(define-inline (global/Ginfo-escape?-set! o::global/Ginfo v::bool) (with-access::global/Ginfo o (escape?) (set! escape? v)))
(define-inline (global/Ginfo-init::obj o::global/Ginfo) (with-access::global/Ginfo o (init) init))
(define-inline (global/Ginfo-init-set! o::global/Ginfo v::obj) (with-access::global/Ginfo o (init) (set! init v)))
(define-inline (global/Ginfo-jvm-type-name::bstring o::global/Ginfo) (with-access::global/Ginfo o (jvm-type-name) jvm-type-name))
(define-inline (global/Ginfo-jvm-type-name-set! o::global/Ginfo v::bstring) (with-access::global/Ginfo o (jvm-type-name) (set! jvm-type-name v)))
(define-inline (global/Ginfo-src::obj o::global/Ginfo) (with-access::global/Ginfo o (src) src))
(define-inline (global/Ginfo-src-set! o::global/Ginfo v::obj) (with-access::global/Ginfo o (src) (set! src v)))
(define-inline (global/Ginfo-pragma::obj o::global/Ginfo) (with-access::global/Ginfo o (pragma) pragma))
(define-inline (global/Ginfo-pragma-set! o::global/Ginfo v::obj) (with-access::global/Ginfo o (pragma) (set! pragma v)))
(define-inline (global/Ginfo-library::obj o::global/Ginfo) (with-access::global/Ginfo o (library) library))
(define-inline (global/Ginfo-library-set! o::global/Ginfo v::obj) (with-access::global/Ginfo o (library) (set! library v)))
(define-inline (global/Ginfo-eval?::bool o::global/Ginfo) (with-access::global/Ginfo o (eval?) eval?))
(define-inline (global/Ginfo-eval?-set! o::global/Ginfo v::bool) (with-access::global/Ginfo o (eval?) (set! eval? v)))
(define-inline (global/Ginfo-evaluable?::bool o::global/Ginfo) (with-access::global/Ginfo o (evaluable?) evaluable?))
(define-inline (global/Ginfo-evaluable?-set! o::global/Ginfo v::bool) (with-access::global/Ginfo o (evaluable?) (set! evaluable? v)))
(define-inline (global/Ginfo-import::obj o::global/Ginfo) (with-access::global/Ginfo o (import) import))
(define-inline (global/Ginfo-import-set! o::global/Ginfo v::obj) (with-access::global/Ginfo o (import) (set! import v)))
(define-inline (global/Ginfo-module::symbol o::global/Ginfo) (with-access::global/Ginfo o (module) module))
(define-inline (global/Ginfo-module-set! o::global/Ginfo v::symbol) (with-access::global/Ginfo o (module) (set! module v)))
(define-inline (global/Ginfo-user?::bool o::global/Ginfo) (with-access::global/Ginfo o (user?) user?))
(define-inline (global/Ginfo-user?-set! o::global/Ginfo v::bool) (with-access::global/Ginfo o (user?) (set! user? v)))
(define-inline (global/Ginfo-occurrencew::long o::global/Ginfo) (with-access::global/Ginfo o (occurrencew) occurrencew))
(define-inline (global/Ginfo-occurrencew-set! o::global/Ginfo v::long) (with-access::global/Ginfo o (occurrencew) (set! occurrencew v)))
(define-inline (global/Ginfo-occurrence::long o::global/Ginfo) (with-access::global/Ginfo o (occurrence) occurrence))
(define-inline (global/Ginfo-occurrence-set! o::global/Ginfo v::long) (with-access::global/Ginfo o (occurrence) (set! occurrence v)))
(define-inline (global/Ginfo-removable::obj o::global/Ginfo) (with-access::global/Ginfo o (removable) removable))
(define-inline (global/Ginfo-removable-set! o::global/Ginfo v::obj) (with-access::global/Ginfo o (removable) (set! removable v)))
(define-inline (global/Ginfo-fast-alpha::obj o::global/Ginfo) (with-access::global/Ginfo o (fast-alpha) fast-alpha))
(define-inline (global/Ginfo-fast-alpha-set! o::global/Ginfo v::obj) (with-access::global/Ginfo o (fast-alpha) (set! fast-alpha v)))
(define-inline (global/Ginfo-access::obj o::global/Ginfo) (with-access::global/Ginfo o (access) access))
(define-inline (global/Ginfo-access-set! o::global/Ginfo v::obj) (with-access::global/Ginfo o (access) (set! access v)))
(define-inline (global/Ginfo-value::value o::global/Ginfo) (with-access::global/Ginfo o (value) value))
(define-inline (global/Ginfo-value-set! o::global/Ginfo v::value) (with-access::global/Ginfo o (value) (set! value v)))
(define-inline (global/Ginfo-type::type o::global/Ginfo) (with-access::global/Ginfo o (type) type))
(define-inline (global/Ginfo-type-set! o::global/Ginfo v::type) (with-access::global/Ginfo o (type) (set! type v)))
(define-inline (global/Ginfo-name::obj o::global/Ginfo) (with-access::global/Ginfo o (name) name))
(define-inline (global/Ginfo-name-set! o::global/Ginfo v::obj) (with-access::global/Ginfo o (name) (set! name v)))
(define-inline (global/Ginfo-id::symbol o::global/Ginfo) (with-access::global/Ginfo o (id) id))
(define-inline (global/Ginfo-id-set! o::global/Ginfo v::symbol) (with-access::global/Ginfo o (id) (set! id v)))
))
