;; ==========================================================
;; Class accessors
;; Bigloo (3.7b)
;; Inria -- Sophia Antipolis     Mon Nov 14 16:42:36 CET 2011 
;; (bigloo.new -classgen Inline/inline.scm)
;; ==========================================================

;; The directives
(directives

;; isfun
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-isfun::isfun arity1172::long side-effect1173::obj predicate-of1174::obj stack-allocator1175::obj top?1176::bool the-closure1177::obj effect1178::obj property1179::obj args1180::obj args-name1181::obj body1182::obj class1183::obj dsssl-keywords1184::obj loc1185::obj optionals1186::obj keys1187::obj the-closure-global1188::obj strength1189::symbol original-body1190::node recursive-calls1191::obj)
    (inline isfun?::bool ::obj)
    (isfun-nil::isfun)
    (inline isfun-recursive-calls::obj ::isfun)
    (inline isfun-recursive-calls-set! ::isfun ::obj)
    (inline isfun-original-body::node ::isfun)
    (inline isfun-strength::symbol ::isfun)
    (inline isfun-strength-set! ::isfun ::symbol)
    (inline isfun-the-closure-global::obj ::isfun)
    (inline isfun-the-closure-global-set! ::isfun ::obj)
    (inline isfun-keys::obj ::isfun)
    (inline isfun-optionals::obj ::isfun)
    (inline isfun-loc::obj ::isfun)
    (inline isfun-loc-set! ::isfun ::obj)
    (inline isfun-dsssl-keywords::obj ::isfun)
    (inline isfun-dsssl-keywords-set! ::isfun ::obj)
    (inline isfun-class::obj ::isfun)
    (inline isfun-class-set! ::isfun ::obj)
    (inline isfun-body::obj ::isfun)
    (inline isfun-body-set! ::isfun ::obj)
    (inline isfun-args-name::obj ::isfun)
    (inline isfun-args::obj ::isfun)
    (inline isfun-args-set! ::isfun ::obj)
    (inline isfun-property::obj ::isfun)
    (inline isfun-property-set! ::isfun ::obj)
    (inline isfun-effect::obj ::isfun)
    (inline isfun-effect-set! ::isfun ::obj)
    (inline isfun-the-closure::obj ::isfun)
    (inline isfun-the-closure-set! ::isfun ::obj)
    (inline isfun-top?::bool ::isfun)
    (inline isfun-top?-set! ::isfun ::bool)
    (inline isfun-stack-allocator::obj ::isfun)
    (inline isfun-stack-allocator-set! ::isfun ::obj)
    (inline isfun-predicate-of::obj ::isfun)
    (inline isfun-predicate-of-set! ::isfun ::obj)
    (inline isfun-side-effect::obj ::isfun)
    (inline isfun-side-effect-set! ::isfun ::obj)
    (inline isfun-arity::long ::isfun)))))

;; The definitions
(cond-expand (bigloo-class-sans
;; isfun
(define-inline (make-isfun::isfun arity1172::long side-effect1173::obj predicate-of1174::obj stack-allocator1175::obj top?1176::bool the-closure1177::obj effect1178::obj property1179::obj args1180::obj args-name1181::obj body1182::obj class1183::obj dsssl-keywords1184::obj loc1185::obj optionals1186::obj keys1187::obj the-closure-global1188::obj strength1189::symbol original-body1190::node recursive-calls1191::obj) (instantiate::isfun (arity arity1172) (side-effect side-effect1173) (predicate-of predicate-of1174) (stack-allocator stack-allocator1175) (top? top?1176) (the-closure the-closure1177) (effect effect1178) (property property1179) (args args1180) (args-name args-name1181) (body body1182) (class class1183) (dsssl-keywords dsssl-keywords1184) (loc loc1185) (optionals optionals1186) (keys keys1187) (the-closure-global the-closure-global1188) (strength strength1189) (original-body original-body1190) (recursive-calls recursive-calls1191)))
(define-inline (isfun?::bool obj::obj) ((@ isa? __object) obj (@ isfun inline_inline)))
(define (isfun-nil::isfun) (class-nil (@ isfun inline_inline)))
(define-inline (isfun-recursive-calls::obj o::isfun) (with-access::isfun o (recursive-calls) recursive-calls))
(define-inline (isfun-recursive-calls-set! o::isfun v::obj) (with-access::isfun o (recursive-calls) (set! recursive-calls v)))
(define-inline (isfun-original-body::node o::isfun) (with-access::isfun o (original-body) original-body))
(define-inline (isfun-original-body-set! o::isfun v::node) (with-access::isfun o (original-body) (set! original-body v)))
(define-inline (isfun-strength::symbol o::isfun) (with-access::isfun o (strength) strength))
(define-inline (isfun-strength-set! o::isfun v::symbol) (with-access::isfun o (strength) (set! strength v)))
(define-inline (isfun-the-closure-global::obj o::isfun) (with-access::isfun o (the-closure-global) the-closure-global))
(define-inline (isfun-the-closure-global-set! o::isfun v::obj) (with-access::isfun o (the-closure-global) (set! the-closure-global v)))
(define-inline (isfun-keys::obj o::isfun) (with-access::isfun o (keys) keys))
(define-inline (isfun-keys-set! o::isfun v::obj) (with-access::isfun o (keys) (set! keys v)))
(define-inline (isfun-optionals::obj o::isfun) (with-access::isfun o (optionals) optionals))
(define-inline (isfun-optionals-set! o::isfun v::obj) (with-access::isfun o (optionals) (set! optionals v)))
(define-inline (isfun-loc::obj o::isfun) (with-access::isfun o (loc) loc))
(define-inline (isfun-loc-set! o::isfun v::obj) (with-access::isfun o (loc) (set! loc v)))
(define-inline (isfun-dsssl-keywords::obj o::isfun) (with-access::isfun o (dsssl-keywords) dsssl-keywords))
(define-inline (isfun-dsssl-keywords-set! o::isfun v::obj) (with-access::isfun o (dsssl-keywords) (set! dsssl-keywords v)))
(define-inline (isfun-class::obj o::isfun) (with-access::isfun o (class) class))
(define-inline (isfun-class-set! o::isfun v::obj) (with-access::isfun o (class) (set! class v)))
(define-inline (isfun-body::obj o::isfun) (with-access::isfun o (body) body))
(define-inline (isfun-body-set! o::isfun v::obj) (with-access::isfun o (body) (set! body v)))
(define-inline (isfun-args-name::obj o::isfun) (with-access::isfun o (args-name) args-name))
(define-inline (isfun-args-name-set! o::isfun v::obj) (with-access::isfun o (args-name) (set! args-name v)))
(define-inline (isfun-args::obj o::isfun) (with-access::isfun o (args) args))
(define-inline (isfun-args-set! o::isfun v::obj) (with-access::isfun o (args) (set! args v)))
(define-inline (isfun-property::obj o::isfun) (with-access::isfun o (property) property))
(define-inline (isfun-property-set! o::isfun v::obj) (with-access::isfun o (property) (set! property v)))
(define-inline (isfun-effect::obj o::isfun) (with-access::isfun o (effect) effect))
(define-inline (isfun-effect-set! o::isfun v::obj) (with-access::isfun o (effect) (set! effect v)))
(define-inline (isfun-the-closure::obj o::isfun) (with-access::isfun o (the-closure) the-closure))
(define-inline (isfun-the-closure-set! o::isfun v::obj) (with-access::isfun o (the-closure) (set! the-closure v)))
(define-inline (isfun-top?::bool o::isfun) (with-access::isfun o (top?) top?))
(define-inline (isfun-top?-set! o::isfun v::bool) (with-access::isfun o (top?) (set! top? v)))
(define-inline (isfun-stack-allocator::obj o::isfun) (with-access::isfun o (stack-allocator) stack-allocator))
(define-inline (isfun-stack-allocator-set! o::isfun v::obj) (with-access::isfun o (stack-allocator) (set! stack-allocator v)))
(define-inline (isfun-predicate-of::obj o::isfun) (with-access::isfun o (predicate-of) predicate-of))
(define-inline (isfun-predicate-of-set! o::isfun v::obj) (with-access::isfun o (predicate-of) (set! predicate-of v)))
(define-inline (isfun-side-effect::obj o::isfun) (with-access::isfun o (side-effect) side-effect))
(define-inline (isfun-side-effect-set! o::isfun v::obj) (with-access::isfun o (side-effect) (set! side-effect v)))
(define-inline (isfun-arity::long o::isfun) (with-access::isfun o (arity) arity))
(define-inline (isfun-arity-set! o::isfun v::long) (with-access::isfun o (arity) (set! arity v)))
))
