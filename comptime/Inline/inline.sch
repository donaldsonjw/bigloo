;; ==========================================================
;; Class accessors
;; Bigloo (4.2c)
;; Inria -- Sophia Antipolis     Fri Nov 6 10:55:25 CET 2015 
;; (bigloo.new -classgen Inline/inline.scm)
;; ==========================================================

;; The directives
(directives

;; isfun
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-isfun::isfun arity1124::long side-effect1125::obj predicate-of1126::obj stack-allocator1127::obj top?1128::bool the-closure1129::obj effect1130::obj failsafe1131::obj property1132::obj args1133::obj args-name1134::obj body1135::obj class1136::obj dsssl-keywords1137::obj loc1138::obj optionals1139::obj keys1140::obj the-closure-global1141::obj strength1142::symbol original-body1143::node recursive-calls1144::obj)
    (inline isfun?::bool ::obj)
    (isfun-nil::isfun)
    (inline isfun-recursive-calls::obj ::isfun)
    (inline isfun-recursive-calls-set! ::isfun ::obj)
    (inline isfun-original-body::node ::isfun)
    (inline isfun-strength::symbol ::isfun)
    (inline isfun-strength-set! ::isfun ::symbol)
    (inline isfun-the-closure-global::obj ::isfun)
    (inline isfun-the-closure-global-set! ::isfun ::obj)
    (inline isfun-keys::obj ::isfun)
    (inline isfun-optionals::obj ::isfun)
    (inline isfun-loc::obj ::isfun)
    (inline isfun-loc-set! ::isfun ::obj)
    (inline isfun-dsssl-keywords::obj ::isfun)
    (inline isfun-dsssl-keywords-set! ::isfun ::obj)
    (inline isfun-class::obj ::isfun)
    (inline isfun-class-set! ::isfun ::obj)
    (inline isfun-body::obj ::isfun)
    (inline isfun-body-set! ::isfun ::obj)
    (inline isfun-args-name::obj ::isfun)
    (inline isfun-args::obj ::isfun)
    (inline isfun-args-set! ::isfun ::obj)
    (inline isfun-property::obj ::isfun)
    (inline isfun-property-set! ::isfun ::obj)
    (inline isfun-failsafe::obj ::isfun)
    (inline isfun-failsafe-set! ::isfun ::obj)
    (inline isfun-effect::obj ::isfun)
    (inline isfun-effect-set! ::isfun ::obj)
    (inline isfun-the-closure::obj ::isfun)
    (inline isfun-the-closure-set! ::isfun ::obj)
    (inline isfun-top?::bool ::isfun)
    (inline isfun-top?-set! ::isfun ::bool)
    (inline isfun-stack-allocator::obj ::isfun)
    (inline isfun-stack-allocator-set! ::isfun ::obj)
    (inline isfun-predicate-of::obj ::isfun)
    (inline isfun-predicate-of-set! ::isfun ::obj)
    (inline isfun-side-effect::obj ::isfun)
    (inline isfun-side-effect-set! ::isfun ::obj)
    (inline isfun-arity::long ::isfun)))))

;; The definitions
(cond-expand (bigloo-class-sans
;; isfun
(define-inline (make-isfun::isfun arity1124::long side-effect1125::obj predicate-of1126::obj stack-allocator1127::obj top?1128::bool the-closure1129::obj effect1130::obj failsafe1131::obj property1132::obj args1133::obj args-name1134::obj body1135::obj class1136::obj dsssl-keywords1137::obj loc1138::obj optionals1139::obj keys1140::obj the-closure-global1141::obj strength1142::symbol original-body1143::node recursive-calls1144::obj) (instantiate::isfun (arity arity1124) (side-effect side-effect1125) (predicate-of predicate-of1126) (stack-allocator stack-allocator1127) (top? top?1128) (the-closure the-closure1129) (effect effect1130) (failsafe failsafe1131) (property property1132) (args args1133) (args-name args-name1134) (body body1135) (class class1136) (dsssl-keywords dsssl-keywords1137) (loc loc1138) (optionals optionals1139) (keys keys1140) (the-closure-global the-closure-global1141) (strength strength1142) (original-body original-body1143) (recursive-calls recursive-calls1144)))
(define-inline (isfun?::bool obj::obj) ((@ isa? __object) obj (@ isfun inline_inline)))
(define (isfun-nil::isfun) (class-nil (@ isfun inline_inline)))
(define-inline (isfun-recursive-calls::obj o::isfun) (-> |#!bigloo_wallow| o recursive-calls))
(define-inline (isfun-recursive-calls-set! o::isfun v::obj) (set! (-> |#!bigloo_wallow| o recursive-calls) v))
(define-inline (isfun-original-body::node o::isfun) (-> |#!bigloo_wallow| o original-body))
(define-inline (isfun-original-body-set! o::isfun v::node) (set! (-> |#!bigloo_wallow| o original-body) v))
(define-inline (isfun-strength::symbol o::isfun) (-> |#!bigloo_wallow| o strength))
(define-inline (isfun-strength-set! o::isfun v::symbol) (set! (-> |#!bigloo_wallow| o strength) v))
(define-inline (isfun-the-closure-global::obj o::isfun) (-> |#!bigloo_wallow| o the-closure-global))
(define-inline (isfun-the-closure-global-set! o::isfun v::obj) (set! (-> |#!bigloo_wallow| o the-closure-global) v))
(define-inline (isfun-keys::obj o::isfun) (-> |#!bigloo_wallow| o keys))
(define-inline (isfun-keys-set! o::isfun v::obj) (set! (-> |#!bigloo_wallow| o keys) v))
(define-inline (isfun-optionals::obj o::isfun) (-> |#!bigloo_wallow| o optionals))
(define-inline (isfun-optionals-set! o::isfun v::obj) (set! (-> |#!bigloo_wallow| o optionals) v))
(define-inline (isfun-loc::obj o::isfun) (-> |#!bigloo_wallow| o loc))
(define-inline (isfun-loc-set! o::isfun v::obj) (set! (-> |#!bigloo_wallow| o loc) v))
(define-inline (isfun-dsssl-keywords::obj o::isfun) (-> |#!bigloo_wallow| o dsssl-keywords))
(define-inline (isfun-dsssl-keywords-set! o::isfun v::obj) (set! (-> |#!bigloo_wallow| o dsssl-keywords) v))
(define-inline (isfun-class::obj o::isfun) (-> |#!bigloo_wallow| o class))
(define-inline (isfun-class-set! o::isfun v::obj) (set! (-> |#!bigloo_wallow| o class) v))
(define-inline (isfun-body::obj o::isfun) (-> |#!bigloo_wallow| o body))
(define-inline (isfun-body-set! o::isfun v::obj) (set! (-> |#!bigloo_wallow| o body) v))
(define-inline (isfun-args-name::obj o::isfun) (-> |#!bigloo_wallow| o args-name))
(define-inline (isfun-args-name-set! o::isfun v::obj) (set! (-> |#!bigloo_wallow| o args-name) v))
(define-inline (isfun-args::obj o::isfun) (-> |#!bigloo_wallow| o args))
(define-inline (isfun-args-set! o::isfun v::obj) (set! (-> |#!bigloo_wallow| o args) v))
(define-inline (isfun-property::obj o::isfun) (-> |#!bigloo_wallow| o property))
(define-inline (isfun-property-set! o::isfun v::obj) (set! (-> |#!bigloo_wallow| o property) v))
(define-inline (isfun-failsafe::obj o::isfun) (-> |#!bigloo_wallow| o failsafe))
(define-inline (isfun-failsafe-set! o::isfun v::obj) (set! (-> |#!bigloo_wallow| o failsafe) v))
(define-inline (isfun-effect::obj o::isfun) (-> |#!bigloo_wallow| o effect))
(define-inline (isfun-effect-set! o::isfun v::obj) (set! (-> |#!bigloo_wallow| o effect) v))
(define-inline (isfun-the-closure::obj o::isfun) (-> |#!bigloo_wallow| o the-closure))
(define-inline (isfun-the-closure-set! o::isfun v::obj) (set! (-> |#!bigloo_wallow| o the-closure) v))
(define-inline (isfun-top?::bool o::isfun) (-> |#!bigloo_wallow| o top?))
(define-inline (isfun-top?-set! o::isfun v::bool) (set! (-> |#!bigloo_wallow| o top?) v))
(define-inline (isfun-stack-allocator::obj o::isfun) (-> |#!bigloo_wallow| o stack-allocator))
(define-inline (isfun-stack-allocator-set! o::isfun v::obj) (set! (-> |#!bigloo_wallow| o stack-allocator) v))
(define-inline (isfun-predicate-of::obj o::isfun) (-> |#!bigloo_wallow| o predicate-of))
(define-inline (isfun-predicate-of-set! o::isfun v::obj) (set! (-> |#!bigloo_wallow| o predicate-of) v))
(define-inline (isfun-side-effect::obj o::isfun) (-> |#!bigloo_wallow| o side-effect))
(define-inline (isfun-side-effect-set! o::isfun v::obj) (set! (-> |#!bigloo_wallow| o side-effect) v))
(define-inline (isfun-arity::long o::isfun) (-> |#!bigloo_wallow| o arity))
(define-inline (isfun-arity-set! o::isfun v::long) (set! (-> |#!bigloo_wallow| o arity) v))
))
