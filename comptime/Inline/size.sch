;; ==========================================================
;; Class accessors
;; Bigloo (4.2c)
;; Inria -- Sophia Antipolis     Fri Nov 6 10:55:25 CET 2015 
;; (bigloo.new -classgen Inline/size.scm)
;; ==========================================================

;; The directives
(directives

;; sized-sequence
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (static
    (inline make-sized-sequence::sized-sequence loc1198::obj type1199::type side-effect1200::obj key1201::obj nodes1202::obj unsafe1203::bool size1204::long)
    (inline sized-sequence?::bool ::obj)
    (sized-sequence-nil::sized-sequence)
    (inline sized-sequence-size::long ::sized-sequence)
    (inline sized-sequence-unsafe::bool ::sized-sequence)
    (inline sized-sequence-nodes::obj ::sized-sequence)
    (inline sized-sequence-key::obj ::sized-sequence)
    (inline sized-sequence-key-set! ::sized-sequence ::obj)
    (inline sized-sequence-side-effect::obj ::sized-sequence)
    (inline sized-sequence-side-effect-set! ::sized-sequence ::obj)
    (inline sized-sequence-type::type ::sized-sequence)
    (inline sized-sequence-type-set! ::sized-sequence ::type)
    (inline sized-sequence-loc::obj ::sized-sequence))))

;; sized-sync
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (static
    (inline make-sized-sync::sized-sync loc1190::obj type1191::type mutex1192::node prelock1193::node body1194::node size1195::long)
    (inline sized-sync?::bool ::obj)
    (sized-sync-nil::sized-sync)
    (inline sized-sync-size::long ::sized-sync)
    (inline sized-sync-body::node ::sized-sync)
    (inline sized-sync-body-set! ::sized-sync ::node)
    (inline sized-sync-prelock::node ::sized-sync)
    (inline sized-sync-prelock-set! ::sized-sync ::node)
    (inline sized-sync-mutex::node ::sized-sync)
    (inline sized-sync-mutex-set! ::sized-sync ::node)
    (inline sized-sync-type::type ::sized-sync)
    (inline sized-sync-type-set! ::sized-sync ::type)
    (inline sized-sync-loc::obj ::sized-sync))))

;; sized-select
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (static
    (inline make-sized-select::sized-select loc1180::obj type1181::type side-effect1182::obj key1183::obj test1184::node clauses1185::obj item-type1186::type size1187::long)
    (inline sized-select?::bool ::obj)
    (sized-select-nil::sized-select)
    (inline sized-select-size::long ::sized-select)
    (inline sized-select-item-type::type ::sized-select)
    (inline sized-select-clauses::obj ::sized-select)
    (inline sized-select-test::node ::sized-select)
    (inline sized-select-test-set! ::sized-select ::node)
    (inline sized-select-key::obj ::sized-select)
    (inline sized-select-key-set! ::sized-select ::obj)
    (inline sized-select-side-effect::obj ::sized-select)
    (inline sized-select-side-effect-set! ::sized-select ::obj)
    (inline sized-select-type::type ::sized-select)
    (inline sized-select-type-set! ::sized-select ::type)
    (inline sized-select-loc::obj ::sized-select))))

;; sized-let-fun
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (static
    (inline make-sized-let-fun::sized-let-fun loc1172::obj type1173::type side-effect1174::obj key1175::obj locals1176::obj body1177::node size1178::long)
    (inline sized-let-fun?::bool ::obj)
    (sized-let-fun-nil::sized-let-fun)
    (inline sized-let-fun-size::long ::sized-let-fun)
    (inline sized-let-fun-body::node ::sized-let-fun)
    (inline sized-let-fun-body-set! ::sized-let-fun ::node)
    (inline sized-let-fun-locals::obj ::sized-let-fun)
    (inline sized-let-fun-locals-set! ::sized-let-fun ::obj)
    (inline sized-let-fun-key::obj ::sized-let-fun)
    (inline sized-let-fun-key-set! ::sized-let-fun ::obj)
    (inline sized-let-fun-side-effect::obj ::sized-let-fun)
    (inline sized-let-fun-side-effect-set! ::sized-let-fun ::obj)
    (inline sized-let-fun-type::type ::sized-let-fun)
    (inline sized-let-fun-type-set! ::sized-let-fun ::type)
    (inline sized-let-fun-loc::obj ::sized-let-fun))))

;; sized-let-var
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (static
    (inline make-sized-let-var::sized-let-var loc1163::obj type1164::type side-effect1165::obj key1166::obj bindings1167::obj body1168::node removable?1169::bool size1170::long)
    (inline sized-let-var?::bool ::obj)
    (sized-let-var-nil::sized-let-var)
    (inline sized-let-var-size::long ::sized-let-var)
    (inline sized-let-var-removable?::bool ::sized-let-var)
    (inline sized-let-var-removable?-set! ::sized-let-var ::bool)
    (inline sized-let-var-body::node ::sized-let-var)
    (inline sized-let-var-body-set! ::sized-let-var ::node)
    (inline sized-let-var-bindings::obj ::sized-let-var)
    (inline sized-let-var-bindings-set! ::sized-let-var ::obj)
    (inline sized-let-var-key::obj ::sized-let-var)
    (inline sized-let-var-key-set! ::sized-let-var ::obj)
    (inline sized-let-var-side-effect::obj ::sized-let-var)
    (inline sized-let-var-side-effect-set! ::sized-let-var ::obj)
    (inline sized-let-var-type::type ::sized-let-var)
    (inline sized-let-var-type-set! ::sized-let-var ::type)
    (inline sized-let-var-loc::obj ::sized-let-var)))))

;; The definitions
(cond-expand (bigloo-class-sans
;; sized-sequence
(define-inline (make-sized-sequence::sized-sequence loc1198::obj type1199::type side-effect1200::obj key1201::obj nodes1202::obj unsafe1203::bool size1204::long) (instantiate::sized-sequence (loc loc1198) (type type1199) (side-effect side-effect1200) (key key1201) (nodes nodes1202) (unsafe unsafe1203) (size size1204)))
(define-inline (sized-sequence?::bool obj::obj) ((@ isa? __object) obj (@ sized-sequence inline_size)))
(define (sized-sequence-nil::sized-sequence) (class-nil (@ sized-sequence inline_size)))
(define-inline (sized-sequence-size::long o::sized-sequence) (-> |#!bigloo_wallow| o size))
(define-inline (sized-sequence-size-set! o::sized-sequence v::long) (set! (-> |#!bigloo_wallow| o size) v))
(define-inline (sized-sequence-unsafe::bool o::sized-sequence) (-> |#!bigloo_wallow| o unsafe))
(define-inline (sized-sequence-unsafe-set! o::sized-sequence v::bool) (set! (-> |#!bigloo_wallow| o unsafe) v))
(define-inline (sized-sequence-nodes::obj o::sized-sequence) (-> |#!bigloo_wallow| o nodes))
(define-inline (sized-sequence-nodes-set! o::sized-sequence v::obj) (set! (-> |#!bigloo_wallow| o nodes) v))
(define-inline (sized-sequence-key::obj o::sized-sequence) (-> |#!bigloo_wallow| o key))
(define-inline (sized-sequence-key-set! o::sized-sequence v::obj) (set! (-> |#!bigloo_wallow| o key) v))
(define-inline (sized-sequence-side-effect::obj o::sized-sequence) (-> |#!bigloo_wallow| o side-effect))
(define-inline (sized-sequence-side-effect-set! o::sized-sequence v::obj) (set! (-> |#!bigloo_wallow| o side-effect) v))
(define-inline (sized-sequence-type::type o::sized-sequence) (-> |#!bigloo_wallow| o type))
(define-inline (sized-sequence-type-set! o::sized-sequence v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (sized-sequence-loc::obj o::sized-sequence) (-> |#!bigloo_wallow| o loc))
(define-inline (sized-sequence-loc-set! o::sized-sequence v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; sized-sync
(define-inline (make-sized-sync::sized-sync loc1190::obj type1191::type mutex1192::node prelock1193::node body1194::node size1195::long) (instantiate::sized-sync (loc loc1190) (type type1191) (mutex mutex1192) (prelock prelock1193) (body body1194) (size size1195)))
(define-inline (sized-sync?::bool obj::obj) ((@ isa? __object) obj (@ sized-sync inline_size)))
(define (sized-sync-nil::sized-sync) (class-nil (@ sized-sync inline_size)))
(define-inline (sized-sync-size::long o::sized-sync) (-> |#!bigloo_wallow| o size))
(define-inline (sized-sync-size-set! o::sized-sync v::long) (set! (-> |#!bigloo_wallow| o size) v))
(define-inline (sized-sync-body::node o::sized-sync) (-> |#!bigloo_wallow| o body))
(define-inline (sized-sync-body-set! o::sized-sync v::node) (set! (-> |#!bigloo_wallow| o body) v))
(define-inline (sized-sync-prelock::node o::sized-sync) (-> |#!bigloo_wallow| o prelock))
(define-inline (sized-sync-prelock-set! o::sized-sync v::node) (set! (-> |#!bigloo_wallow| o prelock) v))
(define-inline (sized-sync-mutex::node o::sized-sync) (-> |#!bigloo_wallow| o mutex))
(define-inline (sized-sync-mutex-set! o::sized-sync v::node) (set! (-> |#!bigloo_wallow| o mutex) v))
(define-inline (sized-sync-type::type o::sized-sync) (-> |#!bigloo_wallow| o type))
(define-inline (sized-sync-type-set! o::sized-sync v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (sized-sync-loc::obj o::sized-sync) (-> |#!bigloo_wallow| o loc))
(define-inline (sized-sync-loc-set! o::sized-sync v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; sized-select
(define-inline (make-sized-select::sized-select loc1180::obj type1181::type side-effect1182::obj key1183::obj test1184::node clauses1185::obj item-type1186::type size1187::long) (instantiate::sized-select (loc loc1180) (type type1181) (side-effect side-effect1182) (key key1183) (test test1184) (clauses clauses1185) (item-type item-type1186) (size size1187)))
(define-inline (sized-select?::bool obj::obj) ((@ isa? __object) obj (@ sized-select inline_size)))
(define (sized-select-nil::sized-select) (class-nil (@ sized-select inline_size)))
(define-inline (sized-select-size::long o::sized-select) (-> |#!bigloo_wallow| o size))
(define-inline (sized-select-size-set! o::sized-select v::long) (set! (-> |#!bigloo_wallow| o size) v))
(define-inline (sized-select-item-type::type o::sized-select) (-> |#!bigloo_wallow| o item-type))
(define-inline (sized-select-item-type-set! o::sized-select v::type) (set! (-> |#!bigloo_wallow| o item-type) v))
(define-inline (sized-select-clauses::obj o::sized-select) (-> |#!bigloo_wallow| o clauses))
(define-inline (sized-select-clauses-set! o::sized-select v::obj) (set! (-> |#!bigloo_wallow| o clauses) v))
(define-inline (sized-select-test::node o::sized-select) (-> |#!bigloo_wallow| o test))
(define-inline (sized-select-test-set! o::sized-select v::node) (set! (-> |#!bigloo_wallow| o test) v))
(define-inline (sized-select-key::obj o::sized-select) (-> |#!bigloo_wallow| o key))
(define-inline (sized-select-key-set! o::sized-select v::obj) (set! (-> |#!bigloo_wallow| o key) v))
(define-inline (sized-select-side-effect::obj o::sized-select) (-> |#!bigloo_wallow| o side-effect))
(define-inline (sized-select-side-effect-set! o::sized-select v::obj) (set! (-> |#!bigloo_wallow| o side-effect) v))
(define-inline (sized-select-type::type o::sized-select) (-> |#!bigloo_wallow| o type))
(define-inline (sized-select-type-set! o::sized-select v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (sized-select-loc::obj o::sized-select) (-> |#!bigloo_wallow| o loc))
(define-inline (sized-select-loc-set! o::sized-select v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; sized-let-fun
(define-inline (make-sized-let-fun::sized-let-fun loc1172::obj type1173::type side-effect1174::obj key1175::obj locals1176::obj body1177::node size1178::long) (instantiate::sized-let-fun (loc loc1172) (type type1173) (side-effect side-effect1174) (key key1175) (locals locals1176) (body body1177) (size size1178)))
(define-inline (sized-let-fun?::bool obj::obj) ((@ isa? __object) obj (@ sized-let-fun inline_size)))
(define (sized-let-fun-nil::sized-let-fun) (class-nil (@ sized-let-fun inline_size)))
(define-inline (sized-let-fun-size::long o::sized-let-fun) (-> |#!bigloo_wallow| o size))
(define-inline (sized-let-fun-size-set! o::sized-let-fun v::long) (set! (-> |#!bigloo_wallow| o size) v))
(define-inline (sized-let-fun-body::node o::sized-let-fun) (-> |#!bigloo_wallow| o body))
(define-inline (sized-let-fun-body-set! o::sized-let-fun v::node) (set! (-> |#!bigloo_wallow| o body) v))
(define-inline (sized-let-fun-locals::obj o::sized-let-fun) (-> |#!bigloo_wallow| o locals))
(define-inline (sized-let-fun-locals-set! o::sized-let-fun v::obj) (set! (-> |#!bigloo_wallow| o locals) v))
(define-inline (sized-let-fun-key::obj o::sized-let-fun) (-> |#!bigloo_wallow| o key))
(define-inline (sized-let-fun-key-set! o::sized-let-fun v::obj) (set! (-> |#!bigloo_wallow| o key) v))
(define-inline (sized-let-fun-side-effect::obj o::sized-let-fun) (-> |#!bigloo_wallow| o side-effect))
(define-inline (sized-let-fun-side-effect-set! o::sized-let-fun v::obj) (set! (-> |#!bigloo_wallow| o side-effect) v))
(define-inline (sized-let-fun-type::type o::sized-let-fun) (-> |#!bigloo_wallow| o type))
(define-inline (sized-let-fun-type-set! o::sized-let-fun v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (sized-let-fun-loc::obj o::sized-let-fun) (-> |#!bigloo_wallow| o loc))
(define-inline (sized-let-fun-loc-set! o::sized-let-fun v::obj) (set! (-> |#!bigloo_wallow| o loc) v))

;; sized-let-var
(define-inline (make-sized-let-var::sized-let-var loc1163::obj type1164::type side-effect1165::obj key1166::obj bindings1167::obj body1168::node removable?1169::bool size1170::long) (instantiate::sized-let-var (loc loc1163) (type type1164) (side-effect side-effect1165) (key key1166) (bindings bindings1167) (body body1168) (removable? removable?1169) (size size1170)))
(define-inline (sized-let-var?::bool obj::obj) ((@ isa? __object) obj (@ sized-let-var inline_size)))
(define (sized-let-var-nil::sized-let-var) (class-nil (@ sized-let-var inline_size)))
(define-inline (sized-let-var-size::long o::sized-let-var) (-> |#!bigloo_wallow| o size))
(define-inline (sized-let-var-size-set! o::sized-let-var v::long) (set! (-> |#!bigloo_wallow| o size) v))
(define-inline (sized-let-var-removable?::bool o::sized-let-var) (-> |#!bigloo_wallow| o removable?))
(define-inline (sized-let-var-removable?-set! o::sized-let-var v::bool) (set! (-> |#!bigloo_wallow| o removable?) v))
(define-inline (sized-let-var-body::node o::sized-let-var) (-> |#!bigloo_wallow| o body))
(define-inline (sized-let-var-body-set! o::sized-let-var v::node) (set! (-> |#!bigloo_wallow| o body) v))
(define-inline (sized-let-var-bindings::obj o::sized-let-var) (-> |#!bigloo_wallow| o bindings))
(define-inline (sized-let-var-bindings-set! o::sized-let-var v::obj) (set! (-> |#!bigloo_wallow| o bindings) v))
(define-inline (sized-let-var-key::obj o::sized-let-var) (-> |#!bigloo_wallow| o key))
(define-inline (sized-let-var-key-set! o::sized-let-var v::obj) (set! (-> |#!bigloo_wallow| o key) v))
(define-inline (sized-let-var-side-effect::obj o::sized-let-var) (-> |#!bigloo_wallow| o side-effect))
(define-inline (sized-let-var-side-effect-set! o::sized-let-var v::obj) (set! (-> |#!bigloo_wallow| o side-effect) v))
(define-inline (sized-let-var-type::type o::sized-let-var) (-> |#!bigloo_wallow| o type))
(define-inline (sized-let-var-type-set! o::sized-let-var v::type) (set! (-> |#!bigloo_wallow| o type) v))
(define-inline (sized-let-var-loc::obj o::sized-let-var) (-> |#!bigloo_wallow| o loc))
(define-inline (sized-let-var-loc-set! o::sized-let-var v::obj) (set! (-> |#!bigloo_wallow| o loc) v))
))
