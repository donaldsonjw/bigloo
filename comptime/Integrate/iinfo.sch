;; ==========================================================
;; Class accessors
;; Bigloo (3.7b)
;; Inria -- Sophia Antipolis     Mon Nov 14 16:42:36 CET 2011 
;; (bigloo.new -classgen Integrate/iinfo.scm)
;; ==========================================================

;; The directives
(directives

;; svar/Iinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-svar/Iinfo::svar/Iinfo loc1258::obj f-mark1259::obj u-mark1260::obj kaptured?1261::bool celled?1262::bool)
    (inline svar/Iinfo?::bool ::obj)
    (svar/Iinfo-nil::svar/Iinfo)
    (inline svar/Iinfo-celled?::bool ::svar/Iinfo)
    (inline svar/Iinfo-celled?-set! ::svar/Iinfo ::bool)
    (inline svar/Iinfo-kaptured?::bool ::svar/Iinfo)
    (inline svar/Iinfo-kaptured?-set! ::svar/Iinfo ::bool)
    (inline svar/Iinfo-u-mark::obj ::svar/Iinfo)
    (inline svar/Iinfo-u-mark-set! ::svar/Iinfo ::obj)
    (inline svar/Iinfo-f-mark::obj ::svar/Iinfo)
    (inline svar/Iinfo-f-mark-set! ::svar/Iinfo ::obj)
    (inline svar/Iinfo-loc::obj ::svar/Iinfo)
    (inline svar/Iinfo-loc-set! ::svar/Iinfo ::obj))))

;; sexit/Iinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-sexit/Iinfo::sexit/Iinfo handler1251::obj detached?1252::bool f-mark1253::obj u-mark1254::obj kaptured?1255::bool celled?1256::bool)
    (inline sexit/Iinfo?::bool ::obj)
    (sexit/Iinfo-nil::sexit/Iinfo)
    (inline sexit/Iinfo-celled?::bool ::sexit/Iinfo)
    (inline sexit/Iinfo-celled?-set! ::sexit/Iinfo ::bool)
    (inline sexit/Iinfo-kaptured?::bool ::sexit/Iinfo)
    (inline sexit/Iinfo-kaptured?-set! ::sexit/Iinfo ::bool)
    (inline sexit/Iinfo-u-mark::obj ::sexit/Iinfo)
    (inline sexit/Iinfo-u-mark-set! ::sexit/Iinfo ::obj)
    (inline sexit/Iinfo-f-mark::obj ::sexit/Iinfo)
    (inline sexit/Iinfo-f-mark-set! ::sexit/Iinfo ::obj)
    (inline sexit/Iinfo-detached?::bool ::sexit/Iinfo)
    (inline sexit/Iinfo-detached?-set! ::sexit/Iinfo ::bool)
    (inline sexit/Iinfo-handler::obj ::sexit/Iinfo)
    (inline sexit/Iinfo-handler-set! ::sexit/Iinfo ::obj))))

;; sfun/Iinfo
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-sfun/Iinfo::sfun/Iinfo arity1213::long side-effect1214::obj predicate-of1215::obj stack-allocator1216::obj top?1217::bool the-closure1218::obj effect1219::obj property1220::obj args1221::obj args-name1222::obj body1223::obj class1224::obj dsssl-keywords1225::obj loc1226::obj optionals1227::obj keys1228::obj the-closure-global1229::obj strength1230::symbol owner1231::obj free1232::obj bound1233::obj cfrom1234::obj cto1235::obj K1236::obj K*1237::obj U1238::obj Cn1239::obj Ct1240::obj kont1241::obj G?1242::bool forceG?1243::bool L1244::obj Led1245::obj istamp1246::obj global1247::obj kaptured1248::obj tail-coercion1249::obj)
    (inline sfun/Iinfo?::bool ::obj)
    (sfun/Iinfo-nil::sfun/Iinfo)
    (inline sfun/Iinfo-tail-coercion::obj ::sfun/Iinfo)
    (inline sfun/Iinfo-tail-coercion-set! ::sfun/Iinfo ::obj)
    (inline sfun/Iinfo-kaptured::obj ::sfun/Iinfo)
    (inline sfun/Iinfo-kaptured-set! ::sfun/Iinfo ::obj)
    (inline sfun/Iinfo-global::obj ::sfun/Iinfo)
    (inline sfun/Iinfo-global-set! ::sfun/Iinfo ::obj)
    (inline sfun/Iinfo-istamp::obj ::sfun/Iinfo)
    (inline sfun/Iinfo-istamp-set! ::sfun/Iinfo ::obj)
    (inline sfun/Iinfo-Led::obj ::sfun/Iinfo)
    (inline sfun/Iinfo-Led-set! ::sfun/Iinfo ::obj)
    (inline sfun/Iinfo-L::obj ::sfun/Iinfo)
    (inline sfun/Iinfo-L-set! ::sfun/Iinfo ::obj)
    (inline sfun/Iinfo-forceG?::bool ::sfun/Iinfo)
    (inline sfun/Iinfo-forceG?-set! ::sfun/Iinfo ::bool)
    (inline sfun/Iinfo-G?::bool ::sfun/Iinfo)
    (inline sfun/Iinfo-G?-set! ::sfun/Iinfo ::bool)
    (inline sfun/Iinfo-kont::obj ::sfun/Iinfo)
    (inline sfun/Iinfo-kont-set! ::sfun/Iinfo ::obj)
    (inline sfun/Iinfo-Ct::obj ::sfun/Iinfo)
    (inline sfun/Iinfo-Ct-set! ::sfun/Iinfo ::obj)
    (inline sfun/Iinfo-Cn::obj ::sfun/Iinfo)
    (inline sfun/Iinfo-Cn-set! ::sfun/Iinfo ::obj)
    (inline sfun/Iinfo-U::obj ::sfun/Iinfo)
    (inline sfun/Iinfo-U-set! ::sfun/Iinfo ::obj)
    (inline sfun/Iinfo-K*::obj ::sfun/Iinfo)
    (inline sfun/Iinfo-K*-set! ::sfun/Iinfo ::obj)
    (inline sfun/Iinfo-K::obj ::sfun/Iinfo)
    (inline sfun/Iinfo-K-set! ::sfun/Iinfo ::obj)
    (inline sfun/Iinfo-cto::obj ::sfun/Iinfo)
    (inline sfun/Iinfo-cto-set! ::sfun/Iinfo ::obj)
    (inline sfun/Iinfo-cfrom::obj ::sfun/Iinfo)
    (inline sfun/Iinfo-cfrom-set! ::sfun/Iinfo ::obj)
    (inline sfun/Iinfo-bound::obj ::sfun/Iinfo)
    (inline sfun/Iinfo-bound-set! ::sfun/Iinfo ::obj)
    (inline sfun/Iinfo-free::obj ::sfun/Iinfo)
    (inline sfun/Iinfo-free-set! ::sfun/Iinfo ::obj)
    (inline sfun/Iinfo-owner::obj ::sfun/Iinfo)
    (inline sfun/Iinfo-owner-set! ::sfun/Iinfo ::obj)
    (inline sfun/Iinfo-strength::symbol ::sfun/Iinfo)
    (inline sfun/Iinfo-strength-set! ::sfun/Iinfo ::symbol)
    (inline sfun/Iinfo-the-closure-global::obj ::sfun/Iinfo)
    (inline sfun/Iinfo-the-closure-global-set! ::sfun/Iinfo ::obj)
    (inline sfun/Iinfo-keys::obj ::sfun/Iinfo)
    (inline sfun/Iinfo-optionals::obj ::sfun/Iinfo)
    (inline sfun/Iinfo-loc::obj ::sfun/Iinfo)
    (inline sfun/Iinfo-loc-set! ::sfun/Iinfo ::obj)
    (inline sfun/Iinfo-dsssl-keywords::obj ::sfun/Iinfo)
    (inline sfun/Iinfo-dsssl-keywords-set! ::sfun/Iinfo ::obj)
    (inline sfun/Iinfo-class::obj ::sfun/Iinfo)
    (inline sfun/Iinfo-class-set! ::sfun/Iinfo ::obj)
    (inline sfun/Iinfo-body::obj ::sfun/Iinfo)
    (inline sfun/Iinfo-body-set! ::sfun/Iinfo ::obj)
    (inline sfun/Iinfo-args-name::obj ::sfun/Iinfo)
    (inline sfun/Iinfo-args::obj ::sfun/Iinfo)
    (inline sfun/Iinfo-args-set! ::sfun/Iinfo ::obj)
    (inline sfun/Iinfo-property::obj ::sfun/Iinfo)
    (inline sfun/Iinfo-property-set! ::sfun/Iinfo ::obj)
    (inline sfun/Iinfo-effect::obj ::sfun/Iinfo)
    (inline sfun/Iinfo-effect-set! ::sfun/Iinfo ::obj)
    (inline sfun/Iinfo-the-closure::obj ::sfun/Iinfo)
    (inline sfun/Iinfo-the-closure-set! ::sfun/Iinfo ::obj)
    (inline sfun/Iinfo-top?::bool ::sfun/Iinfo)
    (inline sfun/Iinfo-top?-set! ::sfun/Iinfo ::bool)
    (inline sfun/Iinfo-stack-allocator::obj ::sfun/Iinfo)
    (inline sfun/Iinfo-stack-allocator-set! ::sfun/Iinfo ::obj)
    (inline sfun/Iinfo-predicate-of::obj ::sfun/Iinfo)
    (inline sfun/Iinfo-predicate-of-set! ::sfun/Iinfo ::obj)
    (inline sfun/Iinfo-side-effect::obj ::sfun/Iinfo)
    (inline sfun/Iinfo-side-effect-set! ::sfun/Iinfo ::obj)
    (inline sfun/Iinfo-arity::long ::sfun/Iinfo)))))

;; The definitions
(cond-expand (bigloo-class-sans
;; svar/Iinfo
(define-inline (make-svar/Iinfo::svar/Iinfo loc1258::obj f-mark1259::obj u-mark1260::obj kaptured?1261::bool celled?1262::bool) (instantiate::svar/Iinfo (loc loc1258) (f-mark f-mark1259) (u-mark u-mark1260) (kaptured? kaptured?1261) (celled? celled?1262)))
(define-inline (svar/Iinfo?::bool obj::obj) ((@ isa? __object) obj (@ svar/Iinfo integrate_info)))
(define (svar/Iinfo-nil::svar/Iinfo) (class-nil (@ svar/Iinfo integrate_info)))
(define-inline (svar/Iinfo-celled?::bool o::svar/Iinfo) (with-access::svar/Iinfo o (celled?) celled?))
(define-inline (svar/Iinfo-celled?-set! o::svar/Iinfo v::bool) (with-access::svar/Iinfo o (celled?) (set! celled? v)))
(define-inline (svar/Iinfo-kaptured?::bool o::svar/Iinfo) (with-access::svar/Iinfo o (kaptured?) kaptured?))
(define-inline (svar/Iinfo-kaptured?-set! o::svar/Iinfo v::bool) (with-access::svar/Iinfo o (kaptured?) (set! kaptured? v)))
(define-inline (svar/Iinfo-u-mark::obj o::svar/Iinfo) (with-access::svar/Iinfo o (u-mark) u-mark))
(define-inline (svar/Iinfo-u-mark-set! o::svar/Iinfo v::obj) (with-access::svar/Iinfo o (u-mark) (set! u-mark v)))
(define-inline (svar/Iinfo-f-mark::obj o::svar/Iinfo) (with-access::svar/Iinfo o (f-mark) f-mark))
(define-inline (svar/Iinfo-f-mark-set! o::svar/Iinfo v::obj) (with-access::svar/Iinfo o (f-mark) (set! f-mark v)))
(define-inline (svar/Iinfo-loc::obj o::svar/Iinfo) (with-access::svar/Iinfo o (loc) loc))
(define-inline (svar/Iinfo-loc-set! o::svar/Iinfo v::obj) (with-access::svar/Iinfo o (loc) (set! loc v)))

;; sexit/Iinfo
(define-inline (make-sexit/Iinfo::sexit/Iinfo handler1251::obj detached?1252::bool f-mark1253::obj u-mark1254::obj kaptured?1255::bool celled?1256::bool) (instantiate::sexit/Iinfo (handler handler1251) (detached? detached?1252) (f-mark f-mark1253) (u-mark u-mark1254) (kaptured? kaptured?1255) (celled? celled?1256)))
(define-inline (sexit/Iinfo?::bool obj::obj) ((@ isa? __object) obj (@ sexit/Iinfo integrate_info)))
(define (sexit/Iinfo-nil::sexit/Iinfo) (class-nil (@ sexit/Iinfo integrate_info)))
(define-inline (sexit/Iinfo-celled?::bool o::sexit/Iinfo) (with-access::sexit/Iinfo o (celled?) celled?))
(define-inline (sexit/Iinfo-celled?-set! o::sexit/Iinfo v::bool) (with-access::sexit/Iinfo o (celled?) (set! celled? v)))
(define-inline (sexit/Iinfo-kaptured?::bool o::sexit/Iinfo) (with-access::sexit/Iinfo o (kaptured?) kaptured?))
(define-inline (sexit/Iinfo-kaptured?-set! o::sexit/Iinfo v::bool) (with-access::sexit/Iinfo o (kaptured?) (set! kaptured? v)))
(define-inline (sexit/Iinfo-u-mark::obj o::sexit/Iinfo) (with-access::sexit/Iinfo o (u-mark) u-mark))
(define-inline (sexit/Iinfo-u-mark-set! o::sexit/Iinfo v::obj) (with-access::sexit/Iinfo o (u-mark) (set! u-mark v)))
(define-inline (sexit/Iinfo-f-mark::obj o::sexit/Iinfo) (with-access::sexit/Iinfo o (f-mark) f-mark))
(define-inline (sexit/Iinfo-f-mark-set! o::sexit/Iinfo v::obj) (with-access::sexit/Iinfo o (f-mark) (set! f-mark v)))
(define-inline (sexit/Iinfo-detached?::bool o::sexit/Iinfo) (with-access::sexit/Iinfo o (detached?) detached?))
(define-inline (sexit/Iinfo-detached?-set! o::sexit/Iinfo v::bool) (with-access::sexit/Iinfo o (detached?) (set! detached? v)))
(define-inline (sexit/Iinfo-handler::obj o::sexit/Iinfo) (with-access::sexit/Iinfo o (handler) handler))
(define-inline (sexit/Iinfo-handler-set! o::sexit/Iinfo v::obj) (with-access::sexit/Iinfo o (handler) (set! handler v)))

;; sfun/Iinfo
(define-inline (make-sfun/Iinfo::sfun/Iinfo arity1213::long side-effect1214::obj predicate-of1215::obj stack-allocator1216::obj top?1217::bool the-closure1218::obj effect1219::obj property1220::obj args1221::obj args-name1222::obj body1223::obj class1224::obj dsssl-keywords1225::obj loc1226::obj optionals1227::obj keys1228::obj the-closure-global1229::obj strength1230::symbol owner1231::obj free1232::obj bound1233::obj cfrom1234::obj cto1235::obj K1236::obj K*1237::obj U1238::obj Cn1239::obj Ct1240::obj kont1241::obj G?1242::bool forceG?1243::bool L1244::obj Led1245::obj istamp1246::obj global1247::obj kaptured1248::obj tail-coercion1249::obj) (instantiate::sfun/Iinfo (arity arity1213) (side-effect side-effect1214) (predicate-of predicate-of1215) (stack-allocator stack-allocator1216) (top? top?1217) (the-closure the-closure1218) (effect effect1219) (property property1220) (args args1221) (args-name args-name1222) (body body1223) (class class1224) (dsssl-keywords dsssl-keywords1225) (loc loc1226) (optionals optionals1227) (keys keys1228) (the-closure-global the-closure-global1229) (strength strength1230) (owner owner1231) (free free1232) (bound bound1233) (cfrom cfrom1234) (cto cto1235) (K K1236) (K* K*1237) (U U1238) (Cn Cn1239) (Ct Ct1240) (kont kont1241) (G? G?1242) (forceG? forceG?1243) (L L1244) (Led Led1245) (istamp istamp1246) (global global1247) (kaptured kaptured1248) (tail-coercion tail-coercion1249)))
(define-inline (sfun/Iinfo?::bool obj::obj) ((@ isa? __object) obj (@ sfun/Iinfo integrate_info)))
(define (sfun/Iinfo-nil::sfun/Iinfo) (class-nil (@ sfun/Iinfo integrate_info)))
(define-inline (sfun/Iinfo-tail-coercion::obj o::sfun/Iinfo) (with-access::sfun/Iinfo o (tail-coercion) tail-coercion))
(define-inline (sfun/Iinfo-tail-coercion-set! o::sfun/Iinfo v::obj) (with-access::sfun/Iinfo o (tail-coercion) (set! tail-coercion v)))
(define-inline (sfun/Iinfo-kaptured::obj o::sfun/Iinfo) (with-access::sfun/Iinfo o (kaptured) kaptured))
(define-inline (sfun/Iinfo-kaptured-set! o::sfun/Iinfo v::obj) (with-access::sfun/Iinfo o (kaptured) (set! kaptured v)))
(define-inline (sfun/Iinfo-global::obj o::sfun/Iinfo) (with-access::sfun/Iinfo o (global) global))
(define-inline (sfun/Iinfo-global-set! o::sfun/Iinfo v::obj) (with-access::sfun/Iinfo o (global) (set! global v)))
(define-inline (sfun/Iinfo-istamp::obj o::sfun/Iinfo) (with-access::sfun/Iinfo o (istamp) istamp))
(define-inline (sfun/Iinfo-istamp-set! o::sfun/Iinfo v::obj) (with-access::sfun/Iinfo o (istamp) (set! istamp v)))
(define-inline (sfun/Iinfo-Led::obj o::sfun/Iinfo) (with-access::sfun/Iinfo o (Led) Led))
(define-inline (sfun/Iinfo-Led-set! o::sfun/Iinfo v::obj) (with-access::sfun/Iinfo o (Led) (set! Led v)))
(define-inline (sfun/Iinfo-L::obj o::sfun/Iinfo) (with-access::sfun/Iinfo o (L) L))
(define-inline (sfun/Iinfo-L-set! o::sfun/Iinfo v::obj) (with-access::sfun/Iinfo o (L) (set! L v)))
(define-inline (sfun/Iinfo-forceG?::bool o::sfun/Iinfo) (with-access::sfun/Iinfo o (forceG?) forceG?))
(define-inline (sfun/Iinfo-forceG?-set! o::sfun/Iinfo v::bool) (with-access::sfun/Iinfo o (forceG?) (set! forceG? v)))
(define-inline (sfun/Iinfo-G?::bool o::sfun/Iinfo) (with-access::sfun/Iinfo o (G?) G?))
(define-inline (sfun/Iinfo-G?-set! o::sfun/Iinfo v::bool) (with-access::sfun/Iinfo o (G?) (set! G? v)))
(define-inline (sfun/Iinfo-kont::obj o::sfun/Iinfo) (with-access::sfun/Iinfo o (kont) kont))
(define-inline (sfun/Iinfo-kont-set! o::sfun/Iinfo v::obj) (with-access::sfun/Iinfo o (kont) (set! kont v)))
(define-inline (sfun/Iinfo-Ct::obj o::sfun/Iinfo) (with-access::sfun/Iinfo o (Ct) Ct))
(define-inline (sfun/Iinfo-Ct-set! o::sfun/Iinfo v::obj) (with-access::sfun/Iinfo o (Ct) (set! Ct v)))
(define-inline (sfun/Iinfo-Cn::obj o::sfun/Iinfo) (with-access::sfun/Iinfo o (Cn) Cn))
(define-inline (sfun/Iinfo-Cn-set! o::sfun/Iinfo v::obj) (with-access::sfun/Iinfo o (Cn) (set! Cn v)))
(define-inline (sfun/Iinfo-U::obj o::sfun/Iinfo) (with-access::sfun/Iinfo o (U) U))
(define-inline (sfun/Iinfo-U-set! o::sfun/Iinfo v::obj) (with-access::sfun/Iinfo o (U) (set! U v)))
(define-inline (sfun/Iinfo-K*::obj o::sfun/Iinfo) (with-access::sfun/Iinfo o (K*) K*))
(define-inline (sfun/Iinfo-K*-set! o::sfun/Iinfo v::obj) (with-access::sfun/Iinfo o (K*) (set! K* v)))
(define-inline (sfun/Iinfo-K::obj o::sfun/Iinfo) (with-access::sfun/Iinfo o (K) K))
(define-inline (sfun/Iinfo-K-set! o::sfun/Iinfo v::obj) (with-access::sfun/Iinfo o (K) (set! K v)))
(define-inline (sfun/Iinfo-cto::obj o::sfun/Iinfo) (with-access::sfun/Iinfo o (cto) cto))
(define-inline (sfun/Iinfo-cto-set! o::sfun/Iinfo v::obj) (with-access::sfun/Iinfo o (cto) (set! cto v)))
(define-inline (sfun/Iinfo-cfrom::obj o::sfun/Iinfo) (with-access::sfun/Iinfo o (cfrom) cfrom))
(define-inline (sfun/Iinfo-cfrom-set! o::sfun/Iinfo v::obj) (with-access::sfun/Iinfo o (cfrom) (set! cfrom v)))
(define-inline (sfun/Iinfo-bound::obj o::sfun/Iinfo) (with-access::sfun/Iinfo o (bound) bound))
(define-inline (sfun/Iinfo-bound-set! o::sfun/Iinfo v::obj) (with-access::sfun/Iinfo o (bound) (set! bound v)))
(define-inline (sfun/Iinfo-free::obj o::sfun/Iinfo) (with-access::sfun/Iinfo o (free) free))
(define-inline (sfun/Iinfo-free-set! o::sfun/Iinfo v::obj) (with-access::sfun/Iinfo o (free) (set! free v)))
(define-inline (sfun/Iinfo-owner::obj o::sfun/Iinfo) (with-access::sfun/Iinfo o (owner) owner))
(define-inline (sfun/Iinfo-owner-set! o::sfun/Iinfo v::obj) (with-access::sfun/Iinfo o (owner) (set! owner v)))
(define-inline (sfun/Iinfo-strength::symbol o::sfun/Iinfo) (with-access::sfun/Iinfo o (strength) strength))
(define-inline (sfun/Iinfo-strength-set! o::sfun/Iinfo v::symbol) (with-access::sfun/Iinfo o (strength) (set! strength v)))
(define-inline (sfun/Iinfo-the-closure-global::obj o::sfun/Iinfo) (with-access::sfun/Iinfo o (the-closure-global) the-closure-global))
(define-inline (sfun/Iinfo-the-closure-global-set! o::sfun/Iinfo v::obj) (with-access::sfun/Iinfo o (the-closure-global) (set! the-closure-global v)))
(define-inline (sfun/Iinfo-keys::obj o::sfun/Iinfo) (with-access::sfun/Iinfo o (keys) keys))
(define-inline (sfun/Iinfo-keys-set! o::sfun/Iinfo v::obj) (with-access::sfun/Iinfo o (keys) (set! keys v)))
(define-inline (sfun/Iinfo-optionals::obj o::sfun/Iinfo) (with-access::sfun/Iinfo o (optionals) optionals))
(define-inline (sfun/Iinfo-optionals-set! o::sfun/Iinfo v::obj) (with-access::sfun/Iinfo o (optionals) (set! optionals v)))
(define-inline (sfun/Iinfo-loc::obj o::sfun/Iinfo) (with-access::sfun/Iinfo o (loc) loc))
(define-inline (sfun/Iinfo-loc-set! o::sfun/Iinfo v::obj) (with-access::sfun/Iinfo o (loc) (set! loc v)))
(define-inline (sfun/Iinfo-dsssl-keywords::obj o::sfun/Iinfo) (with-access::sfun/Iinfo o (dsssl-keywords) dsssl-keywords))
(define-inline (sfun/Iinfo-dsssl-keywords-set! o::sfun/Iinfo v::obj) (with-access::sfun/Iinfo o (dsssl-keywords) (set! dsssl-keywords v)))
(define-inline (sfun/Iinfo-class::obj o::sfun/Iinfo) (with-access::sfun/Iinfo o (class) class))
(define-inline (sfun/Iinfo-class-set! o::sfun/Iinfo v::obj) (with-access::sfun/Iinfo o (class) (set! class v)))
(define-inline (sfun/Iinfo-body::obj o::sfun/Iinfo) (with-access::sfun/Iinfo o (body) body))
(define-inline (sfun/Iinfo-body-set! o::sfun/Iinfo v::obj) (with-access::sfun/Iinfo o (body) (set! body v)))
(define-inline (sfun/Iinfo-args-name::obj o::sfun/Iinfo) (with-access::sfun/Iinfo o (args-name) args-name))
(define-inline (sfun/Iinfo-args-name-set! o::sfun/Iinfo v::obj) (with-access::sfun/Iinfo o (args-name) (set! args-name v)))
(define-inline (sfun/Iinfo-args::obj o::sfun/Iinfo) (with-access::sfun/Iinfo o (args) args))
(define-inline (sfun/Iinfo-args-set! o::sfun/Iinfo v::obj) (with-access::sfun/Iinfo o (args) (set! args v)))
(define-inline (sfun/Iinfo-property::obj o::sfun/Iinfo) (with-access::sfun/Iinfo o (property) property))
(define-inline (sfun/Iinfo-property-set! o::sfun/Iinfo v::obj) (with-access::sfun/Iinfo o (property) (set! property v)))
(define-inline (sfun/Iinfo-effect::obj o::sfun/Iinfo) (with-access::sfun/Iinfo o (effect) effect))
(define-inline (sfun/Iinfo-effect-set! o::sfun/Iinfo v::obj) (with-access::sfun/Iinfo o (effect) (set! effect v)))
(define-inline (sfun/Iinfo-the-closure::obj o::sfun/Iinfo) (with-access::sfun/Iinfo o (the-closure) the-closure))
(define-inline (sfun/Iinfo-the-closure-set! o::sfun/Iinfo v::obj) (with-access::sfun/Iinfo o (the-closure) (set! the-closure v)))
(define-inline (sfun/Iinfo-top?::bool o::sfun/Iinfo) (with-access::sfun/Iinfo o (top?) top?))
(define-inline (sfun/Iinfo-top?-set! o::sfun/Iinfo v::bool) (with-access::sfun/Iinfo o (top?) (set! top? v)))
(define-inline (sfun/Iinfo-stack-allocator::obj o::sfun/Iinfo) (with-access::sfun/Iinfo o (stack-allocator) stack-allocator))
(define-inline (sfun/Iinfo-stack-allocator-set! o::sfun/Iinfo v::obj) (with-access::sfun/Iinfo o (stack-allocator) (set! stack-allocator v)))
(define-inline (sfun/Iinfo-predicate-of::obj o::sfun/Iinfo) (with-access::sfun/Iinfo o (predicate-of) predicate-of))
(define-inline (sfun/Iinfo-predicate-of-set! o::sfun/Iinfo v::obj) (with-access::sfun/Iinfo o (predicate-of) (set! predicate-of v)))
(define-inline (sfun/Iinfo-side-effect::obj o::sfun/Iinfo) (with-access::sfun/Iinfo o (side-effect) side-effect))
(define-inline (sfun/Iinfo-side-effect-set! o::sfun/Iinfo v::obj) (with-access::sfun/Iinfo o (side-effect) (set! side-effect v)))
(define-inline (sfun/Iinfo-arity::long o::sfun/Iinfo) (with-access::sfun/Iinfo o (arity) arity))
(define-inline (sfun/Iinfo-arity-set! o::sfun/Iinfo v::long) (with-access::sfun/Iinfo o (arity) (set! arity v)))
))
