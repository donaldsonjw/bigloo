;; ==========================================================
;; Class accessors
;; Bigloo (3.7b)
;; Inria -- Sophia Antipolis     Mon Nov 14 16:42:36 CET 2011 
;; (bigloo.new -classgen Object/class.scm)
;; ==========================================================

;; The directives
(directives

;; tclass
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-tclass::tclass id1227::symbol name1228::obj size1229::obj class1230::obj coerce-to1231::obj parents1232::obj init?1233::bool magic?1234::bool $1235::obj alias1236::obj pointed-to-by1237::obj tvector1238::obj location1239::obj import-location1240::obj occurrence1241::int its-super1242::obj slots1243::obj holder1244::global widening1245::obj depth1246::long final?1247::bool constructor1248::obj virtual-slots-number1249::obj abstract?1250::bool wide-type1251::obj)
    (inline tclass?::bool ::obj)
    (tclass-nil::tclass)
    (inline tclass-wide-type::obj ::tclass)
    (inline tclass-wide-type-set! ::tclass ::obj)
    (inline tclass-abstract?::bool ::tclass)
    (inline tclass-virtual-slots-number::obj ::tclass)
    (inline tclass-virtual-slots-number-set! ::tclass ::obj)
    (inline tclass-constructor::obj ::tclass)
    (inline tclass-final?::bool ::tclass)
    (inline tclass-depth::long ::tclass)
    (inline tclass-depth-set! ::tclass ::long)
    (inline tclass-widening::obj ::tclass)
    (inline tclass-holder::global ::tclass)
    (inline tclass-slots::obj ::tclass)
    (inline tclass-slots-set! ::tclass ::obj)
    (inline tclass-its-super::obj ::tclass)
    (inline tclass-its-super-set! ::tclass ::obj)
    (inline tclass-occurrence::int ::tclass)
    (inline tclass-occurrence-set! ::tclass ::int)
    (inline tclass-import-location::obj ::tclass)
    (inline tclass-import-location-set! ::tclass ::obj)
    (inline tclass-location::obj ::tclass)
    (inline tclass-location-set! ::tclass ::obj)
    (inline tclass-tvector::obj ::tclass)
    (inline tclass-tvector-set! ::tclass ::obj)
    (inline tclass-pointed-to-by::obj ::tclass)
    (inline tclass-pointed-to-by-set! ::tclass ::obj)
    (inline tclass-alias::obj ::tclass)
    (inline tclass-alias-set! ::tclass ::obj)
    (inline tclass-$::obj ::tclass)
    (inline tclass-$-set! ::tclass ::obj)
    (inline tclass-magic?::bool ::tclass)
    (inline tclass-magic?-set! ::tclass ::bool)
    (inline tclass-init?::bool ::tclass)
    (inline tclass-init?-set! ::tclass ::bool)
    (inline tclass-parents::obj ::tclass)
    (inline tclass-parents-set! ::tclass ::obj)
    (inline tclass-coerce-to::obj ::tclass)
    (inline tclass-coerce-to-set! ::tclass ::obj)
    (inline tclass-class::obj ::tclass)
    (inline tclass-class-set! ::tclass ::obj)
    (inline tclass-size::obj ::tclass)
    (inline tclass-size-set! ::tclass ::obj)
    (inline tclass-name::obj ::tclass)
    (inline tclass-name-set! ::tclass ::obj)
    (inline tclass-id::symbol ::tclass))))

;; jclass
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-jclass::jclass id1208::symbol name1209::obj size1210::obj class1211::obj coerce-to1212::obj parents1213::obj init?1214::bool magic?1215::bool $1216::obj alias1217::obj pointed-to-by1218::obj tvector1219::obj location1220::obj import-location1221::obj occurrence1222::int its-super1223::obj slots1224::obj package1225::bstring)
    (inline jclass?::bool ::obj)
    (jclass-nil::jclass)
    (inline jclass-package::bstring ::jclass)
    (inline jclass-slots::obj ::jclass)
    (inline jclass-slots-set! ::jclass ::obj)
    (inline jclass-its-super::obj ::jclass)
    (inline jclass-its-super-set! ::jclass ::obj)
    (inline jclass-occurrence::int ::jclass)
    (inline jclass-occurrence-set! ::jclass ::int)
    (inline jclass-import-location::obj ::jclass)
    (inline jclass-import-location-set! ::jclass ::obj)
    (inline jclass-location::obj ::jclass)
    (inline jclass-location-set! ::jclass ::obj)
    (inline jclass-tvector::obj ::jclass)
    (inline jclass-tvector-set! ::jclass ::obj)
    (inline jclass-pointed-to-by::obj ::jclass)
    (inline jclass-pointed-to-by-set! ::jclass ::obj)
    (inline jclass-alias::obj ::jclass)
    (inline jclass-alias-set! ::jclass ::obj)
    (inline jclass-$::obj ::jclass)
    (inline jclass-$-set! ::jclass ::obj)
    (inline jclass-magic?::bool ::jclass)
    (inline jclass-magic?-set! ::jclass ::bool)
    (inline jclass-init?::bool ::jclass)
    (inline jclass-init?-set! ::jclass ::bool)
    (inline jclass-parents::obj ::jclass)
    (inline jclass-parents-set! ::jclass ::obj)
    (inline jclass-coerce-to::obj ::jclass)
    (inline jclass-coerce-to-set! ::jclass ::obj)
    (inline jclass-class::obj ::jclass)
    (inline jclass-class-set! ::jclass ::obj)
    (inline jclass-size::obj ::jclass)
    (inline jclass-size-set! ::jclass ::obj)
    (inline jclass-name::obj ::jclass)
    (inline jclass-name-set! ::jclass ::obj)
    (inline jclass-id::symbol ::jclass))))

;; wclass
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-wclass::wclass id1191::symbol name1192::obj size1193::obj class1194::obj coerce-to1195::obj parents1196::obj init?1197::bool magic?1198::bool $1199::obj alias1200::obj pointed-to-by1201::obj tvector1202::obj location1203::obj import-location1204::obj occurrence1205::int its-class1206::obj)
    (inline wclass?::bool ::obj)
    (wclass-nil::wclass)
    (inline wclass-its-class::obj ::wclass)
    (inline wclass-its-class-set! ::wclass ::obj)
    (inline wclass-occurrence::int ::wclass)
    (inline wclass-occurrence-set! ::wclass ::int)
    (inline wclass-import-location::obj ::wclass)
    (inline wclass-import-location-set! ::wclass ::obj)
    (inline wclass-location::obj ::wclass)
    (inline wclass-location-set! ::wclass ::obj)
    (inline wclass-tvector::obj ::wclass)
    (inline wclass-tvector-set! ::wclass ::obj)
    (inline wclass-pointed-to-by::obj ::wclass)
    (inline wclass-pointed-to-by-set! ::wclass ::obj)
    (inline wclass-alias::obj ::wclass)
    (inline wclass-alias-set! ::wclass ::obj)
    (inline wclass-$::obj ::wclass)
    (inline wclass-$-set! ::wclass ::obj)
    (inline wclass-magic?::bool ::wclass)
    (inline wclass-magic?-set! ::wclass ::bool)
    (inline wclass-init?::bool ::wclass)
    (inline wclass-init?-set! ::wclass ::bool)
    (inline wclass-parents::obj ::wclass)
    (inline wclass-parents-set! ::wclass ::obj)
    (inline wclass-coerce-to::obj ::wclass)
    (inline wclass-coerce-to-set! ::wclass ::obj)
    (inline wclass-class::obj ::wclass)
    (inline wclass-class-set! ::wclass ::obj)
    (inline wclass-size::obj ::wclass)
    (inline wclass-size-set! ::wclass ::obj)
    (inline wclass-name::obj ::wclass)
    (inline wclass-name-set! ::wclass ::obj)
    (inline wclass-id::symbol ::wclass)))))

;; The definitions
(cond-expand (bigloo-class-sans
;; tclass
(define-inline (make-tclass::tclass id1227::symbol name1228::obj size1229::obj class1230::obj coerce-to1231::obj parents1232::obj init?1233::bool magic?1234::bool $1235::obj alias1236::obj pointed-to-by1237::obj tvector1238::obj location1239::obj import-location1240::obj occurrence1241::int its-super1242::obj slots1243::obj holder1244::global widening1245::obj depth1246::long final?1247::bool constructor1248::obj virtual-slots-number1249::obj abstract?1250::bool wide-type1251::obj) (instantiate::tclass (id id1227) (name name1228) (size size1229) (class class1230) (coerce-to coerce-to1231) (parents parents1232) (init? init?1233) (magic? magic?1234) ($ $1235) (alias alias1236) (pointed-to-by pointed-to-by1237) (tvector tvector1238) (location location1239) (import-location import-location1240) (occurrence occurrence1241) (its-super its-super1242) (slots slots1243) (holder holder1244) (widening widening1245) (depth depth1246) (final? final?1247) (constructor constructor1248) (virtual-slots-number virtual-slots-number1249) (abstract? abstract?1250) (wide-type wide-type1251)))
(define-inline (tclass?::bool obj::obj) ((@ isa? __object) obj (@ tclass object_class)))
(define (tclass-nil::tclass) (class-nil (@ tclass object_class)))
(define-inline (tclass-wide-type::obj o::tclass) (with-access::tclass o (wide-type) wide-type))
(define-inline (tclass-wide-type-set! o::tclass v::obj) (with-access::tclass o (wide-type) (set! wide-type v)))
(define-inline (tclass-abstract?::bool o::tclass) (with-access::tclass o (abstract?) abstract?))
(define-inline (tclass-abstract?-set! o::tclass v::bool) (with-access::tclass o (abstract?) (set! abstract? v)))
(define-inline (tclass-virtual-slots-number::obj o::tclass) (with-access::tclass o (virtual-slots-number) virtual-slots-number))
(define-inline (tclass-virtual-slots-number-set! o::tclass v::obj) (with-access::tclass o (virtual-slots-number) (set! virtual-slots-number v)))
(define-inline (tclass-constructor::obj o::tclass) (with-access::tclass o (constructor) constructor))
(define-inline (tclass-constructor-set! o::tclass v::obj) (with-access::tclass o (constructor) (set! constructor v)))
(define-inline (tclass-final?::bool o::tclass) (with-access::tclass o (final?) final?))
(define-inline (tclass-final?-set! o::tclass v::bool) (with-access::tclass o (final?) (set! final? v)))
(define-inline (tclass-depth::long o::tclass) (with-access::tclass o (depth) depth))
(define-inline (tclass-depth-set! o::tclass v::long) (with-access::tclass o (depth) (set! depth v)))
(define-inline (tclass-widening::obj o::tclass) (with-access::tclass o (widening) widening))
(define-inline (tclass-widening-set! o::tclass v::obj) (with-access::tclass o (widening) (set! widening v)))
(define-inline (tclass-holder::global o::tclass) (with-access::tclass o (holder) holder))
(define-inline (tclass-holder-set! o::tclass v::global) (with-access::tclass o (holder) (set! holder v)))
(define-inline (tclass-slots::obj o::tclass) (with-access::tclass o (slots) slots))
(define-inline (tclass-slots-set! o::tclass v::obj) (with-access::tclass o (slots) (set! slots v)))
(define-inline (tclass-its-super::obj o::tclass) (with-access::tclass o (its-super) its-super))
(define-inline (tclass-its-super-set! o::tclass v::obj) (with-access::tclass o (its-super) (set! its-super v)))
(define-inline (tclass-occurrence::int o::tclass) (with-access::tclass o (occurrence) occurrence))
(define-inline (tclass-occurrence-set! o::tclass v::int) (with-access::tclass o (occurrence) (set! occurrence v)))
(define-inline (tclass-import-location::obj o::tclass) (with-access::tclass o (import-location) import-location))
(define-inline (tclass-import-location-set! o::tclass v::obj) (with-access::tclass o (import-location) (set! import-location v)))
(define-inline (tclass-location::obj o::tclass) (with-access::tclass o (location) location))
(define-inline (tclass-location-set! o::tclass v::obj) (with-access::tclass o (location) (set! location v)))
(define-inline (tclass-tvector::obj o::tclass) (with-access::tclass o (tvector) tvector))
(define-inline (tclass-tvector-set! o::tclass v::obj) (with-access::tclass o (tvector) (set! tvector v)))
(define-inline (tclass-pointed-to-by::obj o::tclass) (with-access::tclass o (pointed-to-by) pointed-to-by))
(define-inline (tclass-pointed-to-by-set! o::tclass v::obj) (with-access::tclass o (pointed-to-by) (set! pointed-to-by v)))
(define-inline (tclass-alias::obj o::tclass) (with-access::tclass o (alias) alias))
(define-inline (tclass-alias-set! o::tclass v::obj) (with-access::tclass o (alias) (set! alias v)))
(define-inline (tclass-$::obj o::tclass) (with-access::tclass o ($) $))
(define-inline (tclass-$-set! o::tclass v::obj) (with-access::tclass o ($) (set! $ v)))
(define-inline (tclass-magic?::bool o::tclass) (with-access::tclass o (magic?) magic?))
(define-inline (tclass-magic?-set! o::tclass v::bool) (with-access::tclass o (magic?) (set! magic? v)))
(define-inline (tclass-init?::bool o::tclass) (with-access::tclass o (init?) init?))
(define-inline (tclass-init?-set! o::tclass v::bool) (with-access::tclass o (init?) (set! init? v)))
(define-inline (tclass-parents::obj o::tclass) (with-access::tclass o (parents) parents))
(define-inline (tclass-parents-set! o::tclass v::obj) (with-access::tclass o (parents) (set! parents v)))
(define-inline (tclass-coerce-to::obj o::tclass) (with-access::tclass o (coerce-to) coerce-to))
(define-inline (tclass-coerce-to-set! o::tclass v::obj) (with-access::tclass o (coerce-to) (set! coerce-to v)))
(define-inline (tclass-class::obj o::tclass) (with-access::tclass o (class) class))
(define-inline (tclass-class-set! o::tclass v::obj) (with-access::tclass o (class) (set! class v)))
(define-inline (tclass-size::obj o::tclass) (with-access::tclass o (size) size))
(define-inline (tclass-size-set! o::tclass v::obj) (with-access::tclass o (size) (set! size v)))
(define-inline (tclass-name::obj o::tclass) (with-access::tclass o (name) name))
(define-inline (tclass-name-set! o::tclass v::obj) (with-access::tclass o (name) (set! name v)))
(define-inline (tclass-id::symbol o::tclass) (with-access::tclass o (id) id))
(define-inline (tclass-id-set! o::tclass v::symbol) (with-access::tclass o (id) (set! id v)))

;; jclass
(define-inline (make-jclass::jclass id1208::symbol name1209::obj size1210::obj class1211::obj coerce-to1212::obj parents1213::obj init?1214::bool magic?1215::bool $1216::obj alias1217::obj pointed-to-by1218::obj tvector1219::obj location1220::obj import-location1221::obj occurrence1222::int its-super1223::obj slots1224::obj package1225::bstring) (instantiate::jclass (id id1208) (name name1209) (size size1210) (class class1211) (coerce-to coerce-to1212) (parents parents1213) (init? init?1214) (magic? magic?1215) ($ $1216) (alias alias1217) (pointed-to-by pointed-to-by1218) (tvector tvector1219) (location location1220) (import-location import-location1221) (occurrence occurrence1222) (its-super its-super1223) (slots slots1224) (package package1225)))
(define-inline (jclass?::bool obj::obj) ((@ isa? __object) obj (@ jclass object_class)))
(define (jclass-nil::jclass) (class-nil (@ jclass object_class)))
(define-inline (jclass-package::bstring o::jclass) (with-access::jclass o (package) package))
(define-inline (jclass-package-set! o::jclass v::bstring) (with-access::jclass o (package) (set! package v)))
(define-inline (jclass-slots::obj o::jclass) (with-access::jclass o (slots) slots))
(define-inline (jclass-slots-set! o::jclass v::obj) (with-access::jclass o (slots) (set! slots v)))
(define-inline (jclass-its-super::obj o::jclass) (with-access::jclass o (its-super) its-super))
(define-inline (jclass-its-super-set! o::jclass v::obj) (with-access::jclass o (its-super) (set! its-super v)))
(define-inline (jclass-occurrence::int o::jclass) (with-access::jclass o (occurrence) occurrence))
(define-inline (jclass-occurrence-set! o::jclass v::int) (with-access::jclass o (occurrence) (set! occurrence v)))
(define-inline (jclass-import-location::obj o::jclass) (with-access::jclass o (import-location) import-location))
(define-inline (jclass-import-location-set! o::jclass v::obj) (with-access::jclass o (import-location) (set! import-location v)))
(define-inline (jclass-location::obj o::jclass) (with-access::jclass o (location) location))
(define-inline (jclass-location-set! o::jclass v::obj) (with-access::jclass o (location) (set! location v)))
(define-inline (jclass-tvector::obj o::jclass) (with-access::jclass o (tvector) tvector))
(define-inline (jclass-tvector-set! o::jclass v::obj) (with-access::jclass o (tvector) (set! tvector v)))
(define-inline (jclass-pointed-to-by::obj o::jclass) (with-access::jclass o (pointed-to-by) pointed-to-by))
(define-inline (jclass-pointed-to-by-set! o::jclass v::obj) (with-access::jclass o (pointed-to-by) (set! pointed-to-by v)))
(define-inline (jclass-alias::obj o::jclass) (with-access::jclass o (alias) alias))
(define-inline (jclass-alias-set! o::jclass v::obj) (with-access::jclass o (alias) (set! alias v)))
(define-inline (jclass-$::obj o::jclass) (with-access::jclass o ($) $))
(define-inline (jclass-$-set! o::jclass v::obj) (with-access::jclass o ($) (set! $ v)))
(define-inline (jclass-magic?::bool o::jclass) (with-access::jclass o (magic?) magic?))
(define-inline (jclass-magic?-set! o::jclass v::bool) (with-access::jclass o (magic?) (set! magic? v)))
(define-inline (jclass-init?::bool o::jclass) (with-access::jclass o (init?) init?))
(define-inline (jclass-init?-set! o::jclass v::bool) (with-access::jclass o (init?) (set! init? v)))
(define-inline (jclass-parents::obj o::jclass) (with-access::jclass o (parents) parents))
(define-inline (jclass-parents-set! o::jclass v::obj) (with-access::jclass o (parents) (set! parents v)))
(define-inline (jclass-coerce-to::obj o::jclass) (with-access::jclass o (coerce-to) coerce-to))
(define-inline (jclass-coerce-to-set! o::jclass v::obj) (with-access::jclass o (coerce-to) (set! coerce-to v)))
(define-inline (jclass-class::obj o::jclass) (with-access::jclass o (class) class))
(define-inline (jclass-class-set! o::jclass v::obj) (with-access::jclass o (class) (set! class v)))
(define-inline (jclass-size::obj o::jclass) (with-access::jclass o (size) size))
(define-inline (jclass-size-set! o::jclass v::obj) (with-access::jclass o (size) (set! size v)))
(define-inline (jclass-name::obj o::jclass) (with-access::jclass o (name) name))
(define-inline (jclass-name-set! o::jclass v::obj) (with-access::jclass o (name) (set! name v)))
(define-inline (jclass-id::symbol o::jclass) (with-access::jclass o (id) id))
(define-inline (jclass-id-set! o::jclass v::symbol) (with-access::jclass o (id) (set! id v)))

;; wclass
(define-inline (make-wclass::wclass id1191::symbol name1192::obj size1193::obj class1194::obj coerce-to1195::obj parents1196::obj init?1197::bool magic?1198::bool $1199::obj alias1200::obj pointed-to-by1201::obj tvector1202::obj location1203::obj import-location1204::obj occurrence1205::int its-class1206::obj) (instantiate::wclass (id id1191) (name name1192) (size size1193) (class class1194) (coerce-to coerce-to1195) (parents parents1196) (init? init?1197) (magic? magic?1198) ($ $1199) (alias alias1200) (pointed-to-by pointed-to-by1201) (tvector tvector1202) (location location1203) (import-location import-location1204) (occurrence occurrence1205) (its-class its-class1206)))
(define-inline (wclass?::bool obj::obj) ((@ isa? __object) obj (@ wclass object_class)))
(define (wclass-nil::wclass) (class-nil (@ wclass object_class)))
(define-inline (wclass-its-class::obj o::wclass) (with-access::wclass o (its-class) its-class))
(define-inline (wclass-its-class-set! o::wclass v::obj) (with-access::wclass o (its-class) (set! its-class v)))
(define-inline (wclass-occurrence::int o::wclass) (with-access::wclass o (occurrence) occurrence))
(define-inline (wclass-occurrence-set! o::wclass v::int) (with-access::wclass o (occurrence) (set! occurrence v)))
(define-inline (wclass-import-location::obj o::wclass) (with-access::wclass o (import-location) import-location))
(define-inline (wclass-import-location-set! o::wclass v::obj) (with-access::wclass o (import-location) (set! import-location v)))
(define-inline (wclass-location::obj o::wclass) (with-access::wclass o (location) location))
(define-inline (wclass-location-set! o::wclass v::obj) (with-access::wclass o (location) (set! location v)))
(define-inline (wclass-tvector::obj o::wclass) (with-access::wclass o (tvector) tvector))
(define-inline (wclass-tvector-set! o::wclass v::obj) (with-access::wclass o (tvector) (set! tvector v)))
(define-inline (wclass-pointed-to-by::obj o::wclass) (with-access::wclass o (pointed-to-by) pointed-to-by))
(define-inline (wclass-pointed-to-by-set! o::wclass v::obj) (with-access::wclass o (pointed-to-by) (set! pointed-to-by v)))
(define-inline (wclass-alias::obj o::wclass) (with-access::wclass o (alias) alias))
(define-inline (wclass-alias-set! o::wclass v::obj) (with-access::wclass o (alias) (set! alias v)))
(define-inline (wclass-$::obj o::wclass) (with-access::wclass o ($) $))
(define-inline (wclass-$-set! o::wclass v::obj) (with-access::wclass o ($) (set! $ v)))
(define-inline (wclass-magic?::bool o::wclass) (with-access::wclass o (magic?) magic?))
(define-inline (wclass-magic?-set! o::wclass v::bool) (with-access::wclass o (magic?) (set! magic? v)))
(define-inline (wclass-init?::bool o::wclass) (with-access::wclass o (init?) init?))
(define-inline (wclass-init?-set! o::wclass v::bool) (with-access::wclass o (init?) (set! init? v)))
(define-inline (wclass-parents::obj o::wclass) (with-access::wclass o (parents) parents))
(define-inline (wclass-parents-set! o::wclass v::obj) (with-access::wclass o (parents) (set! parents v)))
(define-inline (wclass-coerce-to::obj o::wclass) (with-access::wclass o (coerce-to) coerce-to))
(define-inline (wclass-coerce-to-set! o::wclass v::obj) (with-access::wclass o (coerce-to) (set! coerce-to v)))
(define-inline (wclass-class::obj o::wclass) (with-access::wclass o (class) class))
(define-inline (wclass-class-set! o::wclass v::obj) (with-access::wclass o (class) (set! class v)))
(define-inline (wclass-size::obj o::wclass) (with-access::wclass o (size) size))
(define-inline (wclass-size-set! o::wclass v::obj) (with-access::wclass o (size) (set! size v)))
(define-inline (wclass-name::obj o::wclass) (with-access::wclass o (name) name))
(define-inline (wclass-name-set! o::wclass v::obj) (with-access::wclass o (name) (set! name v)))
(define-inline (wclass-id::symbol o::wclass) (with-access::wclass o (id) id))
(define-inline (wclass-id-set! o::wclass v::symbol) (with-access::wclass o (id) (set! id v)))
))
