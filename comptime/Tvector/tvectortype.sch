;; ==========================================================
;; Class accessors
;; Bigloo (4.2c)
;; Inria -- Sophia Antipolis     Fri Nov 6 10:55:25 CET 2015 
;; (bigloo.new -classgen Tvector/tvector.scm -o Tvector/tvectortype.sch)
;; ==========================================================

;; The directives
(directives

;; tvec
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-tvec::tvec id1071::symbol name1072::obj size1073::obj class1074::obj coerce-to1075::obj parents1076::obj init?1077::bool magic?1078::bool $1079::obj alias1080::obj pointed-to-by1081::obj tvector1082::obj location1083::obj import-location1084::obj occurrence1085::int item-type1086::type)
    (inline tvec?::bool ::obj)
    (tvec-nil::tvec)
    (inline tvec-item-type::type ::tvec)
    (inline tvec-occurrence::int ::tvec)
    (inline tvec-occurrence-set! ::tvec ::int)
    (inline tvec-import-location::obj ::tvec)
    (inline tvec-import-location-set! ::tvec ::obj)
    (inline tvec-location::obj ::tvec)
    (inline tvec-location-set! ::tvec ::obj)
    (inline tvec-tvector::obj ::tvec)
    (inline tvec-tvector-set! ::tvec ::obj)
    (inline tvec-pointed-to-by::obj ::tvec)
    (inline tvec-pointed-to-by-set! ::tvec ::obj)
    (inline tvec-alias::obj ::tvec)
    (inline tvec-alias-set! ::tvec ::obj)
    (inline tvec-$::obj ::tvec)
    (inline tvec-$-set! ::tvec ::obj)
    (inline tvec-magic?::bool ::tvec)
    (inline tvec-magic?-set! ::tvec ::bool)
    (inline tvec-init?::bool ::tvec)
    (inline tvec-init?-set! ::tvec ::bool)
    (inline tvec-parents::obj ::tvec)
    (inline tvec-parents-set! ::tvec ::obj)
    (inline tvec-coerce-to::obj ::tvec)
    (inline tvec-coerce-to-set! ::tvec ::obj)
    (inline tvec-class::obj ::tvec)
    (inline tvec-class-set! ::tvec ::obj)
    (inline tvec-size::obj ::tvec)
    (inline tvec-size-set! ::tvec ::obj)
    (inline tvec-name::obj ::tvec)
    (inline tvec-name-set! ::tvec ::obj)
    (inline tvec-id::symbol ::tvec)))))

;; The definitions
(cond-expand (bigloo-class-sans
;; tvec
(define-inline (make-tvec::tvec id1071::symbol name1072::obj size1073::obj class1074::obj coerce-to1075::obj parents1076::obj init?1077::bool magic?1078::bool $1079::obj alias1080::obj pointed-to-by1081::obj tvector1082::obj location1083::obj import-location1084::obj occurrence1085::int item-type1086::type) (instantiate::tvec (id id1071) (name name1072) (size size1073) (class class1074) (coerce-to coerce-to1075) (parents parents1076) (init? init?1077) (magic? magic?1078) ($ $1079) (alias alias1080) (pointed-to-by pointed-to-by1081) (tvector tvector1082) (location location1083) (import-location import-location1084) (occurrence occurrence1085) (item-type item-type1086)))
(define-inline (tvec?::bool obj::obj) ((@ isa? __object) obj (@ tvec tvector_tvector)))
(define (tvec-nil::tvec) (class-nil (@ tvec tvector_tvector)))
(define-inline (tvec-item-type::type o::tvec) (-> |#!bigloo_wallow| o item-type))
(define-inline (tvec-item-type-set! o::tvec v::type) (set! (-> |#!bigloo_wallow| o item-type) v))
(define-inline (tvec-occurrence::int o::tvec) (-> |#!bigloo_wallow| o occurrence))
(define-inline (tvec-occurrence-set! o::tvec v::int) (set! (-> |#!bigloo_wallow| o occurrence) v))
(define-inline (tvec-import-location::obj o::tvec) (-> |#!bigloo_wallow| o import-location))
(define-inline (tvec-import-location-set! o::tvec v::obj) (set! (-> |#!bigloo_wallow| o import-location) v))
(define-inline (tvec-location::obj o::tvec) (-> |#!bigloo_wallow| o location))
(define-inline (tvec-location-set! o::tvec v::obj) (set! (-> |#!bigloo_wallow| o location) v))
(define-inline (tvec-tvector::obj o::tvec) (-> |#!bigloo_wallow| o tvector))
(define-inline (tvec-tvector-set! o::tvec v::obj) (set! (-> |#!bigloo_wallow| o tvector) v))
(define-inline (tvec-pointed-to-by::obj o::tvec) (-> |#!bigloo_wallow| o pointed-to-by))
(define-inline (tvec-pointed-to-by-set! o::tvec v::obj) (set! (-> |#!bigloo_wallow| o pointed-to-by) v))
(define-inline (tvec-alias::obj o::tvec) (-> |#!bigloo_wallow| o alias))
(define-inline (tvec-alias-set! o::tvec v::obj) (set! (-> |#!bigloo_wallow| o alias) v))
(define-inline (tvec-$::obj o::tvec) (-> |#!bigloo_wallow| o $))
(define-inline (tvec-$-set! o::tvec v::obj) (set! (-> |#!bigloo_wallow| o $) v))
(define-inline (tvec-magic?::bool o::tvec) (-> |#!bigloo_wallow| o magic?))
(define-inline (tvec-magic?-set! o::tvec v::bool) (set! (-> |#!bigloo_wallow| o magic?) v))
(define-inline (tvec-init?::bool o::tvec) (-> |#!bigloo_wallow| o init?))
(define-inline (tvec-init?-set! o::tvec v::bool) (set! (-> |#!bigloo_wallow| o init?) v))
(define-inline (tvec-parents::obj o::tvec) (-> |#!bigloo_wallow| o parents))
(define-inline (tvec-parents-set! o::tvec v::obj) (set! (-> |#!bigloo_wallow| o parents) v))
(define-inline (tvec-coerce-to::obj o::tvec) (-> |#!bigloo_wallow| o coerce-to))
(define-inline (tvec-coerce-to-set! o::tvec v::obj) (set! (-> |#!bigloo_wallow| o coerce-to) v))
(define-inline (tvec-class::obj o::tvec) (-> |#!bigloo_wallow| o class))
(define-inline (tvec-class-set! o::tvec v::obj) (set! (-> |#!bigloo_wallow| o class) v))
(define-inline (tvec-size::obj o::tvec) (-> |#!bigloo_wallow| o size))
(define-inline (tvec-size-set! o::tvec v::obj) (set! (-> |#!bigloo_wallow| o size) v))
(define-inline (tvec-name::obj o::tvec) (-> |#!bigloo_wallow| o name))
(define-inline (tvec-name-set! o::tvec v::obj) (set! (-> |#!bigloo_wallow| o name) v))
(define-inline (tvec-id::symbol o::tvec) (-> |#!bigloo_wallow| o id))
(define-inline (tvec-id-set! o::tvec v::symbol) (set! (-> |#!bigloo_wallow| o id) v))
))
