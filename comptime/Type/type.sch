;; ==========================================================
;; Class accessors
;; Bigloo (3.7b)
;; Inria -- Sophia Antipolis     Mon Nov 14 16:42:36 CET 2011 
;; (bigloo.new -classgen Type/type.scm)
;; ==========================================================

;; The directives
(directives

;; type
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-type::type id1113::symbol name1114::obj size1115::obj class1116::obj coerce-to1117::obj parents1118::obj init?1119::bool magic?1120::bool $1121::obj alias1122::obj pointed-to-by1123::obj tvector1124::obj location1125::obj import-location1126::obj occurrence1127::int)
    (inline type?::bool ::obj)
    (type-nil::type)
    (inline type-occurrence::int ::type)
    (inline type-occurrence-set! ::type ::int)
    (inline type-import-location::obj ::type)
    (inline type-import-location-set! ::type ::obj)
    (inline type-location::obj ::type)
    (inline type-location-set! ::type ::obj)
    (inline type-tvector::obj ::type)
    (inline type-tvector-set! ::type ::obj)
    (inline type-pointed-to-by::obj ::type)
    (inline type-pointed-to-by-set! ::type ::obj)
    (inline type-alias::obj ::type)
    (inline type-alias-set! ::type ::obj)
    (inline type-$::obj ::type)
    (inline type-$-set! ::type ::obj)
    (inline type-magic?::bool ::type)
    (inline type-magic?-set! ::type ::bool)
    (inline type-init?::bool ::type)
    (inline type-init?-set! ::type ::bool)
    (inline type-parents::obj ::type)
    (inline type-parents-set! ::type ::obj)
    (inline type-coerce-to::obj ::type)
    (inline type-coerce-to-set! ::type ::obj)
    (inline type-class::obj ::type)
    (inline type-class-set! ::type ::obj)
    (inline type-size::obj ::type)
    (inline type-size-set! ::type ::obj)
    (inline type-name::obj ::type)
    (inline type-name-set! ::type ::obj)
    (inline type-id::symbol ::type)))))

;; The definitions
(cond-expand (bigloo-class-sans
;; type
(define-inline (make-type::type id1113::symbol name1114::obj size1115::obj class1116::obj coerce-to1117::obj parents1118::obj init?1119::bool magic?1120::bool $1121::obj alias1122::obj pointed-to-by1123::obj tvector1124::obj location1125::obj import-location1126::obj occurrence1127::int) (instantiate::type (id id1113) (name name1114) (size size1115) (class class1116) (coerce-to coerce-to1117) (parents parents1118) (init? init?1119) (magic? magic?1120) ($ $1121) (alias alias1122) (pointed-to-by pointed-to-by1123) (tvector tvector1124) (location location1125) (import-location import-location1126) (occurrence occurrence1127)))
(define-inline (type?::bool obj::obj) ((@ isa? __object) obj (@ type type_type)))
(define (type-nil::type) (class-nil (@ type type_type)))
(define-inline (type-occurrence::int o::type) (with-access::type o (occurrence) occurrence))
(define-inline (type-occurrence-set! o::type v::int) (with-access::type o (occurrence) (set! occurrence v)))
(define-inline (type-import-location::obj o::type) (with-access::type o (import-location) import-location))
(define-inline (type-import-location-set! o::type v::obj) (with-access::type o (import-location) (set! import-location v)))
(define-inline (type-location::obj o::type) (with-access::type o (location) location))
(define-inline (type-location-set! o::type v::obj) (with-access::type o (location) (set! location v)))
(define-inline (type-tvector::obj o::type) (with-access::type o (tvector) tvector))
(define-inline (type-tvector-set! o::type v::obj) (with-access::type o (tvector) (set! tvector v)))
(define-inline (type-pointed-to-by::obj o::type) (with-access::type o (pointed-to-by) pointed-to-by))
(define-inline (type-pointed-to-by-set! o::type v::obj) (with-access::type o (pointed-to-by) (set! pointed-to-by v)))
(define-inline (type-alias::obj o::type) (with-access::type o (alias) alias))
(define-inline (type-alias-set! o::type v::obj) (with-access::type o (alias) (set! alias v)))
(define-inline (type-$::obj o::type) (with-access::type o ($) $))
(define-inline (type-$-set! o::type v::obj) (with-access::type o ($) (set! $ v)))
(define-inline (type-magic?::bool o::type) (with-access::type o (magic?) magic?))
(define-inline (type-magic?-set! o::type v::bool) (with-access::type o (magic?) (set! magic? v)))
(define-inline (type-init?::bool o::type) (with-access::type o (init?) init?))
(define-inline (type-init?-set! o::type v::bool) (with-access::type o (init?) (set! init? v)))
(define-inline (type-parents::obj o::type) (with-access::type o (parents) parents))
(define-inline (type-parents-set! o::type v::obj) (with-access::type o (parents) (set! parents v)))
(define-inline (type-coerce-to::obj o::type) (with-access::type o (coerce-to) coerce-to))
(define-inline (type-coerce-to-set! o::type v::obj) (with-access::type o (coerce-to) (set! coerce-to v)))
(define-inline (type-class::obj o::type) (with-access::type o (class) class))
(define-inline (type-class-set! o::type v::obj) (with-access::type o (class) (set! class v)))
(define-inline (type-size::obj o::type) (with-access::type o (size) size))
(define-inline (type-size-set! o::type v::obj) (with-access::type o (size) (set! size v)))
(define-inline (type-name::obj o::type) (with-access::type o (name) name))
(define-inline (type-name-set! o::type v::obj) (with-access::type o (name) (set! name v)))
(define-inline (type-id::symbol o::type) (with-access::type o (id) id))
(define-inline (type-id-set! o::type v::symbol) (with-access::type o (id) (set! id v)))
))
