;; ==========================================================
;; Class accessors
;; Bigloo (4.2c)
;; Inria -- Sophia Antipolis     Fri Nov 6 10:55:25 CET 2015 
;; (bigloo.new -classgen Type/type.scm)
;; ==========================================================

;; The directives
(directives

;; type
(cond-expand ((and bigloo-class-sans (not bigloo-class-generate))
  (export
    (inline make-type::type id1030::symbol name1031::obj size1032::obj class1033::obj coerce-to1034::obj parents1035::obj init?1036::bool magic?1037::bool $1038::obj alias1039::obj pointed-to-by1040::obj tvector1041::obj location1042::obj import-location1043::obj occurrence1044::int)
    (inline type?::bool ::obj)
    (type-nil::type)
    (inline type-occurrence::int ::type)
    (inline type-occurrence-set! ::type ::int)
    (inline type-import-location::obj ::type)
    (inline type-import-location-set! ::type ::obj)
    (inline type-location::obj ::type)
    (inline type-location-set! ::type ::obj)
    (inline type-tvector::obj ::type)
    (inline type-tvector-set! ::type ::obj)
    (inline type-pointed-to-by::obj ::type)
    (inline type-pointed-to-by-set! ::type ::obj)
    (inline type-alias::obj ::type)
    (inline type-alias-set! ::type ::obj)
    (inline type-$::obj ::type)
    (inline type-$-set! ::type ::obj)
    (inline type-magic?::bool ::type)
    (inline type-magic?-set! ::type ::bool)
    (inline type-init?::bool ::type)
    (inline type-init?-set! ::type ::bool)
    (inline type-parents::obj ::type)
    (inline type-parents-set! ::type ::obj)
    (inline type-coerce-to::obj ::type)
    (inline type-coerce-to-set! ::type ::obj)
    (inline type-class::obj ::type)
    (inline type-class-set! ::type ::obj)
    (inline type-size::obj ::type)
    (inline type-size-set! ::type ::obj)
    (inline type-name::obj ::type)
    (inline type-name-set! ::type ::obj)
    (inline type-id::symbol ::type)))))

;; The definitions
(cond-expand (bigloo-class-sans
;; type
(define-inline (make-type::type id1030::symbol name1031::obj size1032::obj class1033::obj coerce-to1034::obj parents1035::obj init?1036::bool magic?1037::bool $1038::obj alias1039::obj pointed-to-by1040::obj tvector1041::obj location1042::obj import-location1043::obj occurrence1044::int) (instantiate::type (id id1030) (name name1031) (size size1032) (class class1033) (coerce-to coerce-to1034) (parents parents1035) (init? init?1036) (magic? magic?1037) ($ $1038) (alias alias1039) (pointed-to-by pointed-to-by1040) (tvector tvector1041) (location location1042) (import-location import-location1043) (occurrence occurrence1044)))
(define-inline (type?::bool obj::obj) ((@ isa? __object) obj (@ type type_type)))
(define (type-nil::type) (class-nil (@ type type_type)))
(define-inline (type-occurrence::int o::type) (-> |#!bigloo_wallow| o occurrence))
(define-inline (type-occurrence-set! o::type v::int) (set! (-> |#!bigloo_wallow| o occurrence) v))
(define-inline (type-import-location::obj o::type) (-> |#!bigloo_wallow| o import-location))
(define-inline (type-import-location-set! o::type v::obj) (set! (-> |#!bigloo_wallow| o import-location) v))
(define-inline (type-location::obj o::type) (-> |#!bigloo_wallow| o location))
(define-inline (type-location-set! o::type v::obj) (set! (-> |#!bigloo_wallow| o location) v))
(define-inline (type-tvector::obj o::type) (-> |#!bigloo_wallow| o tvector))
(define-inline (type-tvector-set! o::type v::obj) (set! (-> |#!bigloo_wallow| o tvector) v))
(define-inline (type-pointed-to-by::obj o::type) (-> |#!bigloo_wallow| o pointed-to-by))
(define-inline (type-pointed-to-by-set! o::type v::obj) (set! (-> |#!bigloo_wallow| o pointed-to-by) v))
(define-inline (type-alias::obj o::type) (-> |#!bigloo_wallow| o alias))
(define-inline (type-alias-set! o::type v::obj) (set! (-> |#!bigloo_wallow| o alias) v))
(define-inline (type-$::obj o::type) (-> |#!bigloo_wallow| o $))
(define-inline (type-$-set! o::type v::obj) (set! (-> |#!bigloo_wallow| o $) v))
(define-inline (type-magic?::bool o::type) (-> |#!bigloo_wallow| o magic?))
(define-inline (type-magic?-set! o::type v::bool) (set! (-> |#!bigloo_wallow| o magic?) v))
(define-inline (type-init?::bool o::type) (-> |#!bigloo_wallow| o init?))
(define-inline (type-init?-set! o::type v::bool) (set! (-> |#!bigloo_wallow| o init?) v))
(define-inline (type-parents::obj o::type) (-> |#!bigloo_wallow| o parents))
(define-inline (type-parents-set! o::type v::obj) (set! (-> |#!bigloo_wallow| o parents) v))
(define-inline (type-coerce-to::obj o::type) (-> |#!bigloo_wallow| o coerce-to))
(define-inline (type-coerce-to-set! o::type v::obj) (set! (-> |#!bigloo_wallow| o coerce-to) v))
(define-inline (type-class::obj o::type) (-> |#!bigloo_wallow| o class))
(define-inline (type-class-set! o::type v::obj) (set! (-> |#!bigloo_wallow| o class) v))
(define-inline (type-size::obj o::type) (-> |#!bigloo_wallow| o size))
(define-inline (type-size-set! o::type v::obj) (set! (-> |#!bigloo_wallow| o size) v))
(define-inline (type-name::obj o::type) (-> |#!bigloo_wallow| o name))
(define-inline (type-name-set! o::type v::obj) (set! (-> |#!bigloo_wallow| o name) v))
(define-inline (type-id::symbol o::type) (-> |#!bigloo_wallow| o id))
(define-inline (type-id-set! o::type v::symbol) (set! (-> |#!bigloo_wallow| o id) v))
))
